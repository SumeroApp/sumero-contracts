{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ClayToken.DelegationType",
          "name": "delegationType",
          "type": "uint8"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ClayToken.DelegationType",
          "name": "delegationType",
          "type": "uint8"
        }
      ],
      "name": "DelegatedPowerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELEGATE_BY_TYPE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DELEGATE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EIP712_REVISION",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REVISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_aaveGovernance",
      "outputs": [
        {
          "internalType": "contract ITransferHook",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_votingSnapshots",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "blockNumber",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "value",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_votingSnapshotsCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "enum ClayToken.DelegationType",
          "name": "delegationType",
          "type": "uint8"
        }
      ],
      "name": "delegateByType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "enum ClayToken.DelegationType",
          "name": "delegationType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateByTypeBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "internalType": "enum ClayToken.DelegationType",
          "name": "delegationType",
          "type": "uint8"
        }
      ],
      "name": "getDelegateeByType",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "enum ClayToken.DelegationType",
          "name": "delegationType",
          "type": "uint8"
        }
      ],
      "name": "getPowerAtBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "enum ClayToken.DelegationType",
          "name": "delegationType",
          "type": "uint8"
        }
      ],
      "name": "getPowerCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0d35446c29f12c7a97ed32ee2df05e50d55511346165dd6969924cece9e10fd5",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2090385",
    "logsBloom": "0x
    "blockHash": "0xc87258a79b49cebfc880711ed2ae7f7b3f0f42a923022ac05e4d01f0b5796b9b",
    "transactionHash": "0x0d35446c29f12c7a97ed32ee2df05e50d55511346165dd6969924cece9e10fd5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x0d35446c29f12c7a97ed32ee2df05e50d55511346165dd6969924cece9e10fd5",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc87258a79b49cebfc880711ed2ae7f7b3f0f42a923022ac05e4d01f0b5796b9b"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "2090385",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "42f3b7608bd76a7a69a99f7960c4c989",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ClayToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ClayToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegatedPowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATE_BY_TYPE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_REVISION\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_aaveGovernance\",\"outputs\":[{\"internalType\":\"contract ITransferHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_votingSnapshots\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"blockNumber\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_votingSnapshotsCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum ClayToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"delegateByType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum ClayToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateByTypeBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"enum ClayToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getDelegateeByType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum ClayToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum ClayToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"delegate(address)\":{\"details\":\"delegates all the powers to a specific user\",\"params\":{\"delegatee\":\"the user to which the power will be delegated*\"}},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates power from signatory to `delegatee`\",\"params\":{\"delegatee\":\"The address to delegate votes to\",\"expiry\":\"The time at which to expire the signature\",\"nonce\":\"The contract state required to match the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"delegateByType(address,uint8)\":{\"details\":\"delegates one specific power to a delegatee\",\"params\":{\"delegatee\":\"the user which delegated power has changed\",\"delegationType\":\"the type of delegation (VOTING_POWER, PROPOSITION_POWER)*\"}},\"delegateByTypeBySig(address,uint8,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates power from signatory to `delegatee`\",\"params\":{\"delegatee\":\"The address to delegate votes to\",\"delegationType\":\"the type of delegation (VOTING_POWER, PROPOSITION_POWER)\",\"expiry\":\"The time at which to expire the signature\",\"nonce\":\"The contract state required to match the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"getDelegateeByType(address,uint8)\":{\"details\":\"returns the delegatee of an user\",\"params\":{\"delegator\":\"the address of the delegator*\"}},\"getPowerAtBlock(address,uint256,uint8)\":{\"details\":\"returns the delegated power of a user at a certain block\",\"params\":{\"user\":\"the user*\"}},\"getPowerCurrent(address,uint8)\":{\"details\":\"returns the current delegated power of a user. The current power is the power delegated at the time of the last snapshot\",\"params\":{\"user\":\"the user*\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\",\"params\":{\"deadline\":\"the deadline timestamp, type(uint256).max for no deadline\",\"owner\":\"the owner of the funds\",\"r\":\"signature param\",\"s\":\"signature param\",\"spender\":\"the spender\",\"v\":\"signature param\",\"value\":\"the amount\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"totalSupplyAt(uint256)\":{\"details\":\"returns the total supply at a certain block number used by the voting strategy contracts to calculate the total votes needed for threshold/quorum In this initial implementation with no AAVE minting, simply returns the current supply A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future*\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_aaveGovernance\":{\"details\":\"reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility to control all potential reentrancies by calling back the AaveToken\"},\"_nonces\":{\"details\":\"owner => next valid nonce to submit with permit()\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ClayToken.sol\":\"ClayToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/ClayToken.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './interfaces/ITransferHook.sol';\\n\\n// SushiToken with Governance.\\ncontract ClayToken is ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    string internal constant NAME = 'Clay Token';\\n    string internal constant SYMBOL = 'CLAY';\\n    uint8 internal constant DECIMALS = 18;\\n\\n    uint256 public constant REVISION = 2;\\n    enum DelegationType {\\n        VOTING_POWER,\\n        PROPOSITION_POWER\\n    }\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed delegatee,\\n        DelegationType delegationType\\n    );\\n    event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n    /// @dev owner => next valid nonce to submit with permit()\\n    mapping(address => uint256) public _nonces;\\n\\n    mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\\n\\n    mapping(address => uint256) public _votingSnapshotsCounts;\\n\\n    /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n    /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n    /// to control all potential reentrancies by calling back the AaveToken\\n    ITransferHook public _aaveGovernance;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    bytes public constant EIP712_REVISION = bytes('1');\\n    bytes32 internal constant EIP712_DOMAIN =\\n        keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n    mapping(address => address) internal _votingDelegates;\\n\\n    mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\\n    mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\\n\\n    mapping(address => address) internal _propositionPowerDelegates;\\n\\n    constructor() public ERC20('Clay Token', 'CLAY') {\\n        uint256 chainId;\\n\\n        //solium-disable-next-line\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN,\\n                keccak256(bytes(NAME)),\\n                keccak256(EIP712_REVISION),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param owner the owner of the funds\\n     * @param spender the spender\\n     * @param value the amount\\n     * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n     * @param v signature param\\n     * @param s signature param\\n     * @param r signature param\\n     */\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(owner != address(0), 'INVALID_OWNER');\\n        //solium-disable-next-line\\n        require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n        uint256 currentValidNonce = _nonces[owner];\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n            )\\n        );\\n\\n        require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n        _nonces[owner] = currentValidNonce.add(1);\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev returns the revision of the implementation contract\\n     */\\n    function getRevision() internal pure returns (uint256) {\\n        return REVISION;\\n    }\\n\\n    /**\\n     * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n     * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n     * - On _mint, only for _to\\n     * - On _burn, only for _from\\n     * @param from the from address\\n     * @param to the to address\\n     * @param amount the amount to transfer\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        address votingFromDelegatee = _getDelegatee(from, _votingDelegates);\\n        address votingToDelegatee = _getDelegatee(to, _votingDelegates);\\n\\n        _moveDelegatesByType(votingFromDelegatee, votingToDelegatee, amount, DelegationType.VOTING_POWER);\\n\\n        address propPowerFromDelegatee = _getDelegatee(from, _propositionPowerDelegates);\\n        address propPowerToDelegatee = _getDelegatee(to, _propositionPowerDelegates);\\n\\n        _moveDelegatesByType(\\n            propPowerFromDelegatee,\\n            propPowerToDelegatee,\\n            amount,\\n            DelegationType.PROPOSITION_POWER\\n        );\\n\\n        // caching the aave governance address to avoid multiple state loads\\n        ITransferHook aaveGovernance = _aaveGovernance;\\n        if (aaveGovernance != ITransferHook(0)) {\\n            aaveGovernance.onTransfer(from, to, amount);\\n        }\\n    }\\n\\n    function _getDelegationDataByType(DelegationType delegationType)\\n        internal\\n        view\\n        returns (\\n            mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n            mapping(address => uint256) storage, //snapshots count\\n            mapping(address => address) storage //delegatees list\\n        )\\n    {\\n        if (delegationType == DelegationType.VOTING_POWER) {\\n            return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\\n        } else {\\n            return (_propositionPowerSnapshots, _propositionPowerSnapshotsCounts, _propositionPowerDelegates);\\n        }\\n    }\\n\\n    /**\\n     * @dev Delegates power from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateByTypeBySig(\\n        address delegatee,\\n        DelegationType delegationType,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        bytes32 structHash = keccak256(\\n            abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n        );\\n        bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), 'INVALID_SIGNATURE');\\n        require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n        require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n        _delegateByType(signatory, delegatee, delegationType);\\n    }\\n\\n    /**\\n     * @dev Delegates power from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), 'INVALID_SIGNATURE');\\n        require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n        require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n        _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\\n        _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\\n    }\\n\\n    bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\\n        keccak256('DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)');\\n\\n    bytes32 public constant DELEGATE_TYPEHASH =\\n        keccak256('Delegate(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n    /// @dev snapshot of a value on a specific block, used for votes\\n    struct Snapshot {\\n        uint128 blockNumber;\\n        uint128 value;\\n    }\\n\\n    /**\\n     * @dev delegates one specific power to a delegatee\\n     * @param delegatee the user which delegated power has changed\\n     * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n     **/\\n    function delegateByType(address delegatee, DelegationType delegationType) external {\\n        _delegateByType(msg.sender, delegatee, delegationType);\\n    }\\n\\n    /**\\n     * @dev delegates all the powers to a specific user\\n     * @param delegatee the user to which the power will be delegated\\n     **/\\n    function delegate(address delegatee) external {\\n        _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n        _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n    }\\n\\n    /**\\n     * @dev returns the delegatee of an user\\n     * @param delegator the address of the delegator\\n     **/\\n    function getDelegateeByType(address delegator, DelegationType delegationType)\\n        external\\n        view\\n        returns (address)\\n    {\\n        (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n        return _getDelegatee(delegator, delegates);\\n    }\\n\\n    /**\\n     * @dev returns the current delegated power of a user. The current power is the\\n     * power delegated at the time of the last snapshot\\n     * @param user the user\\n     **/\\n    function getPowerCurrent(address user, DelegationType delegationType) external view returns (uint256) {\\n        (\\n            mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n            mapping(address => uint256) storage snapshotsCounts,\\n\\n        ) = _getDelegationDataByType(delegationType);\\n\\n        return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\\n    }\\n\\n    /**\\n     * @dev returns the delegated power of a user at a certain block\\n     * @param user the user\\n     **/\\n    function getPowerAtBlock(\\n        address user,\\n        uint256 blockNumber,\\n        DelegationType delegationType\\n    ) external view returns (uint256) {\\n        (\\n            mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n            mapping(address => uint256) storage snapshotsCounts,\\n\\n        ) = _getDelegationDataByType(delegationType);\\n\\n        return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\\n    }\\n\\n    /**\\n     * @dev returns the total supply at a certain block number\\n     * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\\n     * In this initial implementation with no AAVE minting, simply returns the current supply\\n     * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\\n     **/\\n    function totalSupplyAt(uint256 blockNumber) external view returns (uint256) {\\n        return super.totalSupply();\\n    }\\n\\n    /**\\n     * @dev delegates the specific power to a delegatee\\n     * @param delegatee the user which delegated power has changed\\n     * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n     **/\\n    function _delegateByType(\\n        address delegator,\\n        address delegatee,\\n        DelegationType delegationType\\n    ) internal {\\n        require(delegatee != address(0), 'INVALID_DELEGATEE');\\n\\n        (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n        uint256 delegatorBalance = balanceOf(delegator);\\n\\n        address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n        delegates[delegator] = delegatee;\\n\\n        _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n        emit DelegateChanged(delegator, delegatee, delegationType);\\n    }\\n\\n    /**\\n     * @dev moves delegated power from one user to another\\n     * @param from the user from which delegated power is moved\\n     * @param to the user that will receive the delegated power\\n     * @param amount the amount of delegated power to be moved\\n     * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n     **/\\n    function _moveDelegatesByType(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        DelegationType delegationType\\n    ) internal {\\n        if (from == to) {\\n            return;\\n        }\\n\\n        (\\n            mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n            mapping(address => uint256) storage snapshotsCounts,\\n\\n        ) = _getDelegationDataByType(delegationType);\\n\\n        if (from != address(0)) {\\n            uint256 previous = 0;\\n            uint256 fromSnapshotsCount = snapshotsCounts[from];\\n\\n            if (fromSnapshotsCount != 0) {\\n                previous = snapshots[from][fromSnapshotsCount - 1].value;\\n            } else {\\n                previous = balanceOf(from);\\n            }\\n\\n            _writeSnapshot(\\n                snapshots,\\n                snapshotsCounts,\\n                from,\\n                uint128(previous),\\n                uint128(previous.sub(amount))\\n            );\\n\\n            emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\\n        }\\n        if (to != address(0)) {\\n            uint256 previous = 0;\\n            uint256 toSnapshotsCount = snapshotsCounts[to];\\n            if (toSnapshotsCount != 0) {\\n                previous = snapshots[to][toSnapshotsCount - 1].value;\\n            } else {\\n                previous = balanceOf(to);\\n            }\\n\\n            _writeSnapshot(snapshots, snapshotsCounts, to, uint128(previous), uint128(previous.add(amount)));\\n\\n            emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\\n        }\\n    }\\n\\n    /**\\n     * @dev searches a snapshot by block number. Uses binary search.\\n     * @param snapshots the snapshots mapping\\n     * @param snapshotsCounts the number of snapshots\\n     * @param user the user for which the snapshot is being searched\\n     * @param blockNumber the block number being searched\\n     **/\\n    function _searchByBlockNumber(\\n        mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n        mapping(address => uint256) storage snapshotsCounts,\\n        address user,\\n        uint256 blockNumber\\n    ) internal view returns (uint256) {\\n        require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\\n\\n        uint256 snapshotsCount = snapshotsCounts[user];\\n\\n        if (snapshotsCount == 0) {\\n            return balanceOf(user);\\n        }\\n\\n        // First check most recent balance\\n        if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\\n            return snapshots[user][snapshotsCount - 1].value;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (snapshots[user][0].blockNumber > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint256 lower = 0;\\n        uint256 upper = snapshotsCount - 1;\\n        while (upper > lower) {\\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Snapshot memory snapshot = snapshots[user][center];\\n            if (snapshot.blockNumber == blockNumber) {\\n                return snapshot.value;\\n            } else if (snapshot.blockNumber < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return snapshots[user][lower].value;\\n    }\\n\\n    /**\\n     * @dev Writes a snapshot for an owner of tokens\\n     * @param owner The owner of the tokens\\n     * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n     * @param newValue The value after the operation\\n     */\\n    function _writeSnapshot(\\n        mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n        mapping(address => uint256) storage snapshotsCounts,\\n        address owner,\\n        uint128 oldValue,\\n        uint128 newValue\\n    ) internal {\\n        uint128 currentBlock = uint128(block.number);\\n\\n        uint256 ownerSnapshotsCount = snapshotsCounts[owner];\\n        mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\\n\\n        // Doing multiple operations in the same block\\n        if (ownerSnapshotsCount != 0 && snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock) {\\n            snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\\n        } else {\\n            snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\\n            snapshotsCounts[owner] = ownerSnapshotsCount + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns the user delegatee. If a user never performed any delegation,\\n     * his delegated address will be 0x0. In that case we simply return the user itself\\n     * @param delegator the address of the user for which return the delegatee\\n     * @param delegates the array of delegates for a particular type of delegation\\n     **/\\n    function _getDelegatee(address delegator, mapping(address => address) storage delegates)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        address previousDelegatee = delegates[delegator];\\n\\n        if (previousDelegatee == address(0)) {\\n            return delegator;\\n        }\\n\\n        return previousDelegatee;\\n    }\\n\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\n        _mint(_to, _amount);\\n        _moveDelegatesByType(address(0), _to, _amount, DelegationType.VOTING_POWER);\\n        _moveDelegatesByType(address(0), _to, _amount, DelegationType.PROPOSITION_POWER);\\n    }\\n}\\n\",\"keccak256\":\"0xb1c89990a9fadc9133ce41ff91ca6780058f60c9ec30ac50b25a959c7d2c0208\"},\"contracts/interfaces/ITransferHook.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\ninterface ITransferHook {\\n    function onTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xaaf22b2f7c6ab01579fc2a301e1a278c532655b618ef71254efc6aab3a1694b6\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604080518082018252600a81526921b630bc902a37b5b2b760b11b602080830191825283518085019094526004845263434c415960e01b9084015281519192916200006091600391620001c8565b50805162000076906004906020840190620001c8565b50506005805460ff1916601217905550600062000092620001c4565b60058054610100600160a81b0319166101006001600160a01b03841690810291909117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350604080518082018252600a8082526921b630bc902a37b5b2b760b11b6020928301528251808401845260018152603160f81b9083015282517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818401527f15e8ea49f99409b177b1f4bac3c5b45eb1fac19d400ba1c78a7e1392d0d9912f818501527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528451808303909101815260c090910190935282519290910191909120905562000264565b3390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020b57805160ff19168380011785556200023b565b828001600101855582156200023b579182015b828111156200023b5782518255916020019190600101906200021e565b50620002499291506200024d565b5090565b5b808211156200024957600081556001016200024e565b61232080620002746000396000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c80638da5cb5b1161012a578063c2ffbb91116100bd578063dc937e1c1161008c578063dde43cba11610071578063dde43cba14610704578063f2fde38b1461070c578063f713d8a81461073257610226565b8063dc937e1c146106a7578063dd62ed3e146106d657610226565b8063c2ffbb91146105d2578063c3863ada14610607578063c3cda5201461060f578063d505accf1461065657610226565b8063a9059cbb116100f9578063a9059cbb14610549578063aa9fbe0214610575578063b2f4201d1461057d578063b9844d8d146105ac57610226565b80638da5cb5b146104f057806395d89b41146104f8578063981b24d014610500578063a457c2d71461051d57610226565b806340c10f19116101bd5780636f50458d1161018c578063715018a611610171578063715018a6146104ba57806378160376146104c25780637bb73c97146104ca57610226565b80636f50458d1461044957806370a082311461049457610226565b806340c10f191461039257806341cbf54a146103c05780635b3cc0cf146103c85780635c19a95c1461042357610226565b806330adf81f116101f957806330adf81f14610338578063313ce567146103405780633644e5151461035e578063395093511461036657610226565b806306fdde031461022b578063095ea7b3146102a857806318160ddd146102e857806323b872dd14610302575b600080fd5b610233610783565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561026d578181015183820152602001610255565b50505050905090810190601f16801561029a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102d4600480360360408110156102be57600080fd5b506001600160a01b038135169060200135610819565b604080519115158252519081900360200190f35b6102f0610837565b60408051918252519081900360200190f35b6102d46004803603606081101561031857600080fd5b506001600160a01b0381358116916020810135909116906040013561083d565b6102f06108c4565b6103486108e8565b6040805160ff9092168252519081900360200190f35b6102f06108f1565b6102d46004803603604081101561037c57600080fd5b506001600160a01b0381351690602001356108f7565b6103be600480360360408110156103a857600080fd5b506001600160a01b038135169060200135610945565b005b6102f06109e3565b6103f4600480360360408110156103de57600080fd5b506001600160a01b038135169060200135610a07565b60405180836001600160801b03168152602001826001600160801b031681526020019250505060405180910390f35b6103be6004803603602081101561043957600080fd5b50356001600160a01b0316610a38565b6104786004803603604081101561045f57600080fd5b5080356001600160a01b0316906020013560ff16610a53565b604080516001600160a01b039092168252519081900360200190f35b6102f0600480360360208110156104aa57600080fd5b50356001600160a01b0316610a75565b6103be610a90565b610233610b61565b6102f0600480360360208110156104e057600080fd5b50356001600160a01b0316610b9a565b610478610bac565b610233610bc0565b6102f06004803603602081101561051657600080fd5b5035610c21565b6102d46004803603604081101561053357600080fd5b506001600160a01b038135169060200135610c2b565b6102d46004803603604081101561055f57600080fd5b506001600160a01b038135169060200135610c93565b6102f0610ca7565b6102f06004803603604081101561059357600080fd5b5080356001600160a01b0316906020013560ff16610ccb565b6102f0600480360360208110156105c257600080fd5b50356001600160a01b0316610cf3565b6102f0600480360360608110156105e857600080fd5b5080356001600160a01b0316906020810135906040013560ff16610d05565b610478610d2e565b6103be600480360360c081101561062557600080fd5b506001600160a01b038135169060208101359060408101359060ff6060820135169060808101359060a00135610d3d565b6103be600480360360e081101561066c57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135610f5f565b6103be600480360360408110156106bd57600080fd5b5080356001600160a01b0316906020013560ff166111ab565b6102f0600480360360408110156106ec57600080fd5b506001600160a01b03813581169160200135166111b6565b6102f06111e1565b6103be6004803603602081101561072257600080fd5b50356001600160a01b03166111e6565b6103be600480360360e081101561074857600080fd5b506001600160a01b038135169060ff602082013581169160408101359160608201359160808101359091169060a08101359060c00135611313565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561080f5780601f106107e45761010080835404028352916020019161080f565b820191906000526020600020905b8154815290600101906020018083116107f257829003601f168201915b5050505050905090565b600061082d610826611546565b848461154a565b5060015b92915050565b60025490565b600061084a848484611636565b6108ba84610856611546565b6108b585604051806060016040528060288152602001612255602891396001600160a01b038a16600090815260016020526040812090610894611546565b6001600160a01b031681526020810191909152604001600020549190611791565b61154a565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60055460ff1690565b600a5481565b600061082d610904611546565b846108b58560016000610915611546565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611828565b61094d611546565b6001600160a01b031661095e610bac565b6001600160a01b0316146109b9576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6109c38282611889565b6109d1600083836000611979565b6109df600083836001611979565b5050565b7f9a9a49b990ba9bb39f8048c490a40ab25c18f55d208d5fbcf958261a9b48716d81565b60076020908152600092835260408084209091529082529020546001600160801b0380821691600160801b90041682565b610a4433826000611b88565b610a5033826001611b88565b50565b600080610a5f83611cbd565b92505050610a6d8482611cf7565b949350505050565b6001600160a01b031660009081526020819052604090205490565b610a98611546565b6001600160a01b0316610aa9610bac565b6001600160a01b031614610b04576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36005805474ffffffffffffffffffffffffffffffffffffffff0019169055565b6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b60086020526000908152604090205481565b60055461010090046001600160a01b031690565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561080f5780601f106107e45761010080835404028352916020019161080f565b6000610831610837565b600061082d610c38611546565b846108b5856040518060600160405280602581526020016122c66025913960016000610c62611546565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611791565b600061082d610ca0611546565b8484611636565b7f10d8d059343739efce7dad10d09f0806da52b252b3e6a7951920d2d6ec4102e581565b6000806000610cd984611cbd565b5091509150610cea82828743611d22565b95945050505050565b60066020526000908152604090205481565b6000806000610d1384611cbd565b5091509150610d2482828888611d22565b9695505050505050565b6009546001600160a01b031681565b604080517f9a9a49b990ba9bb39f8048c490a40ab25c18f55d208d5fbcf958261a9b48716d6020808301919091526001600160a01b038916828401526060820188905260808083018890528351808403909101815260a083018452805190820120600a5461190160f01b60c085015260c284015260e2808401829052845180850390910181526101028401808652815191840191909120600091829052610122850180875281905260ff891661014286015261016285018890526101828501879052945191949390926001926101a280840193601f198301929081900390910190855afa158015610e32573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610e8e576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f5349474e415455524560781b604482015290519081900360640190fd5b6001600160a01b03811660009081526006602052604090208054600181019091558814610ef2576040805162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f4e4f4e434560981b604482015290519081900360640190fd5b86421115610f3c576040805162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa2ac2824a920aa24a7a760711b604482015290519081900360640190fd5b610f48818a6000611b88565b610f54818a6001611b88565b505050505050505050565b6001600160a01b038716610fba576040805162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f4f574e455200000000000000000000000000000000000000604482015290519081900360640190fd5b83421115611004576040805162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa2ac2824a920aa24a7a760711b604482015290519081900360640190fd5b6001600160a01b03808816600081815260066020908152604080832054600a5482517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958c166060860152608085018b905260a0850181905260c08086018b90528251808703909101815260e08601835280519084012061190160f01b6101008701526101028601969096526101228086019690965281518086039096018652610142850180835286519684019690962093909552610162840180825283905260ff88166101828501526101a284018790526101c284018690525191926001926101e28083019392601f198301929081900390910190855afa158015611119573d6000803e3d6000fd5b505050602060405103516001600160a01b0316896001600160a01b03161461117c576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f5349474e415455524560781b604482015290519081900360640190fd5b611187826001611828565b6001600160a01b038a16600090815260066020526040902055610f5489898961154a565b6109df338383611b88565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600281565b6111ee611546565b6001600160a01b03166111ff610bac565b6001600160a01b03161461125a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661129f5760405162461bcd60e51b81526004018080602001828103825260268152602001806121e76026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b60007f10d8d059343739efce7dad10d09f0806da52b252b3e6a7951920d2d6ec4102e58888600181111561134357fe5b604080516020808201959095526001600160a01b039093168382015260608301919091526080820189905260a08083018990528151808403909101815260c083018252805190840120600a5461190160f01b60e085015260e2840152610102808401829052825180850390910181526101228401808452815191860191909120600091829052610142850180855281905260ff8a1661016286015261018285018990526101a285018890529251919550919391926001926101c2808301939192601f198301929081900390910190855afa158015611425573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611481576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f5349474e415455524560781b604482015290519081900360640190fd5b6001600160a01b038116600090815260066020526040902080546001810190915588146114e5576040805162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f4e4f4e434560981b604482015290519081900360640190fd5b8642111561152f576040805162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa2ac2824a920aa24a7a760711b604482015290519081900360640190fd5b61153a818b8b611b88565b50505050505050505050565b3390565b6001600160a01b03831661158f5760405162461bcd60e51b81526004018080602001828103825260248152602001806122a26024913960400191505060405180910390fd5b6001600160a01b0382166115d45760405162461bcd60e51b815260040180806020018281038252602281526020018061220d6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831661167b5760405162461bcd60e51b815260040180806020018281038252602581526020018061227d6025913960400191505060405180910390fd5b6001600160a01b0382166116c05760405162461bcd60e51b81526004018080602001828103825260238152602001806121c46023913960400191505060405180910390fd5b6116cb838383611f46565b6117088160405180606001604052806026815260200161222f602691396001600160a01b0386166000908152602081905260409020549190611791565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546117379082611828565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156118205760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156117e55781810151838201526020016117cd565b50505050905090810190601f1680156118125780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015611882576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b0382166118e4576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6118f060008383611f46565b6002546118fd9082611828565b6002556001600160a01b0382166000908152602081905260409020546119239082611828565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b826001600160a01b0316846001600160a01b0316141561199857611b82565b6000806119a483611cbd565b5090925090506001600160a01b03861615611a97576001600160a01b0386166000908152602082905260408120548015611a15576001600160a01b03881660009081526020858152604080832060001985018452909152902054600160801b90046001600160801b03169150611a21565b611a1e88610a75565b91505b611a3784848a85611a32818c612039565b612096565b6001600160a01b0388167fa0a19463ee116110c9b282012d9b65cc5522dc38a9520340cbaf3142e550127f611a6c8489612039565b8760405180838152602001826001811115611a8357fe5b81526020019250505060405180910390a250505b6001600160a01b03851615611b7f576001600160a01b0385166000908152602082905260408120548015611b02576001600160a01b03871660009081526020858152604080832060001985018452909152902054600160801b90046001600160801b03169150611b0e565b611b0b87610a75565b91505b611b1f84848985611a32818c611828565b6001600160a01b0387167fa0a19463ee116110c9b282012d9b65cc5522dc38a9520340cbaf3142e550127f611b548489611828565b8760405180838152602001826001811115611b6b57fe5b81526020019250505060405180910390a250505b50505b50505050565b6001600160a01b038216611be3576040805162461bcd60e51b815260206004820152601160248201527f494e56414c49445f44454c454741544545000000000000000000000000000000604482015290519081900360640190fd5b6000611bee82611cbd565b925050506000611bfd85610a75565b90506000611c0b8684611cf7565b6001600160a01b03878116600090815260208690526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169188169190911790559050611c5f81868487611979565b846001600160a01b0316866001600160a01b03167fe8d51c8e11bd570db1734c8ec775785330e77007feed45c43b608ef33ff914bd8660405180826001811115611ca557fe5b815260200191505060405180910390a3505050505050565b6000808080846001811115611cce57fe5b1415611ce457506007915060089050600b611cf0565b50600c9150600d9050600e5b9193909250565b6001600160a01b03808316600090815260208390526040812054909116806118825783915050610831565b600043821115611d79576040805162461bcd60e51b815260206004820152601460248201527f494e56414c49445f424c4f434b5f4e554d424552000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03831660009081526020859052604090205480611da857611da084610a75565b915050610a6d565b6001600160a01b038416600090815260208781526040808320600019850184529091529020546001600160801b03168310611e1b576001600160a01b038416600090815260208781526040808320600019909401835292905220546001600160801b03600160801b909104169050610a6d565b6001600160a01b0384166000908152602087815260408083208380529091529020546001600160801b0316831015611e57576000915050610a6d565b600060001982015b81811115611f09576002828203048103611e776121ac565b506001600160a01b038716600090815260208a815260408083208484528252918290208251808401909352546001600160801b03808216808552600160801b9092041691830191909152871415611ee157602001516001600160801b03169450610a6d9350505050565b80516001600160801b0316871115611efb57819350611f02565b6001820392505b5050611e5f565b506001600160a01b0385166000908152602088815260408083209383529290522054600160801b90046001600160801b0316915050949350505050565b6000611f5384600b611cf7565b90506000611f6284600b611cf7565b9050611f718282856000611979565b6000611f7e86600e611cf7565b90506000611f8d86600e611cf7565b9050611f9c8282876001611979565b6009546001600160a01b0316801561202f57806001600160a01b0316634a3931498989896040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b15801561201657600080fd5b505af115801561202a573d6000803e3d6000fd5b505050505b5050505050505050565b600082821115612090576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b038316600090815260208581526040808320549188905290912043919081158015906120e7575060001982016000908152602082905260409020546001600160801b038481169116145b1561211c576000198201600090815260208290526040902080546001600160801b03808716600160801b02911617905561202f565b6040805180820182526001600160801b038086168252868116602080840191825260008781528682528581209451855493518516600160801b029085167fffffffffffffffffffffffffffffffff0000000000000000000000000000000090941693909317909316919091179092556001600160a01b038916815290899052206001830190555050505050505050565b60408051808201909152600080825260208201529056fe45524332303a207472616e7366657220746f20746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220fc30c63d788c0c424b419902967d8e17027d7d2eb3669fc446083ad01d7294f364736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102265760003560e01c80638da5cb5b1161012a578063c2ffbb91116100bd578063dc937e1c1161008c578063dde43cba11610071578063dde43cba14610704578063f2fde38b1461070c578063f713d8a81461073257610226565b8063dc937e1c146106a7578063dd62ed3e146106d657610226565b8063c2ffbb91146105d2578063c3863ada14610607578063c3cda5201461060f578063d505accf1461065657610226565b8063a9059cbb116100f9578063a9059cbb14610549578063aa9fbe0214610575578063b2f4201d1461057d578063b9844d8d146105ac57610226565b80638da5cb5b146104f057806395d89b41146104f8578063981b24d014610500578063a457c2d71461051d57610226565b806340c10f19116101bd5780636f50458d1161018c578063715018a611610171578063715018a6146104ba57806378160376146104c25780637bb73c97146104ca57610226565b80636f50458d1461044957806370a082311461049457610226565b806340c10f191461039257806341cbf54a146103c05780635b3cc0cf146103c85780635c19a95c1461042357610226565b806330adf81f116101f957806330adf81f14610338578063313ce567146103405780633644e5151461035e578063395093511461036657610226565b806306fdde031461022b578063095ea7b3146102a857806318160ddd146102e857806323b872dd14610302575b600080fd5b610233610783565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561026d578181015183820152602001610255565b50505050905090810190601f16801561029a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102d4600480360360408110156102be57600080fd5b506001600160a01b038135169060200135610819565b604080519115158252519081900360200190f35b6102f0610837565b60408051918252519081900360200190f35b6102d46004803603606081101561031857600080fd5b506001600160a01b0381358116916020810135909116906040013561083d565b6102f06108c4565b6103486108e8565b6040805160ff9092168252519081900360200190f35b6102f06108f1565b6102d46004803603604081101561037c57600080fd5b506001600160a01b0381351690602001356108f7565b6103be600480360360408110156103a857600080fd5b506001600160a01b038135169060200135610945565b005b6102f06109e3565b6103f4600480360360408110156103de57600080fd5b506001600160a01b038135169060200135610a07565b60405180836001600160801b03168152602001826001600160801b031681526020019250505060405180910390f35b6103be6004803603602081101561043957600080fd5b50356001600160a01b0316610a38565b6104786004803603604081101561045f57600080fd5b5080356001600160a01b0316906020013560ff16610a53565b604080516001600160a01b039092168252519081900360200190f35b6102f0600480360360208110156104aa57600080fd5b50356001600160a01b0316610a75565b6103be610a90565b610233610b61565b6102f0600480360360208110156104e057600080fd5b50356001600160a01b0316610b9a565b610478610bac565b610233610bc0565b6102f06004803603602081101561051657600080fd5b5035610c21565b6102d46004803603604081101561053357600080fd5b506001600160a01b038135169060200135610c2b565b6102d46004803603604081101561055f57600080fd5b506001600160a01b038135169060200135610c93565b6102f0610ca7565b6102f06004803603604081101561059357600080fd5b5080356001600160a01b0316906020013560ff16610ccb565b6102f0600480360360208110156105c257600080fd5b50356001600160a01b0316610cf3565b6102f0600480360360608110156105e857600080fd5b5080356001600160a01b0316906020810135906040013560ff16610d05565b610478610d2e565b6103be600480360360c081101561062557600080fd5b506001600160a01b038135169060208101359060408101359060ff6060820135169060808101359060a00135610d3d565b6103be600480360360e081101561066c57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135610f5f565b6103be600480360360408110156106bd57600080fd5b5080356001600160a01b0316906020013560ff166111ab565b6102f0600480360360408110156106ec57600080fd5b506001600160a01b03813581169160200135166111b6565b6102f06111e1565b6103be6004803603602081101561072257600080fd5b50356001600160a01b03166111e6565b6103be600480360360e081101561074857600080fd5b506001600160a01b038135169060ff602082013581169160408101359160608201359160808101359091169060a08101359060c00135611313565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561080f5780601f106107e45761010080835404028352916020019161080f565b820191906000526020600020905b8154815290600101906020018083116107f257829003601f168201915b5050505050905090565b600061082d610826611546565b848461154a565b5060015b92915050565b60025490565b600061084a848484611636565b6108ba84610856611546565b6108b585604051806060016040528060288152602001612255602891396001600160a01b038a16600090815260016020526040812090610894611546565b6001600160a01b031681526020810191909152604001600020549190611791565b61154a565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60055460ff1690565b600a5481565b600061082d610904611546565b846108b58560016000610915611546565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611828565b61094d611546565b6001600160a01b031661095e610bac565b6001600160a01b0316146109b9576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6109c38282611889565b6109d1600083836000611979565b6109df600083836001611979565b5050565b7f9a9a49b990ba9bb39f8048c490a40ab25c18f55d208d5fbcf958261a9b48716d81565b60076020908152600092835260408084209091529082529020546001600160801b0380821691600160801b90041682565b610a4433826000611b88565b610a5033826001611b88565b50565b600080610a5f83611cbd565b92505050610a6d8482611cf7565b949350505050565b6001600160a01b031660009081526020819052604090205490565b610a98611546565b6001600160a01b0316610aa9610bac565b6001600160a01b031614610b04576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36005805474ffffffffffffffffffffffffffffffffffffffff0019169055565b6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b60086020526000908152604090205481565b60055461010090046001600160a01b031690565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561080f5780601f106107e45761010080835404028352916020019161080f565b6000610831610837565b600061082d610c38611546565b846108b5856040518060600160405280602581526020016122c66025913960016000610c62611546565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611791565b600061082d610ca0611546565b8484611636565b7f10d8d059343739efce7dad10d09f0806da52b252b3e6a7951920d2d6ec4102e581565b6000806000610cd984611cbd565b5091509150610cea82828743611d22565b95945050505050565b60066020526000908152604090205481565b6000806000610d1384611cbd565b5091509150610d2482828888611d22565b9695505050505050565b6009546001600160a01b031681565b604080517f9a9a49b990ba9bb39f8048c490a40ab25c18f55d208d5fbcf958261a9b48716d6020808301919091526001600160a01b038916828401526060820188905260808083018890528351808403909101815260a083018452805190820120600a5461190160f01b60c085015260c284015260e2808401829052845180850390910181526101028401808652815191840191909120600091829052610122850180875281905260ff891661014286015261016285018890526101828501879052945191949390926001926101a280840193601f198301929081900390910190855afa158015610e32573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610e8e576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f5349474e415455524560781b604482015290519081900360640190fd5b6001600160a01b03811660009081526006602052604090208054600181019091558814610ef2576040805162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f4e4f4e434560981b604482015290519081900360640190fd5b86421115610f3c576040805162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa2ac2824a920aa24a7a760711b604482015290519081900360640190fd5b610f48818a6000611b88565b610f54818a6001611b88565b505050505050505050565b6001600160a01b038716610fba576040805162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f4f574e455200000000000000000000000000000000000000604482015290519081900360640190fd5b83421115611004576040805162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa2ac2824a920aa24a7a760711b604482015290519081900360640190fd5b6001600160a01b03808816600081815260066020908152604080832054600a5482517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958c166060860152608085018b905260a0850181905260c08086018b90528251808703909101815260e08601835280519084012061190160f01b6101008701526101028601969096526101228086019690965281518086039096018652610142850180835286519684019690962093909552610162840180825283905260ff88166101828501526101a284018790526101c284018690525191926001926101e28083019392601f198301929081900390910190855afa158015611119573d6000803e3d6000fd5b505050602060405103516001600160a01b0316896001600160a01b03161461117c576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f5349474e415455524560781b604482015290519081900360640190fd5b611187826001611828565b6001600160a01b038a16600090815260066020526040902055610f5489898961154a565b6109df338383611b88565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600281565b6111ee611546565b6001600160a01b03166111ff610bac565b6001600160a01b03161461125a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661129f5760405162461bcd60e51b81526004018080602001828103825260268152602001806121e76026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b60007f10d8d059343739efce7dad10d09f0806da52b252b3e6a7951920d2d6ec4102e58888600181111561134357fe5b604080516020808201959095526001600160a01b039093168382015260608301919091526080820189905260a08083018990528151808403909101815260c083018252805190840120600a5461190160f01b60e085015260e2840152610102808401829052825180850390910181526101228401808452815191860191909120600091829052610142850180855281905260ff8a1661016286015261018285018990526101a285018890529251919550919391926001926101c2808301939192601f198301929081900390910190855afa158015611425573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611481576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f5349474e415455524560781b604482015290519081900360640190fd5b6001600160a01b038116600090815260066020526040902080546001810190915588146114e5576040805162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f4e4f4e434560981b604482015290519081900360640190fd5b8642111561152f576040805162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa2ac2824a920aa24a7a760711b604482015290519081900360640190fd5b61153a818b8b611b88565b50505050505050505050565b3390565b6001600160a01b03831661158f5760405162461bcd60e51b81526004018080602001828103825260248152602001806122a26024913960400191505060405180910390fd5b6001600160a01b0382166115d45760405162461bcd60e51b815260040180806020018281038252602281526020018061220d6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831661167b5760405162461bcd60e51b815260040180806020018281038252602581526020018061227d6025913960400191505060405180910390fd5b6001600160a01b0382166116c05760405162461bcd60e51b81526004018080602001828103825260238152602001806121c46023913960400191505060405180910390fd5b6116cb838383611f46565b6117088160405180606001604052806026815260200161222f602691396001600160a01b0386166000908152602081905260409020549190611791565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546117379082611828565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156118205760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156117e55781810151838201526020016117cd565b50505050905090810190601f1680156118125780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015611882576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b0382166118e4576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6118f060008383611f46565b6002546118fd9082611828565b6002556001600160a01b0382166000908152602081905260409020546119239082611828565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b826001600160a01b0316846001600160a01b0316141561199857611b82565b6000806119a483611cbd565b5090925090506001600160a01b03861615611a97576001600160a01b0386166000908152602082905260408120548015611a15576001600160a01b03881660009081526020858152604080832060001985018452909152902054600160801b90046001600160801b03169150611a21565b611a1e88610a75565b91505b611a3784848a85611a32818c612039565b612096565b6001600160a01b0388167fa0a19463ee116110c9b282012d9b65cc5522dc38a9520340cbaf3142e550127f611a6c8489612039565b8760405180838152602001826001811115611a8357fe5b81526020019250505060405180910390a250505b6001600160a01b03851615611b7f576001600160a01b0385166000908152602082905260408120548015611b02576001600160a01b03871660009081526020858152604080832060001985018452909152902054600160801b90046001600160801b03169150611b0e565b611b0b87610a75565b91505b611b1f84848985611a32818c611828565b6001600160a01b0387167fa0a19463ee116110c9b282012d9b65cc5522dc38a9520340cbaf3142e550127f611b548489611828565b8760405180838152602001826001811115611b6b57fe5b81526020019250505060405180910390a250505b50505b50505050565b6001600160a01b038216611be3576040805162461bcd60e51b815260206004820152601160248201527f494e56414c49445f44454c454741544545000000000000000000000000000000604482015290519081900360640190fd5b6000611bee82611cbd565b925050506000611bfd85610a75565b90506000611c0b8684611cf7565b6001600160a01b03878116600090815260208690526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169188169190911790559050611c5f81868487611979565b846001600160a01b0316866001600160a01b03167fe8d51c8e11bd570db1734c8ec775785330e77007feed45c43b608ef33ff914bd8660405180826001811115611ca557fe5b815260200191505060405180910390a3505050505050565b6000808080846001811115611cce57fe5b1415611ce457506007915060089050600b611cf0565b50600c9150600d9050600e5b9193909250565b6001600160a01b03808316600090815260208390526040812054909116806118825783915050610831565b600043821115611d79576040805162461bcd60e51b815260206004820152601460248201527f494e56414c49445f424c4f434b5f4e554d424552000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03831660009081526020859052604090205480611da857611da084610a75565b915050610a6d565b6001600160a01b038416600090815260208781526040808320600019850184529091529020546001600160801b03168310611e1b576001600160a01b038416600090815260208781526040808320600019909401835292905220546001600160801b03600160801b909104169050610a6d565b6001600160a01b0384166000908152602087815260408083208380529091529020546001600160801b0316831015611e57576000915050610a6d565b600060001982015b81811115611f09576002828203048103611e776121ac565b506001600160a01b038716600090815260208a815260408083208484528252918290208251808401909352546001600160801b03808216808552600160801b9092041691830191909152871415611ee157602001516001600160801b03169450610a6d9350505050565b80516001600160801b0316871115611efb57819350611f02565b6001820392505b5050611e5f565b506001600160a01b0385166000908152602088815260408083209383529290522054600160801b90046001600160801b0316915050949350505050565b6000611f5384600b611cf7565b90506000611f6284600b611cf7565b9050611f718282856000611979565b6000611f7e86600e611cf7565b90506000611f8d86600e611cf7565b9050611f9c8282876001611979565b6009546001600160a01b0316801561202f57806001600160a01b0316634a3931498989896040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b15801561201657600080fd5b505af115801561202a573d6000803e3d6000fd5b505050505b5050505050505050565b600082821115612090576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b038316600090815260208581526040808320549188905290912043919081158015906120e7575060001982016000908152602082905260409020546001600160801b038481169116145b1561211c576000198201600090815260208290526040902080546001600160801b03808716600160801b02911617905561202f565b6040805180820182526001600160801b038086168252868116602080840191825260008781528682528581209451855493518516600160801b029085167fffffffffffffffffffffffffffffffff0000000000000000000000000000000090941693909317909316919091179092556001600160a01b038916815290899052206001830190555050505050505050565b60408051808201909152600080825260208201529056fe45524332303a207472616e7366657220746f20746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220fc30c63d788c0c424b419902967d8e17027d7d2eb3669fc446083ad01d7294f364736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "delegate(address)": {
        "details": "delegates all the powers to a specific user",
        "params": {
          "delegatee": "the user to which the power will be delegated*"
        }
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Delegates power from signatory to `delegatee`",
        "params": {
          "delegatee": "The address to delegate votes to",
          "expiry": "The time at which to expire the signature",
          "nonce": "The contract state required to match the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "delegateByType(address,uint8)": {
        "details": "delegates one specific power to a delegatee",
        "params": {
          "delegatee": "the user which delegated power has changed",
          "delegationType": "the type of delegation (VOTING_POWER, PROPOSITION_POWER)*"
        }
      },
      "delegateByTypeBySig(address,uint8,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Delegates power from signatory to `delegatee`",
        "params": {
          "delegatee": "The address to delegate votes to",
          "delegationType": "the type of delegation (VOTING_POWER, PROPOSITION_POWER)",
          "expiry": "The time at which to expire the signature",
          "nonce": "The contract state required to match the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "getDelegateeByType(address,uint8)": {
        "details": "returns the delegatee of an user",
        "params": {
          "delegator": "the address of the delegator*"
        }
      },
      "getPowerAtBlock(address,uint256,uint8)": {
        "details": "returns the delegated power of a user at a certain block",
        "params": {
          "user": "the user*"
        }
      },
      "getPowerCurrent(address,uint8)": {
        "details": "returns the current delegated power of a user. The current power is the power delegated at the time of the last snapshot",
        "params": {
          "user": "the user*"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md",
        "params": {
          "deadline": "the deadline timestamp, type(uint256).max for no deadline",
          "owner": "the owner of the funds",
          "r": "signature param",
          "s": "signature param",
          "spender": "the spender",
          "v": "signature param",
          "value": "the amount"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "totalSupplyAt(uint256)": {
        "details": "returns the total supply at a certain block number used by the voting strategy contracts to calculate the total votes needed for threshold/quorum In this initial implementation with no AAVE minting, simply returns the current supply A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future*"
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_aaveGovernance": {
        "details": "reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility to control all potential reentrancies by calling back the AaveToken"
      },
      "_nonces": {
        "details": "owner => next valid nonce to submit with permit()"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 481,
        "contract": "contracts/ClayToken.sol:ClayToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 487,
        "contract": "contracts/ClayToken.sol:ClayToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 489,
        "contract": "contracts/ClayToken.sol:ClayToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 491,
        "contract": "contracts/ClayToken.sol:ClayToken",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 493,
        "contract": "contracts/ClayToken.sol:ClayToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 495,
        "contract": "contracts/ClayToken.sol:ClayToken",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 7,
        "contract": "contracts/ClayToken.sol:ClayToken",
        "label": "_owner",
        "offset": 1,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1116,
        "contract": "contracts/ClayToken.sol:ClayToken",
        "label": "_nonces",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1122,
        "contract": "contracts/ClayToken.sol:ClayToken",
        "label": "_votingSnapshots",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Snapshot)1607_storage))"
      },
      {
        "astId": 1126,
        "contract": "contracts/ClayToken.sol:ClayToken",
        "label": "_votingSnapshotsCounts",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1129,
        "contract": "contracts/ClayToken.sol:ClayToken",
        "label": "_aaveGovernance",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ITransferHook)2287"
      },
      {
        "astId": 1131,
        "contract": "contracts/ClayToken.sol:ClayToken",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 1151,
        "contract": "contracts/ClayToken.sol:ClayToken",
        "label": "_votingDelegates",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1157,
        "contract": "contracts/ClayToken.sol:ClayToken",
        "label": "_propositionPowerSnapshots",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Snapshot)1607_storage))"
      },
      {
        "astId": 1161,
        "contract": "contracts/ClayToken.sol:ClayToken",
        "label": "_propositionPowerSnapshotsCounts",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1165,
        "contract": "contracts/ClayToken.sol:ClayToken",
        "label": "_propositionPowerDelegates",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITransferHook)2287": {
        "encoding": "inplace",
        "label": "contract ITransferHook",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Snapshot)1607_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct ClayToken.Snapshot))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Snapshot)1607_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Snapshot)1607_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ClayToken.Snapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(Snapshot)1607_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Snapshot)1607_storage": {
        "encoding": "inplace",
        "label": "struct ClayToken.Snapshot",
        "members": [
          {
            "astId": 1604,
            "contract": "contracts/ClayToken.sol:ClayToken",
            "label": "blockNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 1606,
            "contract": "contracts/ClayToken.sol:ClayToken",
            "label": "value",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}