{
  "address": "0x39489CffA621d18345011E00A022659FFfcb95Dd",
  "abi": [],
  "transactionHash": "0xe27c8a2b7ddb3fe483c979aa15d2ad4af7430a0edc4cd2315605394c64efbfa0",
  "receipt": {
    "to": null,
    "from": "0x83EF79Ea3FfA70E781073b7E459e324952EcD4Bd",
    "contractAddress": "0x39489CffA621d18345011E00A022659FFfcb95Dd",
    "transactionIndex": 115,
    "gasUsed": "4654862",
    "logsBloom": "0x
    "blockHash": "0xc219672012e4fba431a0335218ebcb17b8157aa3b8dd1b8f7a1d44886aca0aa3",
    "transactionHash": "0xe27c8a2b7ddb3fe483c979aa15d2ad4af7430a0edc4cd2315605394c64efbfa0",
    "logs": [],
    "blockNumber": 7914560,
    "cumulativeGasUsed": "21437581",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ff64ff316af37f8c5c87978941fbcc25",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Using this library to deploy EMP's allows calling contracts to avoid importing the full EMP bytecode.\",\"kind\":\"dev\",\"methods\":{\"deploy(Liquidatable.ConstructorParams)\":{\"details\":\"Caller will need to register new EMP with the Registry to begin requesting prices. Caller is also responsible for enforcing constraints on `params`.\",\"params\":{\"params\":\"is a `ConstructorParams` object from ExpiringMultiParty.\"},\"returns\":{\"_0\":\"address of the deployed ExpiringMultiParty contract\"}}},\"title\":\"Provides convenient Expiring Multi Party contract utilities.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy(Liquidatable.ConstructorParams)\":{\"notice\":\"Returns address of new EMP deployed with given `params` configuration.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UMA/financial-templates/expiring-multiparty/ExpiringMultiPartyLib.sol\":\"ExpiringMultiPartyLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"contracts/UMA/common/implementation/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\n\\n/**\\n * @title Library for fixed point arithmetic on uints\\n */\\nlibrary FixedPoint {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For unsigned values:\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\\n\\n    // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\\n    struct Unsigned {\\n        uint256 rawValue;\\n    }\\n\\n    /**\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a uint to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledUint(uint256 a)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(uint256 a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(uint256 a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return Unsigned(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return add(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return sub(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(uint256 a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return sub(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as a uint256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\n        if (mod != 0) {\\n            return Unsigned(mulFloor.add(1));\\n        } else {\\n            return Unsigned(mulFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        // Since b is an uint, there is no risk of truncation and we can just mul it normally\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as a uint256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return Unsigned(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a uint256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(uint256 a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return div(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\n        uint256 divFloor = aScaled.div(b.rawValue);\\n        uint256 mod = aScaled.mod(b.rawValue);\\n        if (mod != 0) {\\n            return Unsigned(divFloor.add(1));\\n        } else {\\n            return Unsigned(divFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\n        // This creates the possibility of overflow if b is very large.\\n        return divCeil(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (Unsigned memory output)\\n    {\\n        output = fromUnscaledUint(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------------------------------------- SIGNED -------------------------------------------------------------\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For signed values:\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\n\\n    struct Signed {\\n        int256 rawValue;\\n    }\\n\\n    function fromSigned(Signed memory a)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\n        return Unsigned(uint256(a.rawValue));\\n    }\\n\\n    function fromUnsigned(Unsigned memory a)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\n        return Signed(int256(a.rawValue));\\n    }\\n\\n    /**\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a int to convert into a FixedPoint.Signed.\\n     * @return the converted FixedPoint.Signed.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a int256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, int256 b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(int256 a, Signed memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, int256 b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(int256 a, Signed memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, int256 b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(int256 a, Signed memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, int256 b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(int256 a, Signed memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        return Signed(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, int256 b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        return add(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        return Signed(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, int256 b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        return sub(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(int256 a, Signed memory b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        return sub(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as an int256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, int256 b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(mulTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(mulTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, int256 b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as an int256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, int256 b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        return Signed(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a an int256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(int256 a, Signed memory b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        return div(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = aScaled % b.rawValue;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(divTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(divTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, int256 b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\n        // This creates the possibility of overflow if b is very large.\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a uint256 (negative exponents are not allowed).\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Signed memory a, uint256 b)\\n        internal\\n        pure\\n        returns (Signed memory output)\\n    {\\n        output = fromUnscaledInt(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6581e8d3ea75875a673b896bd2cf1318734f9469ca0f586e8be0559fd0ba7be2\",\"license\":\"MIT\"},\"contracts/UMA/common/implementation/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\n */\\ncontract Lockable {\\n    bool private _notEntered;\\n\\n    constructor() {\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\n        // refund coming into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\\n     * function that does the actual state modification.\\n     */\\n    modifier nonReentrant() {\\n        _preEntranceCheck();\\n        _preEntranceSet();\\n        _;\\n        _postEntranceReset();\\n    }\\n\\n    /**\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\n     */\\n    modifier nonReentrantView() {\\n        _preEntranceCheck();\\n        _;\\n    }\\n\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\\n    // then call `_postEntranceReset()`.\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\n    function _preEntranceCheck() internal view {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n    }\\n\\n    function _preEntranceSet() internal {\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n    }\\n\\n    function _postEntranceReset() internal {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    // These functions are intended to be used by child contracts to temporarily disable and re-enable the guard.\\n    // Intended use:\\n    // _startReentrantGuardDisabled();\\n    // ...\\n    // _endReentrantGuardDisabled();\\n    //\\n    // IMPORTANT: these should NEVER be used in a method that isn't inside a nonReentrant block. Otherwise, it's\\n    // possible to permanently lock your contract.\\n    function _startReentrantGuardDisabled() internal {\\n        _notEntered = true;\\n    }\\n\\n    function _endReentrantGuardDisabled() internal {\\n        _notEntered = false;\\n    }\\n}\\n\",\"keccak256\":\"0x62f70caf33b9b53618647ddbf1cb7a4ff94593f73d4fbfc7eaea59811bb6771f\",\"license\":\"MIT\"},\"contracts/UMA/common/implementation/Testable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Timer.sol\\\";\\n\\n/**\\n * @title Base class that provides time overrides, but only if being run in test mode.\\n */\\nabstract contract Testable {\\n    // If the contract is being run in production, then `timerAddress` will be the 0x0 address.\\n    // Note: this variable should be set on construction and never modified.\\n    address public timerAddress;\\n\\n    /**\\n     * @notice Constructs the Testable contract. Called by child contracts.\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\n     * Must be set to 0x0 for production environments that use live time.\\n     */\\n    constructor(address _timerAddress) {\\n        timerAddress = _timerAddress;\\n    }\\n\\n    /**\\n     * @notice Reverts if not running in test mode.\\n     */\\n    modifier onlyIfTest() {\\n        require(timerAddress != address(0x0));\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the current time.\\n     * @dev Will revert if not running in test mode.\\n     * @param time timestamp to set current Testable time to.\\n     */\\n    function setCurrentTime(uint256 time) external onlyIfTest {\\n        Timer(timerAddress).setCurrentTime(time);\\n    }\\n\\n    /**\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\n     * Otherwise, it will return the block timestamp.\\n     * @return uint for the current Testable timestamp.\\n     */\\n    function getCurrentTime() public view virtual returns (uint256) {\\n        if (timerAddress != address(0x0)) {\\n            return Timer(timerAddress).getCurrentTime();\\n        } else {\\n            return block.timestamp; // solhint-disable-line not-rely-on-time\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x35d99152ba1a4c83027cdff79885aa705f00fe4f7d50aaf8cebf659a76cee07a\",\"license\":\"MIT\"},\"contracts/UMA/common/implementation/Timer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Universal store of current contract time for testing environments.\\n */\\ncontract Timer {\\n    uint256 private currentTime;\\n\\n    constructor() {\\n        currentTime = block.timestamp; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /**\\n     * @notice Sets the current time.\\n     * @dev Will revert if not running in test mode.\\n     * @param time timestamp to set `currentTime` to.\\n     */\\n    function setCurrentTime(uint256 time) external {\\n        currentTime = time;\\n    }\\n\\n    /**\\n     * @notice Gets the currentTime variable set in the Timer.\\n     * @return uint256 for the current Testable timestamp.\\n     */\\n    function getCurrentTime() public view returns (uint256) {\\n        return currentTime;\\n    }\\n}\\n\",\"keccak256\":\"0xc2e1472718bb5ec7d523d0b639a470d36bb07b70753ce3dc9fa60969ddfa5048\",\"license\":\"MIT\"},\"contracts/UMA/common/interfaces/ExpandedIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ERC20 interface that includes burn and mint methods.\\n */\\nabstract contract ExpandedIERC20 is IERC20 {\\n    /**\\n     * @notice Burns a specific amount of the caller's tokens.\\n     * @dev Only burns the caller's tokens, so it is safe to leave this method permissionless.\\n     */\\n    function burn(uint256 value) external virtual;\\n\\n    /**\\n     * @dev Burns `value` tokens owned by `recipient`.\\n     * @param recipient address to burn tokens from.\\n     * @param value amount of tokens to burn.\\n     */\\n    function burnFrom(address recipient, uint256 value)\\n        external\\n        virtual\\n        returns (bool);\\n\\n    /**\\n     * @notice Mints tokens and adds them to the balance of the `to` address.\\n     * @dev This method should be permissioned to only allow designated parties to mint tokens.\\n     */\\n    function mint(address to, uint256 value) external virtual returns (bool);\\n\\n    function addMinter(address account) external virtual;\\n\\n    function addBurner(address account) external virtual;\\n\\n    function resetOwner(address account) external virtual;\\n}\\n\",\"keccak256\":\"0xcbb9d2ddd811e037240a3dde2ff25390f31151ac18f2042959523670276c61e6\",\"license\":\"MIT\"},\"contracts/UMA/common/interfaces/IERC20Standard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ERC20 interface that includes the decimals read only method.\\n */\\ninterface IERC20Standard is IERC20 {\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05`\\n     * (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value\\n     * {ERC20} uses, unless {_setupDecimals} is called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic\\n     * of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd4006ff9790e0a4e62b9d88d84d7167f99db44066d738e7bc531b7ad3ec58fcb\",\"license\":\"MIT\"},\"contracts/UMA/financial-templates/common/financial-product-libraries/expiring-multiparty-libraries/FinancialProductLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../../../../common/implementation/FixedPoint.sol\\\";\\n\\ninterface ExpiringContractInterface {\\n    function expirationTimestamp() external view returns (uint256);\\n}\\n\\n/**\\n * @title Financial product library contract\\n * @notice Provides price and collateral requirement transformation interfaces that can be overridden by custom\\n * Financial product library implementations.\\n */\\nabstract contract FinancialProductLibrary {\\n    using FixedPoint for FixedPoint.Unsigned;\\n\\n    /**\\n     * @notice Transforms a given oracle price using the financial product libraries transformation logic.\\n     * @param oraclePrice input price returned by the DVM to be transformed.\\n     * @return transformedOraclePrice input oraclePrice with the transformation function applied.\\n     */\\n    function transformPrice(FixedPoint.Unsigned memory oraclePrice, uint256)\\n        public\\n        view\\n        virtual\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        return oraclePrice;\\n    }\\n\\n    /**\\n     * @notice Transforms a given collateral requirement using the financial product libraries transformation logic.\\n     * @param collateralRequirement input collateral requirement to be transformed.\\n     * @return transformedCollateralRequirement input collateral requirement with the transformation function applied.\\n     */\\n    function transformCollateralRequirement(\\n        FixedPoint.Unsigned memory,\\n        FixedPoint.Unsigned memory collateralRequirement\\n    ) public view virtual returns (FixedPoint.Unsigned memory) {\\n        return collateralRequirement;\\n    }\\n\\n    /**\\n     * @notice Transforms a given price identifier using the financial product libraries transformation logic.\\n     * @param priceIdentifier input price identifier defined for the financial contract.\\n     * @return transformedPriceIdentifier input price identifier with the transformation function applied.\\n     */\\n    function transformPriceIdentifier(bytes32 priceIdentifier, uint256)\\n        public\\n        view\\n        virtual\\n        returns (bytes32)\\n    {\\n        return priceIdentifier;\\n    }\\n}\\n\",\"keccak256\":\"0xff9f77f2005cb07c99ad75bc88bfb8baae81c285d1e486e2bdc11052bc6a4cdd\",\"license\":\"MIT\"},\"contracts/UMA/financial-templates/expiring-multiparty/ExpiringMultiParty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Liquidatable.sol\\\";\\n\\n/**\\n * @title Expiring Multi Party.\\n * @notice Convenient wrapper for Liquidatable.\\n */\\ncontract ExpiringMultiParty is Liquidatable {\\n    /**\\n     * @notice Constructs the ExpiringMultiParty contract.\\n     * @param params struct to define input parameters for construction of Liquidatable. Some params\\n     * are fed directly into the PricelessPositionManager's constructor within the inheritance tree.\\n     */\\n    constructor(ConstructorParams memory params)\\n        Liquidatable(params)\\n    // Note: since there is no logic here, there is no need to add a re-entrancy guard.\\n    {\\n\\n    }\\n}\\n\",\"keccak256\":\"0x5c0b655eaf9beb5d731d67fd306d7bbf3c3193fddb195a2b6ba1b66f087cee37\",\"license\":\"MIT\"},\"contracts/UMA/financial-templates/expiring-multiparty/ExpiringMultiPartyLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ExpiringMultiParty.sol\\\";\\n\\n/**\\n * @title Provides convenient Expiring Multi Party contract utilities.\\n * @dev Using this library to deploy EMP's allows calling contracts to avoid importing the full EMP bytecode.\\n */\\nlibrary ExpiringMultiPartyLib {\\n    /**\\n     * @notice Returns address of new EMP deployed with given `params` configuration.\\n     * @dev Caller will need to register new EMP with the Registry to begin requesting prices. Caller is also\\n     * responsible for enforcing constraints on `params`.\\n     * @param params is a `ConstructorParams` object from ExpiringMultiParty.\\n     * @return address of the deployed ExpiringMultiParty contract\\n     */\\n    function deploy(ExpiringMultiParty.ConstructorParams memory params)\\n        public\\n        returns (address)\\n    {\\n        ExpiringMultiParty derivative = new ExpiringMultiParty(params);\\n        return address(derivative);\\n    }\\n}\\n\",\"keccak256\":\"0xdfe91778407dcb82307a061eba935f8525460675307e48959a499ed634f2b8aa\",\"license\":\"MIT\"},\"contracts/UMA/financial-templates/expiring-multiparty/Liquidatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./PricelessPositionManager.sol\\\";\\n\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\n\\n/**\\n * @title Liquidatable\\n * @notice Adds logic to a position-managing contract that enables callers to liquidate an undercollateralized position.\\n * @dev The liquidation has a liveness period before expiring successfully, during which someone can \\\"dispute\\\" the\\n * liquidation, which sends a price request to the relevant Oracle to settle the final collateralization ratio based on\\n * a DVM price. The contract enforces dispute rewards in order to incentivize disputers to correctly dispute false\\n * liquidations and compensate position sponsors who had their position incorrectly liquidated. Importantly, a\\n * prospective disputer must deposit a dispute bond that they can lose in the case of an unsuccessful dispute.\\n * NOTE: this contract does _not_ work with ERC777 collateral currencies or any others that call into the receiver on\\n * transfer(). Using an ERC777 token would allow a user to maliciously grief other participants (while also losing\\n * money themselves).\\n */\\ncontract Liquidatable is PricelessPositionManager {\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for ExpandedIERC20;\\n    using Address for address;\\n\\n    /****************************************\\n     *     LIQUIDATION DATA STRUCTURES      *\\n     ****************************************/\\n\\n    // Because of the check in withdrawable(), the order of these enum values should not change.\\n    enum Status {\\n        Uninitialized,\\n        NotDisputed,\\n        Disputed,\\n        DisputeSucceeded,\\n        DisputeFailed\\n    }\\n\\n    struct LiquidationData {\\n        address sponsor; // Address of the liquidated position's sponsor\\n        address liquidator; // Address who created this liquidation\\n        Status state; // Liquidated (and expired or not), Pending a Dispute, or Dispute has resolved\\n        uint256 liquidationTime; // Time when liquidation is initiated, needed to get price from Oracle\\n        // Following variables determined by the position that is being liquidated:\\n        FixedPoint.Unsigned tokensOutstanding; // Synthetic tokens required to be burned by liquidator to initiate dispute\\n        FixedPoint.Unsigned lockedCollateral; // Collateral locked by contract and released upon expiry or post-dispute\\n        // Amount of collateral locked in the liquidation if all pending slow withdrawals went through.\\n        // This value is used during disputes instead of lockedCollateral, so insolvent withdrawals can be punished.\\n        FixedPoint.Unsigned lockedCollateralAfterWithdrawals;\\n\\n        // Following variables set upon initiation of a dispute:\\n        address disputer; // Person who is disputing a liquidation\\n        // Following variable set upon a resolution of a dispute:\\n        FixedPoint.Unsigned settlementPrice; // Final price as determined by an Oracle following a dispute\\n    }\\n\\n    // Define the contract's constructor parameters as a struct to enable more variables to be specified.\\n    // This is required to enable more params, over and above Solidity's limits.\\n    struct ConstructorParams {\\n        // Params for PricelessPositionManager only.\\n        uint256 expirationTimestamp;\\n        uint256 withdrawalLiveness;\\n        address collateralAddress;\\n        address tokenAddress;\\n        address finderAddress;\\n        address timerAddress;\\n        address financialProductLibraryAddress;\\n        bytes32 priceFeedIdentifier;\\n        bytes ancillaryData;\\n        FixedPoint.Unsigned minSponsorTokens;\\n        FixedPoint.Unsigned ooReward;\\n        // Params specifically for Liquidatable.\\n        uint256 liquidationLiveness;\\n        FixedPoint.Unsigned collateralRequirement;\\n        FixedPoint.Unsigned disputeBondPercentage;\\n        FixedPoint.Unsigned sponsorDisputeRewardPercentage;\\n        FixedPoint.Unsigned disputerDisputeRewardPercentage;\\n    }\\n\\n    // This struct is used in the `withdrawLiquidation` method that disperses liquidation and dispute rewards.\\n    struct RewardsData {\\n        FixedPoint.Unsigned payToSponsor;\\n        FixedPoint.Unsigned payToLiquidator;\\n        FixedPoint.Unsigned payToDisputer;\\n    }\\n\\n    // Liquidations are unique by ID per sponsor\\n    mapping(address => LiquidationData[]) public liquidations;\\n\\n    // Total collateral in liquidation.\\n    FixedPoint.Unsigned public liquidationCollateral;\\n\\n    // Immutable contract parameters:\\n\\n    // Amount of time for pending liquidation before expiry.\\n    // !!Note: The lower the liquidation liveness value, the more risk incurred by sponsors.\\n    //       Extremely low liveness values increase the chance that opportunistic invalid liquidations\\n    //       expire without dispute, thereby decreasing the usability for sponsors and increasing the risk\\n    //       for the contract as a whole. An insolvent contract is extremely risky for any sponsor or synthetic\\n    //       token holder for the contract.\\n    uint256 public liquidationLiveness;\\n    // Required collateral:TRV ratio for a position to be considered sufficiently collateralized.\\n    FixedPoint.Unsigned public collateralRequirement;\\n    // Percent of a Liquidation/Position's lockedCollateral to be deposited by a potential disputer\\n    // Represented as a multiplier, for example 1.5e18 = \\\"150%\\\" and 0.05e18 = \\\"5%\\\"\\n    FixedPoint.Unsigned public disputeBondPercentage;\\n    // Percent of liquidated collateral paid to sponsor in the Disputed state (i.e. following a successful dispute)\\n    // Represented as a multiplier, see above.\\n    FixedPoint.Unsigned public sponsorDisputeRewardPercentage;\\n    // Percent of liquidated collateral paid to disputer in the Disputed state (i.e. following a successful dispute)\\n    // Represented as a multiplier, see above.\\n    FixedPoint.Unsigned public disputerDisputeRewardPercentage;\\n\\n    /****************************************\\n     *                EVENTS                *\\n     ****************************************/\\n\\n    event LiquidationCreated(\\n        address indexed sponsor,\\n        address indexed liquidator,\\n        uint256 indexed liquidationId,\\n        uint256 tokensOutstanding,\\n        uint256 lockedCollateral,\\n        uint256 lockedCollateralAfterWithdrawals,\\n        uint256 liquidationTime\\n    );\\n    event LiquidationDisputed(\\n        address indexed sponsor,\\n        address indexed liquidator,\\n        address indexed disputer,\\n        uint256 liquidationId,\\n        uint256 disputeBondAmount\\n    );\\n    event DisputeSettled(\\n        address indexed caller,\\n        address indexed sponsor,\\n        address indexed liquidator,\\n        address disputer,\\n        uint256 liquidationId,\\n        bool disputeSucceeded\\n    );\\n    event LiquidationWithdrawn(\\n        address indexed caller,\\n        uint256 paidToLiquidator,\\n        uint256 paidToDisputer,\\n        uint256 paidToSponsor,\\n        Status indexed liquidationStatus,\\n        uint256 settlementPrice\\n    );\\n\\n    /****************************************\\n     *              MODIFIERS               *\\n     ****************************************/\\n\\n    modifier disputable(uint256 liquidationId, address sponsor) {\\n        _disputable(liquidationId, sponsor);\\n        _;\\n    }\\n\\n    modifier withdrawable(uint256 liquidationId, address sponsor) {\\n        _withdrawable(liquidationId, sponsor);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructs the liquidatable contract.\\n     * @param params struct to define input parameters for construction of Liquidatable. Some params\\n     * are fed directly into the PricelessPositionManager's constructor within the inheritance tree.\\n     */\\n    constructor(ConstructorParams memory params)\\n        PricelessPositionManager(\\n            params.expirationTimestamp,\\n            params.withdrawalLiveness,\\n            params.collateralAddress,\\n            params.tokenAddress,\\n            params.finderAddress,\\n            params.priceFeedIdentifier,\\n            params.minSponsorTokens,\\n            params.ooReward,\\n            params.timerAddress,\\n            params.financialProductLibraryAddress,\\n            params.ancillaryData\\n        )\\n        nonReentrant()\\n    {\\n        require(params.collateralRequirement.isGreaterThan(1));\\n        require(\\n            params.sponsorDisputeRewardPercentage\\n                .add(params.disputerDisputeRewardPercentage)\\n                .isLessThan(1)\\n        );\\n\\n        // Set liquidatable specific variables.\\n        liquidationLiveness = params.liquidationLiveness;\\n        collateralRequirement = params.collateralRequirement;\\n        disputeBondPercentage = params.disputeBondPercentage;\\n        sponsorDisputeRewardPercentage = params.sponsorDisputeRewardPercentage;\\n        disputerDisputeRewardPercentage = params.disputerDisputeRewardPercentage;\\n    }\\n\\n    /****************************************\\n     *        LIQUIDATION FUNCTIONS         *\\n     ****************************************/\\n\\n    /**\\n     * @notice Liquidates the sponsor's position if the caller has enough\\n     * synthetic tokens to retire the position's outstanding tokens. Liquidations above\\n     * a minimum size also reset an ongoing \\\"slow withdrawal\\\"'s liveness.\\n     * @dev This method generates an ID that will uniquely identify liquidation for the sponsor. This contract must be\\n     * approved to spend at least `tokensLiquidated` of `tokenCurrency` and at least `finalFeeBond` of `collateralCurrency`.\\n     * @dev This contract must have the Burner role for the `tokenCurrency`.\\n     * @param sponsor address of the sponsor to liquidate.\\n     * @param minCollateralPerToken abort the liquidation if the position's collateral per token is below this value.\\n     * @param maxCollateralPerToken abort the liquidation if the position's collateral per token exceeds this value.\\n     * @param maxTokensToLiquidate max number of tokens to liquidate.\\n     * @param deadline abort the liquidation if the transaction is mined after this timestamp.\\n     * @return liquidationId ID of the newly created liquidation.\\n     * @return tokensLiquidated amount of synthetic tokens removed and liquidated from the `sponsor`'s position.\\n     */\\n    function createLiquidation(\\n        address sponsor,\\n        FixedPoint.Unsigned calldata minCollateralPerToken,\\n        FixedPoint.Unsigned calldata maxCollateralPerToken,\\n        FixedPoint.Unsigned calldata maxTokensToLiquidate,\\n        uint256 deadline\\n    )\\n        external\\n        onlyPreExpiration\\n        nonReentrant\\n        returns (\\n            uint256 liquidationId,\\n            FixedPoint.Unsigned memory tokensLiquidated\\n        )\\n    {\\n        // Check that this transaction was mined pre-deadline.\\n        require(getCurrentTime() <= deadline, \\\"Mined after deadline\\\");\\n\\n        // Retrieve Position data for sponsor\\n        PositionData storage positionToLiquidate = _getPositionData(sponsor);\\n\\n        tokensLiquidated = FixedPoint.min(\\n            maxTokensToLiquidate,\\n            positionToLiquidate.tokensOutstanding\\n        );\\n        require(tokensLiquidated.isGreaterThan(0));\\n\\n        // Starting values for the Position being liquidated. If withdrawal request amount is > position's collateral,\\n        // then set this to 0, otherwise set it to (startCollateral - withdrawal request amount).\\n        FixedPoint.Unsigned memory startCollateral = positionToLiquidate.collateral;\\n        FixedPoint.Unsigned memory startCollateralNetOfWithdrawal = FixedPoint.fromUnscaledUint(0);\\n        if (positionToLiquidate.withdrawalRequestAmount.isLessThanOrEqual(startCollateral)) {\\n            startCollateralNetOfWithdrawal = startCollateral.sub(positionToLiquidate.withdrawalRequestAmount);\\n        }\\n\\n        // Scoping to get rid of a stack too deep error.\\n        {\\n            FixedPoint.Unsigned memory startTokens = positionToLiquidate.tokensOutstanding;\\n\\n            // The Position's collateralization ratio must be between [minCollateralPerToken, maxCollateralPerToken].\\n            // maxCollateralPerToken >= startCollateralNetOfWithdrawal / startTokens.\\n            require(\\n                maxCollateralPerToken.mul(startTokens).isGreaterThanOrEqual(startCollateralNetOfWithdrawal),\\n                \\\"CR is more than max liq. price\\\"\\n            );\\n            // minCollateralPerToken <= startCollateralNetOfWithdrawal / startTokens.\\n            require(\\n                minCollateralPerToken.mul(startTokens).isLessThanOrEqual(startCollateralNetOfWithdrawal),\\n                \\\"CR is less than min liq. price\\\"\\n            );\\n        }\\n\\n        // These will be populated within the scope below.\\n        FixedPoint.Unsigned memory lockedCollateral;\\n        FixedPoint.Unsigned memory lockedCollateralAfterWithdrawals;\\n\\n        // Scoping to get rid of a stack too deep error.\\n        {\\n            FixedPoint.Unsigned memory ratio = tokensLiquidated.div(positionToLiquidate.tokensOutstanding);\\n\\n            // The actual amount of collateral that gets moved to the liquidation.\\n            lockedCollateral = startCollateral.mul(ratio);\\n\\n            // For purposes of disputes, it's actually this lockedCollateralAfterWithdrawals value that's used.\\n            lockedCollateralAfterWithdrawals = startCollateralNetOfWithdrawal.mul(ratio);\\n\\n            // Part of the withdrawal request is also removed. Ideally:\\n            // lockedCollateralAfterWithdrawals + withdrawalAmountToRemove = lockedCollateral.\\n            FixedPoint.Unsigned memory withdrawalAmountToRemove = positionToLiquidate.withdrawalRequestAmount.mul(ratio);\\n\\n            _reduceSponsorPosition(\\n                sponsor,\\n                tokensLiquidated,\\n                lockedCollateral,\\n                withdrawalAmountToRemove\\n            );\\n        }\\n\\n        // Add to the global liquidation collateral count.\\n        liquidationCollateral = liquidationCollateral.add(lockedCollateral).add(ooReward);\\n\\n        // Construct liquidation object.\\n        // Note: All dispute-related values are zeroed out until a dispute occurs. liquidationId is the index of the new\\n        // LiquidationData that is pushed into the array, which is equal to the current length of the array pre-push.\\n        liquidationId = liquidations[sponsor].length;\\n        liquidations[sponsor].push(\\n            LiquidationData({\\n                sponsor: sponsor,\\n                liquidator: msg.sender,\\n                state: Status.NotDisputed,\\n                liquidationTime: getCurrentTime(),\\n                tokensOutstanding: tokensLiquidated,\\n                lockedCollateral: lockedCollateral,\\n                lockedCollateralAfterWithdrawals: lockedCollateralAfterWithdrawals,\\n                disputer: address(0),\\n                settlementPrice: FixedPoint.fromUnscaledUint(0)\\n            })\\n        );\\n\\n        // If this liquidation is a subsequent liquidation on the position, and the liquidation size is larger than\\n        // some \\\"griefing threshold\\\", then re-set the liveness. This enables a liquidation against a withdraw request to be\\n        // \\\"dragged out\\\" if the position is very large and liquidators need time to gather funds. The griefing threshold\\n        // is enforced so that liquidations for trivially small # of tokens cannot drag out an honest sponsor's slow withdrawal.\\n\\n        // We arbitrarily set the \\\"griefing threshold\\\" to `minSponsorTokens` because it is the only parameter\\n        // denominated in token currency units and we can avoid adding another parameter.\\n        FixedPoint.Unsigned memory griefingThreshold = minSponsorTokens;\\n        if (\\n            positionToLiquidate.withdrawalRequestPassTimestamp > 0 && // The position is undergoing a slow withdrawal.\\n            positionToLiquidate.withdrawalRequestPassTimestamp > getCurrentTime() && // The slow withdrawal has not yet expired.\\n            tokensLiquidated.isGreaterThanOrEqual(griefingThreshold) // The liquidated token count is above a \\\"griefing threshold\\\".\\n        ) {\\n            positionToLiquidate.withdrawalRequestPassTimestamp = getCurrentTime().add(withdrawalLiveness);\\n        }\\n\\n        emit LiquidationCreated(\\n            sponsor,\\n            msg.sender,\\n            liquidationId,\\n            tokensLiquidated.rawValue,\\n            lockedCollateral.rawValue,\\n            lockedCollateralAfterWithdrawals.rawValue,\\n            getCurrentTime()\\n        );\\n\\n        // Destroy tokens\\n        tokenCurrency.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            tokensLiquidated.rawValue\\n        );\\n        tokenCurrency.burn(tokensLiquidated.rawValue);\\n\\n        // Pull ooReward from liquidator.\\n        collateralCurrency.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            ooReward.rawValue\\n        );\\n    }\\n\\n    /**\\n     * @notice Disputes a liquidation, if the caller has enough collateral to post a dispute bond\\n     * and pay a fixed ooReward charged on each price request.\\n     * @dev Can only dispute a liquidation before the liquidation expires and if there are no other pending disputes.\\n     * This contract must be approved to spend at least the dispute bond amount of `collateralCurrency`. This dispute\\n     * bond amount is calculated from `disputeBondPercentage` times the collateral in the liquidation.\\n     * @param liquidationId of the disputed liquidation.\\n     * @param sponsor the address of the sponsor whose liquidation is being disputed.\\n     * @return totalPaid amount of collateral charged to disputer (i.e. ooReward bond + dispute bond).\\n     */\\n    function dispute(uint256 liquidationId, address sponsor)\\n        external\\n        disputable(liquidationId, sponsor)\\n        nonReentrant\\n        returns (FixedPoint.Unsigned memory totalPaid)\\n    {\\n        LiquidationData storage disputedLiquidation = _getLiquidationData(\\n            sponsor,\\n            liquidationId\\n        );\\n\\n        // Multiply by the unit collateral so the dispute bond is a percentage of the locked collateral after fees.\\n        FixedPoint.Unsigned memory disputeBondAmount = disputedLiquidation.lockedCollateral.mul(disputeBondPercentage);\\n        liquidationCollateral = liquidationCollateral.add(disputeBondAmount);\\n\\n        // Request a price from Optimistic Oracle. Liquidation is pending dispute until OO returns a price.\\n        disputedLiquidation.state = Status.Disputed;\\n        disputedLiquidation.disputer = msg.sender;\\n\\n        // Enqueue a request with the Optimistic Oracle.\\n        _requestOraclePrice_senderPays(disputedLiquidation.liquidationTime);\\n\\n        emit LiquidationDisputed(\\n            sponsor,\\n            disputedLiquidation.liquidator,\\n            msg.sender,\\n            liquidationId,\\n            disputeBondAmount.rawValue\\n        );\\n        totalPaid = disputeBondAmount.add(ooReward);\\n\\n        // Transfer the dispute bond amount from the caller to this contract.\\n        collateralCurrency.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            disputeBondAmount.rawValue\\n        );\\n    }\\n\\n    /**\\n     * @notice After a dispute has settled or after a non-disputed liquidation has expired,\\n     * anyone can call this method to disperse payments to the sponsor, liquidator, and disdputer.\\n     * @dev If the dispute SUCCEEDED: the sponsor, liquidator, and disputer are eligible for payment.\\n     * If the dispute FAILED: only the liquidator can receive payment.\\n     * This method will revert if rewards have already been dispersed.\\n     * @param liquidationId uniquely identifies the sponsor's liquidation.\\n     * @param sponsor address of the sponsor associated with the liquidation.\\n     * @return data about rewards paid out.\\n     */\\n    function withdrawLiquidation(uint256 liquidationId, address sponsor)\\n        public\\n        withdrawable(liquidationId, sponsor)\\n        nonReentrant\\n        returns (RewardsData memory)\\n    {\\n        LiquidationData storage liquidation = _getLiquidationData(\\n            sponsor,\\n            liquidationId\\n        );\\n\\n        // Settles the liquidation if necessary. This call will revert if the price has not resolved yet.\\n        _settle(liquidationId, sponsor);\\n\\n        // Calculate rewards as a function of the TRV.\\n        FixedPoint.Unsigned memory tokenRedemptionValue = liquidation.tokensOutstanding\\n            .mul(liquidation.settlementPrice);\\n        FixedPoint.Unsigned memory disputerDisputeReward = disputerDisputeRewardPercentage\\n            .mul(tokenRedemptionValue);\\n        FixedPoint.Unsigned memory sponsorDisputeReward = sponsorDisputeRewardPercentage\\n            .mul(tokenRedemptionValue);\\n        FixedPoint.Unsigned memory disputeBondAmount = liquidation.lockedCollateral\\n            .mul(disputeBondPercentage);\\n\\n        // There are three main outcome states: either the dispute succeeded, failed or was not updated.\\n        // Based on the state, different parties of a liquidation receive different amounts.\\n        // After assigning rewards based on the liquidation status, decrease the total collateral held in this contract\\n        // by the amount to pay each party. The actual amounts withdrawn might differ if _removeCollateral causes\\n        // precision loss.\\n        RewardsData memory rewards;\\n        if (liquidation.state == Status.DisputeSucceeded) {\\n            // If the dispute is successful then all three users should receive rewards:\\n\\n            // Pay DISPUTER: disputer reward + dispute bond + returned ooReward\\n            rewards.payToDisputer = disputerDisputeReward\\n                .add(disputeBondAmount)\\n                .add(ooReward);\\n\\n            // Pay SPONSOR: remaining collateral (collateral - TRV) + sponsor reward\\n            rewards.payToSponsor = liquidation.lockedCollateral.sub(tokenRedemptionValue)\\n                .add(sponsorDisputeReward);\\n\\n            // Pay LIQUIDATOR: TRV - dispute reward - sponsor reward\\n            // If TRV > Collateral, then subtract rewards from collateral\\n            // NOTE: `payToLiquidator` should never be below zero since we enforce that\\n            // (sponsorDisputePct+disputerDisputePct) <= 1 in the constructor when these params are set.\\n            rewards.payToLiquidator = tokenRedemptionValue\\n                .sub(sponsorDisputeReward)\\n                .sub(disputerDisputeReward);\\n\\n            // Transfer rewards and debit collateral\\n            liquidationCollateral = liquidationCollateral.sub(rewards.payToLiquidator);\\n            liquidationCollateral = liquidationCollateral.sub(rewards.payToSponsor);\\n            liquidationCollateral = liquidationCollateral.sub(rewards.payToDisputer);\\n\\n            collateralCurrency.safeTransfer(\\n                liquidation.disputer,\\n                rewards.payToDisputer.rawValue\\n            );\\n            collateralCurrency.safeTransfer(\\n                liquidation.liquidator,\\n                rewards.payToLiquidator.rawValue\\n            );\\n            collateralCurrency.safeTransfer(\\n                liquidation.sponsor,\\n                rewards.payToSponsor.rawValue\\n            );\\n\\n        } else if (liquidation.state == Status.DisputeFailed) {\\n            // In the case of a failed dispute only the liquidator can withdraw.\\n\\n            // Pay LIQUIDATOR: collateral + dispute bond + returned ooReward\\n            rewards.payToLiquidator = liquidation.lockedCollateral.add(disputeBondAmount).add(ooReward);\\n\\n            // Transfer rewards and debit collateral\\n            liquidationCollateral = liquidationCollateral.sub(rewards.payToLiquidator);\\n\\n            collateralCurrency.safeTransfer(\\n                liquidation.liquidator,\\n                rewards.payToLiquidator.rawValue\\n            );\\n\\n        } else if (liquidation.state == Status.NotDisputed) {\\n            // If the state is pre-dispute but time has passed liveness then there was no dispute. We represent this\\n            // state as a dispute failed and the liquidator can withdraw.\\n\\n            // Pay LIQUIDATOR: collateral + returned ooReward\\n            rewards.payToLiquidator = liquidation.lockedCollateral.add(ooReward);\\n\\n            // Transfer rewards and debit collateral\\n            liquidationCollateral = liquidationCollateral.sub(rewards.payToLiquidator);\\n\\n            collateralCurrency.safeTransfer(\\n                liquidation.liquidator,\\n                rewards.payToLiquidator.rawValue\\n            );\\n        }\\n\\n        emit LiquidationWithdrawn(\\n            msg.sender,\\n            rewards.payToLiquidator.rawValue,\\n            rewards.payToDisputer.rawValue,\\n            rewards.payToSponsor.rawValue,\\n            liquidation.state,\\n            liquidation.settlementPrice.rawValue\\n        );\\n\\n        // Free up space after collateral is withdrawn by removing the liquidation object from the array.\\n        delete liquidations[sponsor][liquidationId];\\n\\n        return rewards;\\n    }\\n\\n    /**\\n     * @notice Gets all liquidation information for a given sponsor address.\\n     * @param sponsor address of the position sponsor.\\n     * @return liquidationData array of all liquidation information for the given sponsor address.\\n     */\\n    function getLiquidations(address sponsor)\\n        external\\n        view\\n        nonReentrantView\\n        returns (LiquidationData[] memory liquidationData)\\n    {\\n        return liquidations[sponsor];\\n    }\\n\\n    /**\\n     * @notice Accessor method to calculate a transformed collateral requirement using the finanical product library\\n      specified during contract deployment. If no library was provided then no modification to the collateral requirement is done.\\n     * @param price input price used as an input to transform the collateral requirement.\\n     * @return transformedCollateralRequirement collateral requirement with transformation applied to it.\\n     * @dev This method should never revert.\\n     */\\n    function transformCollateralRequirement(FixedPoint.Unsigned memory price)\\n        public\\n        view\\n        nonReentrantView\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        return _transformCollateralRequirement(price);\\n    }\\n\\n    /****************************************\\n     *          INTERNAL FUNCTIONS          *\\n     ****************************************/\\n\\n    // This settles a liquidation if it is in the Disputed state. If not, it will immediately return.\\n    // If the liquidation is in the Disputed state, but a price is not available, this will revert.\\n    function _settle(uint256 liquidationId, address sponsor) internal {\\n        LiquidationData storage liquidation = _getLiquidationData(\\n            sponsor,\\n            liquidationId\\n        );\\n\\n        // Settlement only happens when state == Disputed and will only happen once per liquidation.\\n        // If this liquidation is not ready to be settled, this method should return immediately.\\n        if (liquidation.state != Status.Disputed) {\\n            return;\\n        }\\n\\n        // Get the returned price from the oracle. If this has not yet resolved will revert.\\n        liquidation.settlementPrice = _getOraclePrice(liquidation.liquidationTime);\\n\\n        // Find the value of the tokens in the underlying collateral.\\n        FixedPoint.Unsigned memory tokenRedemptionValue = liquidation.tokensOutstanding\\n            .mul(liquidation.settlementPrice);\\n\\n        // The required collateral is the value of the tokens in underlying * required collateral ratio. The Transform\\n        // Collateral requirement method applies a from the financial Product library to change the scaled the collateral\\n        // requirement based on the settlement price. If no library was specified when deploying the emp then this makes no change.\\n        FixedPoint.Unsigned memory requiredCollateral = tokenRedemptionValue\\n            .mul(_transformCollateralRequirement(liquidation.settlementPrice));\\n\\n        // If the position has more than the required collateral it is solvent and the dispute is valid(liquidation is invalid)\\n        // Note that this check uses the lockedCollateralAfterWithdrawals not the lockedCollateral as this considers withdrawals.\\n        bool disputeSucceeded = liquidation.lockedCollateralAfterWithdrawals.isGreaterThanOrEqual(requiredCollateral);\\n        \\n        liquidation.state = disputeSucceeded\\n            ? Status.DisputeSucceeded\\n            : Status.DisputeFailed;\\n\\n        emit DisputeSettled(\\n            msg.sender,\\n            sponsor,\\n            liquidation.liquidator,\\n            liquidation.disputer,\\n            liquidationId,\\n            disputeSucceeded\\n        );\\n    }\\n\\n    function _getLiquidationData(address sponsor, uint256 liquidationId)\\n        internal\\n        view\\n        returns (LiquidationData storage liquidation)\\n    {\\n        LiquidationData[] storage liquidationArray = liquidations[sponsor];\\n\\n        // Revert if the caller is attempting to access an invalid liquidation\\n        // (one that has never been created or one has never been initialized).\\n        require(\\n            liquidationId < liquidationArray.length &&\\n                liquidationArray[liquidationId].state != Status.Uninitialized,\\n            \\\"Invalid liquidation ID\\\"\\n        );\\n        return liquidationArray[liquidationId];\\n    }\\n\\n    function _getLiquidationExpiry(LiquidationData storage liquidation)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return liquidation.liquidationTime.add(liquidationLiveness);\\n    }\\n\\n    // These internal functions are supposed to act identically to modifiers, but re-used modifiers\\n    // unnecessarily increase contract bytecode size.\\n    // source: https://blog.polymath.network/solidity-tips-and-tricks-to-save-gas-and-reduce-bytecode-size-c44580b218e6\\n    function _disputable(uint256 liquidationId, address sponsor) internal view {\\n        LiquidationData storage liquidation = _getLiquidationData(\\n            sponsor,\\n            liquidationId\\n        );\\n        require(\\n            (getCurrentTime() < _getLiquidationExpiry(liquidation)) &&\\n                (liquidation.state == Status.NotDisputed),\\n            \\\"Liquidation not disputable\\\"\\n        );\\n    }\\n\\n    function _withdrawable(uint256 liquidationId, address sponsor)\\n        internal\\n        view\\n    {\\n        LiquidationData storage liquidation = _getLiquidationData(\\n            sponsor,\\n            liquidationId\\n        );\\n        Status state = liquidation.state;\\n\\n        // Must be disputed or the liquidation has passed expiry.\\n        require(\\n            (state > Status.NotDisputed) ||\\n                ((_getLiquidationExpiry(liquidation) <= getCurrentTime()) &&\\n                    (state == Status.NotDisputed)),\\n            \\\"Liquidation not withdrawable\\\"\\n        );\\n    }\\n\\n    function _transformCollateralRequirement(FixedPoint.Unsigned memory price)\\n        internal\\n        view\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        if (!address(financialProductLibrary).isContract())\\n            return collateralRequirement;\\n        try\\n            financialProductLibrary.transformCollateralRequirement(\\n                price,\\n                collateralRequirement\\n            )\\n        returns (FixedPoint.Unsigned memory transformedCollateralRequirement) {\\n            return transformedCollateralRequirement;\\n        } catch {\\n            return collateralRequirement;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x571faf9190cc89ba292d9bda2067aa959eb3b6984d91f284354108dc6d61a186\",\"license\":\"MIT\"},\"contracts/UMA/financial-templates/expiring-multiparty/PricelessPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\nimport \\\"../../common/interfaces/ExpandedIERC20.sol\\\";\\nimport \\\"../../common/interfaces/IERC20Standard.sol\\\";\\n\\nimport \\\"../../oracle/interfaces/OptimisticOracleInterface.sol\\\";\\nimport \\\"../../oracle/interfaces/IdentifierWhitelistInterface.sol\\\";\\n\\nimport \\\"../../oracle/implementation/Constants.sol\\\";\\nimport \\\"../../common/implementation/Testable.sol\\\";\\nimport \\\"../../common/implementation/Lockable.sol\\\";\\n\\nimport \\\"../common/financial-product-libraries/expiring-multiparty-libraries/FinancialProductLibrary.sol\\\";\\n\\n/**\\n * @title Financial contract with priceless position management.\\n * @notice Handles positions for multiple sponsors in an optimistic (i.e., priceless) way without relying\\n * on a price feed. On construction, deploys a new ERC20, managed by this contract, that is the synthetic token.\\n */\\n\\ncontract PricelessPositionManager is Testable, Lockable {\\n    using SafeMath for uint256;\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for ExpandedIERC20;\\n    using Address for address;\\n\\n    /****************************************\\n     *  PRICELESS POSITION DATA STRUCTURES  *\\n     ****************************************/\\n\\n    // Stores the state of the PricelessPositionManager. Set on expiration, emergency shutdown, or settlement.\\n    enum ContractState {\\n        Open,\\n        ExpiredPriceRequested,\\n        ExpiredPriceReceived\\n    }\\n    ContractState public contractState;\\n\\n    // Represents a single sponsor's position. All collateral is held by this contract.\\n    // This struct acts as bookkeeping for how much of that collateral is allocated to each sponsor.\\n    struct PositionData {\\n        FixedPoint.Unsigned tokensOutstanding;\\n        // Tracks pending withdrawal requests. A withdrawal request is pending if `withdrawalRequestPassTimestamp != 0`.\\n        uint256 withdrawalRequestPassTimestamp;\\n        FixedPoint.Unsigned withdrawalRequestAmount;\\n        // Collateral value.\\n        FixedPoint.Unsigned collateral;\\n        // Tracks pending transfer position requests. A transfer position request is pending if `transferPositionRequestPassTimestamp != 0`.\\n        uint256 transferPositionRequestPassTimestamp;\\n    }\\n\\n    // Maps sponsor addresses to their positions. Each sponsor can have only one position.\\n    mapping(address => PositionData) public positions;\\n\\n    // Keep track of the total collateral and tokens across all positions to enable calculating the\\n    // global collateralization ratio without iterating over all positions.\\n    FixedPoint.Unsigned public totalTokensOutstanding;\\n\\n    // Total position collateral.\\n    FixedPoint.Unsigned public totalPositionCollateral;\\n\\n    // Synthetic token created by this contract.\\n    ExpandedIERC20 public tokenCurrency;\\n\\n    // The collateral currency used to back the positions in this contract.\\n    IERC20 public collateralCurrency;\\n\\n    // Finder contract used to look up addresses for UMA system contracts.\\n    FinderInterface public finder;\\n\\n    // Unique identifier for DVM price feed ticker.\\n    bytes32 public priceIdentifier;\\n    // Ancillary data to pass to the Optimistic Oracle system when requesting and fetching prices\\n    bytes public ancillaryData;\\n\\n    // Time that this contract expires. Should not change post-construction unless an emergency shutdown occurs.\\n    uint256 public expirationTimestamp;\\n    // Time that has to elapse for a withdrawal request to be considered passed, if no liquidations occur.\\n    // !!Note: The lower the withdrawal liveness value, the more risk incurred by the contract.\\n    //       Extremely low liveness values increase the chance that opportunistic invalid withdrawal requests\\n    //       expire without liquidation, thereby increasing the insolvency risk for the contract as a whole. An insolvent\\n    //       contract is extremely risky for any sponsor or synthetic token holder for the contract.\\n    uint256 public withdrawalLiveness;\\n\\n    // Minimum number of tokens in a sponsor's position.\\n    FixedPoint.Unsigned public minSponsorTokens;\\n\\n    // The expiry price pulled from the DVM.\\n    FixedPoint.Unsigned public expiryPrice;\\n\\n    // How much to offer the Optimistic Oracle as a reward for price requests\\n    FixedPoint.Unsigned public ooReward;\\n\\n    // Instance of FinancialProductLibrary to provide custom price and collateral requirement transformations to extend\\n    // the functionality of the EMP to support a wider range of financial products.\\n    FinancialProductLibrary public financialProductLibrary;\\n\\n    /****************************************\\n     *                EVENTS                *\\n     ****************************************/\\n\\n    event RequestTransferPosition(address indexed oldSponsor);\\n    event RequestTransferPositionExecuted(\\n        address indexed oldSponsor,\\n        address indexed newSponsor\\n    );\\n    event RequestTransferPositionCanceled(address indexed oldSponsor);\\n    event Deposit(address indexed sponsor, uint256 indexed collateralAmount);\\n    event Withdrawal(address indexed sponsor, uint256 indexed collateralAmount);\\n    event RequestWithdrawal(\\n        address indexed sponsor,\\n        uint256 indexed collateralAmount\\n    );\\n    event RequestWithdrawalExecuted(\\n        address indexed sponsor,\\n        uint256 indexed collateralAmount\\n    );\\n    event RequestWithdrawalCanceled(\\n        address indexed sponsor,\\n        uint256 indexed collateralAmount\\n    );\\n    event PositionCreated(\\n        address indexed sponsor,\\n        uint256 indexed collateralAmount,\\n        uint256 indexed tokenAmount\\n    );\\n    event NewSponsor(address indexed sponsor);\\n    event EndedSponsorPosition(address indexed sponsor);\\n    event Repay(\\n        address indexed sponsor,\\n        uint256 indexed numTokensRepaid,\\n        uint256 indexed newTokenCount\\n    );\\n    event Redeem(\\n        address indexed sponsor,\\n        uint256 indexed collateralAmount,\\n        uint256 indexed tokenAmount\\n    );\\n    event ContractExpired(address indexed caller);\\n    event SettleExpiredPosition(\\n        address indexed caller,\\n        uint256 indexed collateralReturned,\\n        uint256 indexed tokensBurned\\n    );\\n    event EmergencyShutdown(\\n        address indexed caller,\\n        uint256 originalExpirationTimestamp,\\n        uint256 shutdownTimestamp\\n    );\\n\\n    /****************************************\\n     *               MODIFIERS              *\\n     ****************************************/\\n\\n    modifier onlyPreExpiration() {\\n        _onlyPreExpiration();\\n        _;\\n    }\\n\\n    modifier onlyPostExpiration() {\\n        _onlyPostExpiration();\\n        _;\\n    }\\n\\n    modifier onlyCollateralizedPosition(address sponsor) {\\n        _onlyCollateralizedPosition(sponsor);\\n        _;\\n    }\\n\\n    // Check that the current state of the pricelessPositionManager is Open.\\n    // This prevents multiple calls to `expire` and `EmergencyShutdown` post expiration.\\n    modifier onlyOpenState() {\\n        _onlyOpenState();\\n        _;\\n    }\\n\\n    modifier noPendingWithdrawal(address sponsor) {\\n        _positionHasNoPendingWithdrawal(sponsor);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Construct the PricelessPositionManager\\n     * @dev Deployer of this contract should consider carefully which parties have ability to mint and burn\\n     * the synthetic tokens referenced by `_tokenAddress`. This contract's security assumes that no external accounts\\n     * can mint new tokens, which could be used to steal all of this contract's locked collateral.\\n     * We recommend to only use synthetic token contracts whose sole Owner role (the role capable of adding & removing roles)\\n     * is assigned to this contract, whose sole Minter role is assigned to this contract, and whose\\n     * total supply is 0 prior to construction of this contract.\\n     * @param _expirationTimestamp unix timestamp of when the contract will expire.\\n     * @param _withdrawalLiveness liveness delay, in seconds, for pending withdrawals.\\n     * @param _collateralAddress ERC20 token used as collateral for all positions.\\n     * @param _tokenAddress ERC20 token used as synthetic token.\\n     * @param _finderAddress UMA protocol Finder used to discover other protocol contracts.\\n     * @param _priceIdentifier registered in the DVM for the synthetic.\\n     * @param _minSponsorTokens minimum number of tokens that must exist at any time in a position.\\n     * @param _ooReward How much collateral to offer to the Optimistic Oracle when resolving prices\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\n     * Must be set to 0x0 for production environments that use live time.\\n     * @param _financialProductLibraryAddress Contract providing contract state transformations.\\n     */\\n    constructor(\\n        uint256 _expirationTimestamp,\\n        uint256 _withdrawalLiveness,\\n        address _collateralAddress,\\n        address _tokenAddress,\\n        address _finderAddress,\\n        bytes32 _priceIdentifier,\\n        FixedPoint.Unsigned memory _minSponsorTokens,\\n        FixedPoint.Unsigned memory _ooReward,\\n        address _timerAddress,\\n        address _financialProductLibraryAddress,\\n        bytes memory _ancillaryData\\n    )\\n        Testable(_timerAddress)\\n        nonReentrant()\\n    {\\n        finder = FinderInterface(_finderAddress);\\n        \\n        require(_expirationTimestamp > getCurrentTime());\\n        require(_getIdentifierWhitelist().isIdentifierSupported(_priceIdentifier));\\n\\n        expirationTimestamp = _expirationTimestamp;\\n        withdrawalLiveness = _withdrawalLiveness;\\n        tokenCurrency = ExpandedIERC20(_tokenAddress);\\n        collateralCurrency = IERC20(_collateralAddress);\\n        minSponsorTokens = _minSponsorTokens;\\n        ooReward = _ooReward;\\n        priceIdentifier = _priceIdentifier;\\n        ancillaryData = _ancillaryData;\\n\\n        // Initialize the financialProductLibrary at the provided address.\\n        financialProductLibrary = FinancialProductLibrary(_financialProductLibraryAddress);\\n    }\\n\\n    /****************************************\\n     *          POSITION FUNCTIONS          *\\n     ****************************************/\\n\\n    /**\\n     * @notice Requests to transfer ownership of the caller's current position to a new sponsor address.\\n     * Once the request liveness is passed, the sponsor can execute the transfer and specify the new sponsor.\\n     * @dev The liveness length is the same as the withdrawal liveness.\\n     */\\n    function requestTransferPosition() public onlyPreExpiration nonReentrant {\\n        PositionData storage positionData = _getPositionData(msg.sender);\\n        require(positionData.transferPositionRequestPassTimestamp == 0);\\n\\n        // Make sure the proposed expiration of this request is not post-expiry.\\n        uint256 requestPassTime = getCurrentTime().add(withdrawalLiveness);\\n        require(requestPassTime < expirationTimestamp);\\n\\n        // Update the position object for the user.\\n        positionData.transferPositionRequestPassTimestamp = requestPassTime;\\n\\n        emit RequestTransferPosition(msg.sender);\\n    }\\n\\n    /**\\n     * @notice After a passed transfer position request (i.e., by a call to `requestTransferPosition` and waiting\\n     * `withdrawalLiveness`), transfers ownership of the caller's current position to `newSponsorAddress`.\\n     * @dev Transferring positions can only occur if the recipient does not already have a position.\\n     * @param newSponsorAddress is the address to which the position will be transferred.\\n     */\\n    function transferPositionPassedRequest(address newSponsorAddress)\\n        public\\n        onlyPreExpiration\\n        noPendingWithdrawal(msg.sender)\\n        nonReentrant\\n    {\\n        require(positions[newSponsorAddress].collateral\\n            .isEqual(FixedPoint.fromUnscaledUint(0))\\n        );\\n        PositionData storage positionData = _getPositionData(msg.sender);\\n        require(\\n            positionData.transferPositionRequestPassTimestamp != 0 &&\\n                positionData.transferPositionRequestPassTimestamp <=\\n                getCurrentTime()\\n        );\\n\\n        // Reset transfer request.\\n        positionData.transferPositionRequestPassTimestamp = 0;\\n\\n        positions[newSponsorAddress] = positionData;\\n        delete positions[msg.sender];\\n\\n        emit RequestTransferPositionExecuted(msg.sender, newSponsorAddress);\\n        emit NewSponsor(newSponsorAddress);\\n        emit EndedSponsorPosition(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Cancels a pending transfer position request.\\n     */\\n    function cancelTransferPosition() external onlyPreExpiration nonReentrant {\\n        PositionData storage positionData = _getPositionData(msg.sender);\\n        require(positionData.transferPositionRequestPassTimestamp != 0);\\n\\n        emit RequestTransferPositionCanceled(msg.sender);\\n\\n        // Reset withdrawal request.\\n        positionData.transferPositionRequestPassTimestamp = 0;\\n    }\\n\\n    /**\\n     * @notice Transfers `collateralAmount` of `collateralCurrency` into the specified sponsor's position.\\n     * @dev Increases the collateralization level of a position after creation. This contract must be approved to spend\\n     * at least `collateralAmount` of `collateralCurrency`.\\n     * @param sponsor the sponsor to credit the deposit to.\\n     * @param collateralAmount total amount of collateral tokens to be sent to the sponsor's position.\\n     */\\n    function depositTo(\\n        address sponsor,\\n        FixedPoint.Unsigned memory collateralAmount\\n    ) public onlyPreExpiration noPendingWithdrawal(sponsor) nonReentrant {\\n        require(collateralAmount.isGreaterThan(0));\\n        PositionData storage positionData = _getPositionData(sponsor);\\n\\n        // Increase the position and global collateral balance by collateral amount.\\n        _incrementCollateralBalances(positionData, collateralAmount);\\n\\n        emit Deposit(sponsor, collateralAmount.rawValue);\\n\\n        // Move collateral currency from sender to contract.\\n        collateralCurrency.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            collateralAmount.rawValue\\n        );\\n    }\\n\\n    /**\\n     * @notice Transfers `collateralAmount` of `collateralCurrency` into the caller's position.\\n     * @dev Increases the collateralization level of a position after creation. This contract must be approved to spend\\n     * at least `collateralAmount` of `collateralCurrency`.\\n     * @param collateralAmount total amount of collateral tokens to be sent to the sponsor's position.\\n     */\\n    function deposit(FixedPoint.Unsigned memory collateralAmount) public {\\n        // This is just a thin wrapper over depositTo that specified the sender as the sponsor.\\n        depositTo(msg.sender, collateralAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers `collateralAmount` of `collateralCurrency` from the sponsor's position to the sponsor.\\n     * @dev Reverts if the withdrawal puts this position's collateralization ratio below the global collateralization\\n     * ratio. In that case, use `requestWithdrawal`. Might not withdraw the full requested amount to account for precision loss.\\n     * @param collateralAmount is the amount of collateral to withdraw.\\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\\n     */\\n    function withdraw(FixedPoint.Unsigned memory collateralAmount)\\n        public\\n        onlyPreExpiration\\n        noPendingWithdrawal(msg.sender)\\n        nonReentrant\\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\\n    {\\n        require(collateralAmount.isGreaterThan(0));\\n        PositionData storage positionData = _getPositionData(msg.sender);\\n\\n        // Decrement the sponsor's collateral and global collateral amounts. Check the GCR between decrement to ensure\\n        // position remains above the GCR within the withdrawal. If this is not the case the caller must submit a request.\\n        amountWithdrawn = _decrementCollateralBalancesCheckGCR(\\n            positionData,\\n            collateralAmount\\n        );\\n\\n        emit Withdrawal(msg.sender, amountWithdrawn.rawValue);\\n\\n        // Move collateral currency from contract to sender.\\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\\n    }\\n\\n    /**\\n     * @notice Starts a withdrawal request that, if passed, allows the sponsor to withdraw` from their position.\\n     * @dev The request will be pending for `withdrawalLiveness`, during which the position can be liquidated.\\n     * @param collateralAmount the amount of collateral requested to withdraw\\n     */\\n    function requestWithdrawal(FixedPoint.Unsigned memory collateralAmount)\\n        public\\n        onlyPreExpiration\\n        noPendingWithdrawal(msg.sender)\\n        nonReentrant\\n    {\\n        PositionData storage positionData = _getPositionData(msg.sender);\\n        require(\\n            collateralAmount.isGreaterThan(0) &&\\n            collateralAmount.isLessThanOrEqual(positionData.collateral)\\n        );\\n\\n        // Make sure the proposed expiration of this request is not post-expiry.\\n        uint256 requestPassTime = getCurrentTime().add(withdrawalLiveness);\\n        require(requestPassTime < expirationTimestamp);\\n\\n        // Update the position object for the user.\\n        positionData.withdrawalRequestPassTimestamp = requestPassTime;\\n        positionData.withdrawalRequestAmount = collateralAmount;\\n\\n        emit RequestWithdrawal(msg.sender, collateralAmount.rawValue);\\n    }\\n\\n    /**\\n     * @notice After a passed withdrawal request (i.e., by a call to `requestWithdrawal` and waiting\\n     * `withdrawalLiveness`), withdraws `positionData.withdrawalRequestAmount` of collateral currency.\\n     * @dev Might not withdraw the full requested amount in order to account for precision loss or if the full requested\\n     * amount exceeds the collateral in the position (due to paying fees).\\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\\n     */\\n    function withdrawPassedRequest()\\n        external\\n        onlyPreExpiration\\n        nonReentrant\\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\\n    {\\n        PositionData storage positionData = _getPositionData(msg.sender);\\n        require(\\n            positionData.withdrawalRequestPassTimestamp != 0 &&\\n            positionData.withdrawalRequestPassTimestamp <= getCurrentTime()\\n        );\\n\\n        // If withdrawal request amount is > position collateral, then withdraw the full collateral amount.\\n        FixedPoint.Unsigned memory amountToWithdraw;\\n        if (positionData.withdrawalRequestAmount.isGreaterThan(positionData.collateral)) {\\n            amountToWithdraw = positionData.collateral;\\n        }\\n        else {\\n            amountToWithdraw = positionData.withdrawalRequestAmount;\\n        }\\n\\n        // Decrement the sponsor's collateral and global collateral amounts.\\n        amountWithdrawn = _decrementCollateralBalances(positionData, amountToWithdraw);\\n\\n        // Reset withdrawal request by setting withdrawal amount and withdrawal timestamp to 0.\\n        _resetWithdrawalRequest(positionData);\\n\\n        // Transfer approved withdrawal amount from the contract to the caller.\\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\\n\\n        emit RequestWithdrawalExecuted(msg.sender, amountWithdrawn.rawValue);\\n    }\\n\\n    /**\\n     * @notice Cancels a pending withdrawal request.\\n     */\\n    function cancelWithdrawal() external nonReentrant {\\n        PositionData storage positionData = _getPositionData(msg.sender);\\n        require(positionData.withdrawalRequestPassTimestamp != 0);\\n\\n        emit RequestWithdrawalCanceled(\\n            msg.sender,\\n            positionData.withdrawalRequestAmount.rawValue\\n        );\\n\\n        // Reset withdrawal request by setting withdrawal amount and withdrawal timestamp to 0.\\n        _resetWithdrawalRequest(positionData);\\n    }\\n\\n    /**\\n     * @notice Creates tokens by creating a new position or by augmenting an existing position. Pulls `collateralAmount` into the sponsor's position and mints `numTokens` of `tokenCurrency`.\\n     * @dev Reverts if minting these tokens would put the position's collateralization ratio below the\\n     * global collateralization ratio. This contract must be approved to spend at least `collateralAmount` of\\n     * `collateralCurrency`.\\n     * @dev This contract must have the Minter role for the `tokenCurrency`.\\n     * @param collateralAmount is the number of collateral tokens to collateralize the position with\\n     * @param numTokens is the number of tokens to mint from the position.\\n     */\\n    function create(\\n        FixedPoint.Unsigned memory collateralAmount,\\n        FixedPoint.Unsigned memory numTokens\\n    ) public onlyPreExpiration nonReentrant {\\n        PositionData storage positionData = positions[msg.sender];\\n\\n        // Either the new create ratio or the resultant position CR must be above the current GCR.\\n        require(\\n            (_checkCollateralization(\\n                positionData.collateral.add(collateralAmount),\\n                positionData.tokensOutstanding.add(numTokens)\\n            ) || _checkCollateralization(collateralAmount, numTokens)),\\n            \\\"Insufficient collateral\\\"\\n        );\\n\\n        require(positionData.withdrawalRequestPassTimestamp == 0, \\\"Pending withdrawal\\\");\\n\\n        if (positionData.tokensOutstanding.isEqual(0)) {\\n            require(numTokens.isGreaterThanOrEqual(minSponsorTokens), \\\"Below minimum sponsor position\\\");\\n            emit NewSponsor(msg.sender);\\n        }\\n\\n        // Increase the position and global collateral balance by collateral amount.\\n        _incrementCollateralBalances(positionData, collateralAmount);\\n\\n        // Add the number of tokens created to the position's outstanding tokens.\\n        positionData.tokensOutstanding = positionData.tokensOutstanding.add(numTokens);\\n        totalTokensOutstanding = totalTokensOutstanding.add(numTokens);\\n\\n        emit PositionCreated(\\n            msg.sender,\\n            collateralAmount.rawValue,\\n            numTokens.rawValue\\n        );\\n\\n        // Transfer tokens into the contract from caller and mint corresponding synthetic tokens to the caller's address.\\n        collateralCurrency.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            collateralAmount.rawValue\\n        );\\n        require(tokenCurrency.mint(msg.sender, numTokens.rawValue));\\n    }\\n\\n    /**\\n     * @notice Burns `numTokens` of `tokenCurrency` to decrease sponsors position size, without sending back `collateralCurrency`.\\n     * This is done by a sponsor to increase position CR. Resulting size is bounded by minSponsorTokens.\\n     * @dev Can only be called by token sponsor. This contract must be approved to spend `numTokens` of `tokenCurrency`.\\n     * @dev This contract must have the Burner role for the `tokenCurrency`.\\n     * @param numTokens is the number of tokens to be burnt from the sponsor's debt position.\\n     */\\n    function repay(FixedPoint.Unsigned memory numTokens)\\n        public\\n        onlyPreExpiration\\n        noPendingWithdrawal(msg.sender)\\n        nonReentrant\\n    {\\n        PositionData storage positionData = _getPositionData(msg.sender);\\n        require(numTokens.isLessThanOrEqual(positionData.tokensOutstanding));\\n\\n        // Decrease the sponsors position tokens size. Ensure it is above the min sponsor size.\\n        FixedPoint.Unsigned memory newTokenCount = positionData.tokensOutstanding\\n            .sub(numTokens);\\n        require(newTokenCount.isGreaterThanOrEqual(minSponsorTokens));\\n        positionData.tokensOutstanding = newTokenCount;\\n\\n        // Update the totalTokensOutstanding after redemption.\\n        totalTokensOutstanding = totalTokensOutstanding.sub(numTokens);\\n\\n        emit Repay(msg.sender, numTokens.rawValue, newTokenCount.rawValue);\\n\\n        // Transfer the tokens back from the sponsor and burn them.\\n        tokenCurrency.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            numTokens.rawValue\\n        );\\n        tokenCurrency.burn(numTokens.rawValue);\\n    }\\n\\n    /**\\n     * @notice Burns `numTokens` of `tokenCurrency` and sends back the proportional amount of `collateralCurrency`.\\n     * @dev Can only be called by a token sponsor. Might not redeem the full proportional amount of collateral\\n     * in order to account for precision loss. This contract must be approved to spend at least `numTokens` of\\n     * `tokenCurrency`.\\n     * @dev This contract must have the Burner role for the `tokenCurrency`.\\n     * @param numTokens is the number of tokens to be burnt for a commensurate amount of collateral.\\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\\n     */\\n    function redeem(FixedPoint.Unsigned memory numTokens)\\n        public\\n        noPendingWithdrawal(msg.sender)\\n        nonReentrant\\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\\n    {\\n        PositionData storage positionData = _getPositionData(msg.sender);\\n        require(!numTokens.isGreaterThan(positionData.tokensOutstanding));\\n\\n        FixedPoint.Unsigned memory fractionRedeemed = numTokens.div(positionData.tokensOutstanding);\\n        FixedPoint.Unsigned memory collateralRedeemed = fractionRedeemed.mul(positionData.collateral);\\n\\n        // If redemption returns all tokens the sponsor has then we can delete their position. Else, downsize.\\n        if (positionData.tokensOutstanding.isEqual(numTokens)) {\\n            amountWithdrawn = _deleteSponsorPosition(msg.sender);\\n        } else {\\n            // Decrement the sponsor's collateral and global collateral amounts.\\n            amountWithdrawn = _decrementCollateralBalances(positionData,collateralRedeemed);\\n\\n            // Decrease the sponsors position tokens size. Ensure it is above the min sponsor size.\\n            FixedPoint.Unsigned memory newTokenCount = positionData.tokensOutstanding\\n                .sub(numTokens);\\n            require(\\n                newTokenCount.isGreaterThanOrEqual(minSponsorTokens),\\n                \\\"Below minimum sponsor position\\\"\\n            );\\n            positionData.tokensOutstanding = newTokenCount;\\n\\n            // Update the totalTokensOutstanding after redemption.\\n            totalTokensOutstanding = totalTokensOutstanding.sub(numTokens);\\n        }\\n\\n        emit Redeem(msg.sender, amountWithdrawn.rawValue, numTokens.rawValue);\\n\\n        // Transfer collateral from contract to caller and burn callers synthetic tokens.\\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\\n        tokenCurrency.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            numTokens.rawValue\\n        );\\n        tokenCurrency.burn(numTokens.rawValue);\\n    }\\n\\n    /**\\n     * @notice After a contract has passed expiry all token holders can redeem their tokens for underlying at the\\n     * prevailing price defined by the DVM from the `expire` function.\\n     * @dev This burns all tokens from the caller of `tokenCurrency` and sends back the proportional amount of\\n     * `collateralCurrency`. Might not redeem the full proportional amount of collateral in order to account for\\n     * precision loss. This contract must be approved to spend `tokenCurrency` at least up to the caller's full balance.\\n     * @dev This contract must have the Burner role for the `tokenCurrency`.\\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\\n     */\\n    function settleExpired()\\n        external\\n        onlyPostExpiration\\n        nonReentrant\\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\\n    {\\n        // If the contract state is open and onlyPostExpiration passed then `expire()` has not yet been called.\\n        require(contractState != ContractState.Open, \\\"Unexpired position\\\");\\n\\n        // Get the current settlement price and store it. If it is not resolved will revert.\\n        if (contractState != ContractState.ExpiredPriceReceived) {\\n            expiryPrice = _getOraclePrice(expirationTimestamp);\\n            contractState = ContractState.ExpiredPriceReceived;\\n        }\\n\\n        // Get caller's tokens balance and calculate amount of underlying entitled to them.\\n        FixedPoint.Unsigned memory tokensToRedeem = FixedPoint.Unsigned(tokenCurrency.balanceOf(msg.sender));\\n\\n        FixedPoint.Unsigned memory totalRedeemableCollateral = tokensToRedeem\\n            .mul(expiryPrice);\\n\\n        // If the caller is a sponsor with outstanding collateral they are also entitled to their excess collateral after their debt.\\n        PositionData storage positionData = positions[msg.sender];\\n        if (positionData.collateral.isGreaterThan(0)) {\\n            // Calculate the underlying entitled to a token sponsor. This is collateral - debt in underlying.\\n            FixedPoint.Unsigned memory tokenDebtValueInCollateral = positionData.tokensOutstanding\\n                .mul(expiryPrice);\\n            FixedPoint.Unsigned memory positionCollateral = positionData.collateral;\\n\\n            // If the debt is greater than the remaining collateral, they cannot redeem anything.\\n            FixedPoint.Unsigned memory positionRedeemableCollateral =\\n                tokenDebtValueInCollateral.isLessThan(positionCollateral)\\n                    ? positionCollateral.sub(tokenDebtValueInCollateral)\\n                    : FixedPoint.Unsigned(0);\\n\\n            // Add the number of redeemable tokens for the sponsor to their total redeemable collateral.\\n            totalRedeemableCollateral = totalRedeemableCollateral.add(\\n                positionRedeemableCollateral\\n            );\\n\\n            // Reset the position state as all the value has been removed after settlement.\\n            delete positions[msg.sender];\\n            emit EndedSponsorPosition(msg.sender);\\n        }\\n\\n        // Take the min of the remaining collateral and the collateral \\\"owed\\\". If the contract is undercapitalized,\\n        // the caller will get as much collateral as the contract can pay out.\\n        FixedPoint.Unsigned memory payout = FixedPoint.min(\\n            totalPositionCollateral,\\n            totalRedeemableCollateral\\n        );\\n\\n        // Decrement total contract collateral and outstanding debt.\\n        totalPositionCollateral = totalPositionCollateral.sub(payout);\\n        amountWithdrawn = payout;\\n        totalTokensOutstanding = totalTokensOutstanding.sub(tokensToRedeem);\\n\\n        emit SettleExpiredPosition(\\n            msg.sender,\\n            amountWithdrawn.rawValue,\\n            tokensToRedeem.rawValue\\n        );\\n\\n        // Transfer tokens & collateral and burn the redeemed tokens.\\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\\n        tokenCurrency.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            tokensToRedeem.rawValue\\n        );\\n        tokenCurrency.burn(tokensToRedeem.rawValue);\\n    }\\n\\n    /****************************************\\n     *        GLOBAL STATE FUNCTIONS        *\\n     ****************************************/\\n\\n    /**\\n     * @notice Locks contract state in expired and requests oracle price.\\n     * @dev this function can only be called once the contract is expired and can't be re-called.\\n     */\\n    function expire()\\n        external\\n        onlyPostExpiration\\n        onlyOpenState\\n        nonReentrant\\n    {\\n        contractState = ContractState.ExpiredPriceRequested;\\n\\n        _requestOraclePrice_senderPays(expirationTimestamp);\\n\\n        emit ContractExpired(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Premature contract settlement under emergency circumstances.\\n     * @dev Only the governor can call this function as they are permissioned within the `FinancialContractAdmin`.\\n     * Upon emergency shutdown, the contract settlement time is set to the shutdown time. This enables withdrawal\\n     * to occur via the standard `settleExpired` function. Contract state is set to `ExpiredPriceRequested`\\n     * which prevents re-entry into this function or the `expire` function. No fees are paid when calling\\n     * `emergencyShutdown` as the governor who would call the function would also receive the fees.\\n     */\\n    function emergencyShutdown()\\n        external\\n        onlyPreExpiration\\n        onlyOpenState\\n        nonReentrant\\n    {\\n        require(msg.sender == _getFinancialContractsAdminAddress());\\n\\n        contractState = ContractState.ExpiredPriceRequested;\\n        // Expiratory time now becomes the current time (emergency shutdown time).\\n        // Price requested at this time stamp. `settleExpired` can now withdraw at this timestamp.\\n        uint256 oldExpirationTimestamp = expirationTimestamp;\\n        expirationTimestamp = getCurrentTime();\\n        _requestOraclePrice_senderPays(expirationTimestamp);\\n\\n        emit EmergencyShutdown(\\n            msg.sender,\\n            oldExpirationTimestamp,\\n            expirationTimestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Accessor method to compute a transformed price using the finanicalProductLibrary specified at contract\\n     * deployment. If no library was provided then no modification to the price is done.\\n     * @param price input price to be transformed.\\n     * @param requestTime timestamp the oraclePrice was requested at.\\n     * @return transformedPrice price with the transformation function applied to it.\\n     * @dev This method should never revert.\\n     */\\n\\n    function transformPrice(\\n        FixedPoint.Unsigned memory price,\\n        uint256 requestTime\\n    ) public view nonReentrantView returns (FixedPoint.Unsigned memory) {\\n        return _transformPrice(price, requestTime);\\n    }\\n\\n    /**\\n     * @notice Accessor method to compute a transformed price identifier using the finanicalProductLibrary specified\\n     * at contract deployment. If no library was provided then no modification to the identifier is done.\\n     * @param requestTime timestamp the identifier is to be used at.\\n     * @return transformedPrice price with the transformation function applied to it.\\n     * @dev This method should never revert.\\n     */\\n    function transformPriceIdentifier(uint256 requestTime)\\n        public\\n        view\\n        nonReentrantView\\n        returns (bytes32)\\n    {\\n        return _transformPriceIdentifier(requestTime);\\n    }\\n\\n    /****************************************\\n     *          INTERNAL FUNCTIONS          *\\n     ****************************************/\\n\\n    // Reduces a sponsor's position and global counters by the specified parameters. Handles deleting the entire\\n    // position if the entire position is being removed. Does not make any external transfers.\\n    function _reduceSponsorPosition(\\n        address sponsor,\\n        FixedPoint.Unsigned memory tokensToRemove,\\n        FixedPoint.Unsigned memory collateralToRemove,\\n        FixedPoint.Unsigned memory withdrawalAmountToRemove\\n    ) internal {\\n        PositionData storage positionData = _getPositionData(sponsor);\\n\\n        // If the entire position is being removed, delete it instead.\\n        if (tokensToRemove.isEqual(positionData.tokensOutstanding) &&\\n            positionData.collateral.isEqual(collateralToRemove)\\n        ) {\\n            _deleteSponsorPosition(sponsor);\\n            return;\\n        }\\n\\n        // Decrement the sponsor's collateral and global collateral amounts.\\n        _decrementCollateralBalances(positionData, collateralToRemove);\\n\\n        // Ensure that the sponsor will meet the min position size after the reduction.\\n        FixedPoint.Unsigned memory newTokenCount = positionData.tokensOutstanding\\n            .sub(tokensToRemove);\\n        require(\\n            newTokenCount.isGreaterThanOrEqual(minSponsorTokens),\\n            \\\"Below minimum sponsor position\\\"\\n        );\\n        positionData.tokensOutstanding = newTokenCount;\\n\\n        // Decrement the position's withdrawal amount.\\n        positionData.withdrawalRequestAmount = positionData.withdrawalRequestAmount\\n            .sub(withdrawalAmountToRemove);\\n\\n        // Decrement the total outstanding tokens in the overall contract.\\n        totalTokensOutstanding = totalTokensOutstanding.sub(tokensToRemove);\\n    }\\n\\n    // Deletes a sponsor's position and updates global counters. Does not make any external transfers.\\n    function _deleteSponsorPosition(address sponsor)\\n        internal\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        PositionData storage positionToLiquidate = _getPositionData(sponsor);\\n\\n        FixedPoint.Unsigned memory startingGlobalCollateral = totalPositionCollateral;\\n\\n        // Remove the collateral and outstanding from the overall total position.\\n        totalPositionCollateral = totalPositionCollateral.sub(positionToLiquidate.collateral);\\n        totalTokensOutstanding = totalTokensOutstanding.sub(positionToLiquidate.tokensOutstanding);\\n\\n        // Reset the sponsors position to have zero outstanding and collateral.\\n        delete positions[sponsor];\\n\\n        emit EndedSponsorPosition(sponsor);\\n\\n        // Return amount of collateral deleted from position.\\n        return startingGlobalCollateral.sub(totalPositionCollateral);\\n    }\\n\\n    function _getPositionData(address sponsor)\\n        internal\\n        view\\n        onlyCollateralizedPosition(sponsor)\\n        returns (PositionData storage)\\n    {\\n        return positions[sponsor];\\n    }\\n\\n    function _getIdentifierWhitelist()\\n        internal\\n        view\\n        returns (IdentifierWhitelistInterface)\\n    {\\n        return\\n            IdentifierWhitelistInterface(\\n                finder.getImplementationAddress(\\n                    OracleInterfaces.IdentifierWhitelist\\n                )\\n            );\\n    }\\n\\n    function _getOptimisticOracle()\\n        internal\\n        view\\n        returns (OptimisticOracleInterface)\\n    {\\n        return\\n            OptimisticOracleInterface(\\n                finder.getImplementationAddress(\\n                    OracleInterfaces.OptimisticOracle\\n                )\\n            );\\n    }\\n\\n    function _getFinancialContractsAdminAddress()\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return\\n            finder.getImplementationAddress(\\n                OracleInterfaces.FinancialContractsAdmin\\n            );\\n    }\\n\\n    // Requests a price for transformed `priceIdentifier` at `requestedTime` from the Oracle, charging the caller for the OO proposer reward.\\n    function _requestOraclePrice_senderPays(uint256 requestedTime) internal {\\n        OptimisticOracleInterface optimisticOracle = _getOptimisticOracle();\\n\\n        // Pull final fee from sender\\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), ooReward.rawValue);\\n\\n        // Increase token allowance to enable the optimistic oracle fee payment.\\n        collateralCurrency.safeIncreaseAllowance(address(optimisticOracle), ooReward.rawValue);\\n        optimisticOracle.requestPrice(\\n            _transformPriceIdentifier(requestedTime),\\n            requestedTime,\\n            ancillaryData,\\n            collateralCurrency,\\n            ooReward.rawValue\\n        );\\n    }\\n\\n    // Fetches a resolved Oracle price from the Oracle. Reverts if the Oracle hasn't resolved for this request.\\n    function _getOraclePrice(uint256 requestedTime)\\n        internal\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        // Create an instance of the oracle and get the price. If the price is not resolved revert.\\n        OptimisticOracleInterface optimisticOracle = _getOptimisticOracle();\\n        require(\\n            optimisticOracle.hasPrice(\\n                address(this),\\n                _transformPriceIdentifier(requestedTime),\\n                requestedTime,\\n                ancillaryData\\n            )\\n        );\\n        int256 optimisticOraclePrice = optimisticOracle.settleAndGetPrice(\\n            _transformPriceIdentifier(requestedTime),\\n            requestedTime,\\n            ancillaryData\\n        );\\n\\n        // For now we don't want to deal with negative prices in positions.\\n        if (optimisticOraclePrice < 0) {\\n            optimisticOraclePrice = 0;\\n        }\\n        return\\n            _transformPrice(\\n                FixedPoint.Unsigned(uint256(optimisticOraclePrice)),\\n                requestedTime\\n            );\\n    }\\n\\n    // Reset withdrawal request by setting the withdrawal request and withdrawal timestamp to 0.\\n    function _resetWithdrawalRequest(PositionData storage positionData)\\n        internal\\n    {\\n        positionData.withdrawalRequestAmount = FixedPoint.fromUnscaledUint(0);\\n        positionData.withdrawalRequestPassTimestamp = 0;\\n    }\\n\\n    // Ensure individual and global consistency when increasing collateral balances. Returns the change to the position.\\n    function _incrementCollateralBalances(\\n        PositionData storage positionData,\\n        FixedPoint.Unsigned memory collateralAmount\\n    ) internal returns (FixedPoint.Unsigned memory) {\\n        positionData.collateral = positionData.collateral.add(collateralAmount);\\n        totalPositionCollateral = totalPositionCollateral.add(collateralAmount);\\n        return collateralAmount;\\n    }\\n\\n    // Ensure individual and global consistency when decrementing collateral balances. Returns the change to the\\n    // position. We elect to return the amount that the global collateral is decreased by, rather than the individual\\n    // position's collateral, because we need to maintain the invariant that the global collateral is always\\n    // <= the collateral owned by the contract to avoid reverts on withdrawals. The amount returned = amount withdrawn.\\n    function _decrementCollateralBalances(\\n        PositionData storage positionData,\\n        FixedPoint.Unsigned memory collateralAmount\\n    ) internal returns (FixedPoint.Unsigned memory) {\\n        positionData.collateral = positionData.collateral.sub(collateralAmount);\\n        totalPositionCollateral = totalPositionCollateral.sub(collateralAmount);\\n        return collateralAmount;\\n    }\\n\\n    // Ensure individual and global consistency when decrementing collateral balances. Returns the change to the position.\\n    // This function is similar to the _decrementCollateralBalances function except this function checks position GCR\\n    // between the decrements. This ensures that collateral removal will not leave the position undercollateralized.\\n    function _decrementCollateralBalancesCheckGCR(\\n        PositionData storage positionData,\\n        FixedPoint.Unsigned memory collateralAmount\\n    ) internal returns (FixedPoint.Unsigned memory) {\\n        positionData.collateral = positionData.collateral.sub(collateralAmount);\\n        totalPositionCollateral = totalPositionCollateral.sub(collateralAmount);\\n        require(_checkPositionCollateralization(positionData), \\\"CR below GCR\\\");\\n        return collateralAmount;\\n    }\\n\\n    // These internal functions are supposed to act identically to modifiers, but re-used modifiers\\n    // unnecessarily increase contract bytecode size.\\n    // source: https://blog.polymath.network/solidity-tips-and-tricks-to-save-gas-and-reduce-bytecode-size-c44580b218e6\\n    function _onlyOpenState() internal view {\\n        require(\\n            contractState == ContractState.Open,\\n            \\\"Contract state is not OPEN\\\"\\n        );\\n    }\\n\\n    function _onlyPreExpiration() internal view {\\n        require(\\n            getCurrentTime() < expirationTimestamp,\\n            \\\"Only callable pre-expiry\\\"\\n        );\\n    }\\n\\n    function _onlyPostExpiration() internal view {\\n        require(\\n            getCurrentTime() >= expirationTimestamp,\\n            \\\"Only callable post-expiry\\\"\\n        );\\n    }\\n\\n    function _onlyCollateralizedPosition(address sponsor) internal view {\\n        require(\\n            positions[sponsor].collateral.isGreaterThan(0),\\n            \\\"Position has no collateral\\\"\\n        );\\n    }\\n\\n    // Note: This checks whether an already existing position has a pending withdrawal. This cannot be used on the\\n    // `create` method because it is possible that `create` is called on a new position (i.e. one without any collateral\\n    // or tokens outstanding) which would fail the `onlyCollateralizedPosition` modifier on `_getPositionData`.\\n    function _positionHasNoPendingWithdrawal(address sponsor) internal view {\\n        require(\\n            _getPositionData(sponsor).withdrawalRequestPassTimestamp == 0,\\n            \\\"Pending withdrawal\\\"\\n        );\\n    }\\n\\n    /****************************************\\n     *          PRIVATE FUNCTIONS          *\\n     ****************************************/\\n\\n    function _checkPositionCollateralization(PositionData storage positionData)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return\\n            _checkCollateralization(\\n                positionData.collateral,\\n                positionData.tokensOutstanding\\n            );\\n    }\\n\\n    // Checks whether the provided `collateral` and `numTokens` have a collateralization ratio above the global\\n    // collateralization ratio.\\n    function _checkCollateralization(\\n        FixedPoint.Unsigned memory collateral,\\n        FixedPoint.Unsigned memory numTokens\\n    ) private view returns (bool) {\\n        FixedPoint.Unsigned memory global = _getCollateralizationRatio(\\n            totalPositionCollateral,\\n            totalTokensOutstanding\\n        );\\n        FixedPoint.Unsigned memory thisChange = _getCollateralizationRatio(\\n            collateral,\\n            numTokens\\n        );\\n        return !global.isGreaterThan(thisChange);\\n    }\\n\\n    function _getCollateralizationRatio(\\n        FixedPoint.Unsigned memory collateral,\\n        FixedPoint.Unsigned memory numTokens\\n    ) private pure returns (FixedPoint.Unsigned memory ratio) {\\n        if (!numTokens.isGreaterThan(0)) {\\n            return FixedPoint.fromUnscaledUint(0);\\n        } else {\\n            return collateral.div(numTokens);\\n        }\\n    }\\n\\n    // IERC20Standard.decimals() will revert if the collateral contract has not implemented the decimals() method,\\n    // which is possible since the method is only an OPTIONAL method in the ERC20 standard:\\n    // https://eips.ethereum.org/EIPS/eip-20#methods.\\n    function _getSyntheticDecimals(address _collateralAddress)\\n        public\\n        view\\n        returns (uint8 decimals)\\n    {\\n        try IERC20Standard(_collateralAddress).decimals() returns (\\n            uint8 _decimals\\n        ) {\\n            return _decimals;\\n        } catch {\\n            return 18;\\n        }\\n    }\\n\\n    function _transformPrice(\\n        FixedPoint.Unsigned memory price,\\n        uint256 requestTime\\n    ) internal view returns (FixedPoint.Unsigned memory) {\\n        if (!address(financialProductLibrary).isContract()) return price;\\n        try financialProductLibrary.transformPrice(price, requestTime) returns (\\n            FixedPoint.Unsigned memory transformedPrice\\n        ) {\\n            return transformedPrice;\\n        } catch {\\n            return price;\\n        }\\n    }\\n\\n    function _transformPriceIdentifier(uint256 requestTime)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        if (!address(financialProductLibrary).isContract())\\n            return priceIdentifier;\\n        try\\n            financialProductLibrary.transformPriceIdentifier(\\n                priceIdentifier,\\n                requestTime\\n            )\\n        returns (bytes32 transformedIdentifier) {\\n            return transformedIdentifier;\\n        } catch {\\n            return priceIdentifier;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd115105ee07b65bf066673940a397079cece7004880a2770141c6735c1aaacb6\",\"license\":\"MIT\"},\"contracts/UMA/oracle/implementation/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\\n */\\nlibrary OracleInterfaces {\\n    bytes32 public constant Oracle = \\\"Oracle\\\";\\n    bytes32 public constant IdentifierWhitelist = \\\"IdentifierWhitelist\\\";\\n    bytes32 public constant Store = \\\"Store\\\";\\n    bytes32 public constant FinancialContractsAdmin = \\\"FinancialContractsAdmin\\\";\\n    bytes32 public constant Registry = \\\"Registry\\\";\\n    bytes32 public constant CollateralWhitelist = \\\"CollateralWhitelist\\\";\\n    bytes32 public constant OptimisticOracle = \\\"OptimisticOracle\\\";\\n    bytes32 public constant Bridge = \\\"Bridge\\\";\\n    bytes32 public constant GenericHandler = \\\"GenericHandler\\\";\\n    bytes32 public constant SkinnyOptimisticOracle = \\\"SkinnyOptimisticOracle\\\";\\n    bytes32 public constant ChildMessenger = \\\"ChildMessenger\\\";\\n    bytes32 public constant OracleHub = \\\"OracleHub\\\";\\n    bytes32 public constant OracleSpoke = \\\"OracleSpoke\\\";\\n}\\n\\n/**\\n * @title Commonly re-used values for contracts associated with the OptimisticOracle.\\n */\\nlibrary OptimisticOracleConstraints {\\n    // Any price request submitted to the OptimisticOracle must contain ancillary data no larger than this value.\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` constant value otherwise it is possible\\n    // that a price can be requested to the OptimisticOracle successfully, but cannot be resolved by the DVM which\\n    // refuses to accept a price request made with ancillary data length over a certain size.\\n    uint256 public constant ancillaryBytesLimit = 8192;\\n}\\n\",\"keccak256\":\"0x1d17d417e4672ab9f927e768e41735a9873c395edeee49eb1dbd79817409a460\",\"license\":\"MIT\"},\"contracts/UMA/oracle/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\n * @dev Examples are the Oracle or Store interfaces.\\n */\\ninterface FinderInterface {\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function changeImplementationAddress(\\n        bytes32 interfaceName,\\n        address implementationAddress\\n    ) external;\\n\\n    /**\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\n     * @param interfaceName queried interface.\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function getImplementationAddress(bytes32 interfaceName)\\n        external\\n        view\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x043f104060b976bc3d9cdbd6f0a2e8b260fb462c234d90cb1bc237c124269049\",\"license\":\"MIT\"},\"contracts/UMA/oracle/interfaces/IdentifierWhitelistInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interface for whitelists of supported identifiers that the oracle can provide prices for.\\n */\\ninterface IdentifierWhitelistInterface {\\n    /**\\n     * @notice Adds the provided identifier as a supported identifier.\\n     * @dev Price requests using this identifier will succeed after this call.\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\n     */\\n    function addSupportedIdentifier(bytes32 identifier) external;\\n\\n    /**\\n     * @notice Removes the identifier from the whitelist.\\n     * @dev Price requests using this identifier will no longer succeed after this call.\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\n     */\\n    function removeSupportedIdentifier(bytes32 identifier) external;\\n\\n    /**\\n     * @notice Checks whether an identifier is on the whitelist.\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\n     * @return bool if the identifier is supported (or not).\\n     */\\n    function isIdentifierSupported(bytes32 identifier)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x885514ff5c2aec62f7e69c7e5c64d2ef82928d8791d921a039c3d74044b6cbd0\",\"license\":\"MIT\"},\"contracts/UMA/oracle/interfaces/OptimisticOracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./FinderInterface.sol\\\";\\n\\n/**\\n * @title Financial contract facing Oracle interface.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract OptimisticOracleInterface {\\n    event RequestPrice(\\n        address indexed requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        address currency,\\n        uint256 reward,\\n        uint256 finalFee\\n    );\\n    event ProposePrice(\\n        address indexed requester,\\n        address indexed proposer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 proposedPrice,\\n        uint256 expirationTimestamp,\\n        address currency\\n    );\\n    event DisputePrice(\\n        address indexed requester,\\n        address indexed proposer,\\n        address indexed disputer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 proposedPrice\\n    );\\n    event Settle(\\n        address indexed requester,\\n        address indexed proposer,\\n        address indexed disputer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 price,\\n        uint256 payout\\n    );\\n\\n    // Struct representing the state of a price request.\\n    enum State {\\n        Invalid, // Never requested.\\n        Requested, // Requested, no other actions taken.\\n        Proposed, // Proposed, but not expired or disputed yet.\\n        Expired, // Proposed, not disputed, past liveness.\\n        Disputed, // Disputed, but no DVM price returned yet.\\n        Resolved, // Disputed and DVM price is available.\\n        Settled // Final price has been set in the contract (can get here from Expired or Resolved).\\n    }\\n\\n    // Struct representing a price request.\\n    struct Request {\\n        address proposer; // Address of the proposer.\\n        address disputer; // Address of the disputer.\\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\\n        bool settled; // True if the request is settled.\\n        bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\\n        int256 proposedPrice; // Price that the proposer submitted.\\n        int256 resolvedPrice; // Price resolved once the request is settled.\\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\n        uint256 customLiveness; // Custom liveness value set by the requester.\\n    }\\n\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\n    // to accept a price request made with ancillary data length over a certain size.\\n    uint256 public constant ancillaryBytesLimit = 8192;\\n\\n    function defaultLiveness() external view virtual returns (uint256);\\n\\n    function finder() external view virtual returns (FinderInterface);\\n\\n    function getCurrentTime() external view virtual returns (uint256);\\n\\n    // Note: this is required so that typechain generates a return value with named fields.\\n    mapping(bytes32 => Request) public requests;\\n\\n    /**\\n     * @notice Requests a new price.\\n     * @param identifier price identifier being requested.\\n     * @param timestamp timestamp of the price being requested.\\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\n     *               provides its own reward system.\\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\n     * This can be changed with a subsequent call to setBond().\\n     */\\n    function requestPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        IERC20 currency,\\n        uint256 reward\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Set the proposal bond associated with a price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param bond custom bond amount to set.\\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\n     * changed again with a subsequent call to setBond().\\n     */\\n    function setBond(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 bond\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller\\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\\n     * bond, so there is still profit to be made even if the reward is refunded.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     */\\n    function setRefundOnDispute(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\\n     * being auto-resolved.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param customLiveness new custom liveness.\\n     */\\n    function setCustomLiveness(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 customLiveness\\n    ) external virtual;\\n\\n    /**\\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\n     * from this proposal. However, any bonds are pulled from the caller.\\n     * @param proposer address to set as the proposer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePriceFor(\\n        address proposer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Proposes a price value for an existing price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\n     * @param disputer address to set as the disputer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was value (the proposal was incorrect).\\n     */\\n    function disputePriceFor(\\n        address disputer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price value for an existing price request with an active proposal.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n     */\\n    function disputePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\n     * hasn't been settled.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return resolved price.\\n     */\\n    function settleAndGetPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (int256);\\n\\n    /**\\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\n     * the returned bonds as well as additional rewards.\\n     */\\n    function settle(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 payout);\\n\\n    /**\\n     * @notice Gets the current data structure containing all information about a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the Request data structure.\\n     */\\n    function getRequest(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (Request memory);\\n\\n    /**\\n     * @notice Returns the state of a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the State enum value.\\n     */\\n    function getState(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (State);\\n\\n    /**\\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return true if price has resolved or settled, false otherwise.\\n     */\\n    function hasPrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (bool);\\n\\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\\n        public\\n        view\\n        virtual\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x462e7eeb49384d56506fec6d7ca99f2be1f6c0a79eceb6105339a0884269f1a8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61534961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610620000375760003560e01c8063bdc3f244146200003c575b600080fd5b8180156200004957600080fd5b50620000616200005b36600462000209565b6200007d565b6040516001600160a01b03909116815260200160405180910390f35b600080826040516200008f90620000c0565b6200009b9190620003df565b604051809103906000f080158015620000b8573d6000803e3d6000fd5b509392505050565b614df6806200051e83390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff811182821017156200010b576200010b620000ce565b60405290565b80356001600160a01b03811681146200012957600080fd5b919050565b600082601f8301126200014057600080fd5b813567ffffffffffffffff808211156200015e576200015e620000ce565b604051601f8301601f19908116603f01168101908282118183101715620001895762000189620000ce565b81604052838152866020858801011115620001a357600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215620001d657600080fd5b6040516020810181811067ffffffffffffffff82111715620001fc57620001fc620000ce565b6040529135825250919050565b6000602082840312156200021c57600080fd5b813567ffffffffffffffff808211156200023557600080fd5b9083019061020082860312156200024b57600080fd5b62000255620000e4565b8235815260208301356020820152620002716040840162000111565b6040820152620002846060840162000111565b6060820152620002976080840162000111565b6080820152620002aa60a0840162000111565b60a0820152620002bd60c0840162000111565b60c082015260e083013560e08201526101008084013583811115620002e157600080fd5b620002ef888287016200012e565b82840152505061012091506200030886838501620001c3565b8282015261014091506200031f86838501620001c3565b828201526101609150818301358282015261018091506200034386838501620001c3565b828201526101a091506200035a86838501620001c3565b828201526101c091506200037186838501620001c3565b828201526101e091506200038886838501620001c3565b91810191909152949350505050565b6000815180845260005b81811015620003bf57602081850181015186830182015201620003a1565b506000602082860101526020601f19601f83011685010191505092915050565b602081528151602082015260208201516040820152600060408301516200041160608401826001600160a01b03169052565b5060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516001600160a01b03811660c08401525060c08301516001600160a01b03811660e08401525060e0830151610100838101919091528301516102006101208085018290526200049461022086018462000397565b90860151909250610140620004ab86820183519052565b8601519050610160620004c086820183519052565b8601516101808681019190915286015190506101a0620004e281870183519052565b86015190506101c0620004f786820183519052565b86015190506101e06200050c86820183519052565b90950151519301929092525091905056fe60806040523480156200001157600080fd5b5060405162004df638038062004df68339810160408190526200003491620006b2565b8051602082015160408301516060840151608085015160e086015161012087015161014088015160a089015160c08a01516101008b0151600080546001600160a81b0319166001600160a01b03851617600160a01b1790558b9a99989796959493929190620000a2620002ea565b620000b56000805460ff60a01b19169055565b600680546001600160a01b0319166001600160a01b038916179055620000da6200034a565b8b11620000e657600080fd5b620000f0620003df565b6001600160a01b03166390978d1b876040518263ffffffff1660e01b81526004016200011e91815260200190565b602060405180830381865afa1580156200013c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016291906200083f565b6200016c57600080fd5b60098b9055600a8a9055600480546001600160a01b03808b166001600160a01b03199283161790925560058054928c16929091169190911790558451600b558351600d5560078690556008620001c38282620008f2565b50600e80546001600160a01b0319166001600160a01b038416179055620001f86000805460ff60a01b1916600160a01b179055565b505050505050505050505062000213620002ea60201b60201c565b620002266000805460ff60a01b19169055565b6200024660018261018001516200046f60201b620028231790919060201c565b6200025057600080fd5b6200028e60016200027a836101e00151846101c001516200048960201b6200283a1790919060201c565b620004ce60201b6200286d1790919060201c565b6200029857600080fd5b610160810151601155610180810151516012556101a0810151516013556101c0810151516014556101e081015151601555620002e26000805460ff60a01b1916600160a01b179055565b505062000a44565b600054600160a01b900460ff16620003485760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640160405180910390fd5b565b600080546001600160a01b031615620003da5760008054906101000a90046001600160a01b03166001600160a01b03166329cb924d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003d59190620009be565b905090565b504290565b6006546040516302abf57960e61b81527f4964656e74696669657257686974656c6973740000000000000000000000000060048201526000916001600160a01b03169063aafd5e4090602401602060405180830381865afa15801562000449573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003d59190620009d8565b60006200047c82620004e7565b5183511190505b92915050565b6040805160208101909152600081526040518060200160405280620004c5846000015186600001516200052b60201b620028841790919060201c565b90529392505050565b6000620004db82620004e7565b51835110905092915050565b604080516020810190915260008152604051806020016040528062000523670de0b6b3a7640000856200054060201b620028901790919060201c565b905292915050565b600062000539828462000a0c565b9392505050565b600062000539828462000a22565b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b03811182821017156200058a576200058a6200054e565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620005bb57620005bb6200054e565b604052919050565b80516001600160a01b0381168114620005db57600080fd5b919050565b600082601f830112620005f257600080fd5b81516001600160401b038111156200060e576200060e6200054e565b602062000624601f8301601f1916820162000590565b82815285828487010111156200063957600080fd5b60005b83811015620006595785810183015182820184015282016200063c565b506000928101909101919091529392505050565b6000602082840312156200068057600080fd5b604051602081016001600160401b0381118282101715620006a557620006a56200054e565b6040529151825250919050565b600060208284031215620006c557600080fd5b81516001600160401b0380821115620006dd57600080fd5b908301906102008286031215620006f357600080fd5b620006fd62000564565b82518152602083015160208201526200071960408401620005c3565b60408201526200072c60608401620005c3565b60608201526200073f60808401620005c3565b60808201526200075260a08401620005c3565b60a08201526200076560c08401620005c3565b60c082015260e083015160e082015261010080840151838111156200078957600080fd5b6200079788828701620005e0565b8284015250506101209150620007b0868385016200066d565b828201526101409150620007c7868385016200066d565b82820152610160915081830151828201526101809150620007eb868385016200066d565b828201526101a0915062000802868385016200066d565b828201526101c0915062000819868385016200066d565b828201526101e0915062000830868385016200066d565b91810191909152949350505050565b6000602082840312156200085257600080fd5b815180151581146200053957600080fd5b600181811c908216806200087857607f821691505b6020821081036200089957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620008ed57600081815260208120601f850160051c81016020861015620008c85750805b601f850160051c820191505b81811015620008e957828155600101620008d4565b5050505b505050565b81516001600160401b038111156200090e576200090e6200054e565b62000926816200091f845462000863565b846200089f565b602080601f8311600181146200095e5760008415620009455750858301515b600019600386901b1c1916600185901b178555620008e9565b600085815260208120601f198616915b828110156200098f578886015182559484019460019091019084016200096e565b5085821015620009ae5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215620009d157600080fd5b5051919050565b600060208284031215620009eb57600080fd5b6200053982620005c3565b634e487b7160e01b600052601160045260246000fd5b80820180821115620004835762000483620009f6565b600081600019048311821515161562000a3f5762000a3f620009f6565b500290565b6143a28062000a546000396000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c80635aa266c9116101675780639f43ddd2116100ce578063bc12163011610087578063bc1216301461063e578063d1e92c1114610651578063e3c0f9cb14610664578063edfa9a9b1461066e578063f0391daf14610678578063fcccedc71461068257600080fd5b80639f43ddd2146105de5780639ff4dea8146105e7578063a1c4d1e7146105f0578063a765fbea14610610578063b795f0d414610623578063b9a3c84c1461062b57600080fd5b806379599f961161012057806379599f96146105855780637e398c221461058d57806385209ee01461059757806392120aec146105b85780639375f0e9146105c257806397523661146105d557600080fd5b80635aa266c9146105115780635f1af1ca1461052457806362b5f7f514610537578063655990571461054a5780636ba2f9921461055f5780637048594b1461057257600080fd5b80632e154f2e1161020b57806343e4771b116101c457806343e4771b1461041457806348e30c3f1461041e5780634ead6e51146104285780634f8c48471461044d57806355f57510146104755780635617151c146104fe57600080fd5b80632e154f2e146103a757806333a46ca2146103b15780633403c2fc146103b9578063360598e1146103c157806336980f58146103f95780633ee7a5ce1461040157600080fd5b80631c39c38d1161025d5780631c39c38d14610341578063226112801461035457806322f8e5661461035c57806325ed4dd81461036f57806329cb924d146103965780632d5436cf1461039e57600080fd5b8063081b314e146102a55780630c9229ca146102c25780630de15fd9146102cc5780630ff49b90146102f757806318928a0c14610319578063197f78481461032e575b600080fd5b6014546102af9081565b6040519081526020015b60405180910390f35b6002546102af9081565b6005546102df906001600160a01b031681565b6040516001600160a01b0390911681526020016102b9565b61030a610305366004613ce1565b61068a565b604051905181526020016102b9565b61032c610327366004613d21565b6106b4565b005b61030a61033c366004613d57565b610764565b6000546102df906001600160a01b031681565b61032c610784565b61032c61036a366004613d73565b6107f6565b61038261037d366004613d9e565b61086c565b6040805192835290516020830152016102b9565b6102af610e0c565b6102af60115481565b6013546102af9081565b61030a610ea0565b61032c610fc9565b6103d46103cf366004613dff565b611087565b60408051825151815260208084015151908201529181015151908201526060016102b9565b61032c61157b565b61030a61040f366004613d57565b61160d565b6003546102af9081565b6012546102af9081565b61043b610436366004613e2f565b6116c5565b60405160ff90911681526020016102b9565b61046061045b366004613e4c565b61172d565b6040516102b999989796959493929190613e94565b6104d1610483366004613e2f565b60016020818152600092835260409283902083518083018552815481529281015484518084018652600283015481528551938401909552600382015483526004909101549293909290919085565b6040805195518652602086019490945291519284019290925290516060830152608082015260a0016102b9565b61032c61050c366004613e2f565b6117d2565b61032c61051f366004613d57565b611977565b61030a610532366004613d57565b611ad8565b6102af610545366004613d73565b611cea565b610552611cfd565b6040516102b99190613f44565b61032c61056d366004613f57565b611d8b565b6004546102df906001600160a01b031681565b61032c61202b565b6015546102af9081565b6000546105ab90600160a81b900460ff1681565b6040516102b99190613f74565b600b546102af9081565b600e546102df906001600160a01b031681565b6102af60075481565b6102af60095481565b6102af600a5481565b6106036105fe366004613e2f565b61209d565b6040516102b99190613f8e565b61030a61061e366004613dff565b6121e0565b61032c612335565b6006546102df906001600160a01b031681565b61032c61064c366004613d57565b6123a6565b61032c61065f366004613d57565b61246e565b6010546102af9081565b600c546102af9081565b600d546102af9081565b61030a61247b565b6040805160208101909152600081526106a161289c565b6106ab83836128f5565b90505b92915050565b6106bc612999565b816106c6816129f1565b6106ce61289c565b6106d6612a40565b6106e1826000612823565b6106ea57600080fd5b60006106f584612a4f565b90506107018184612a77565b5082516040516001600160a01b038616907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c90600090a38251600554610756916001600160a01b039091169033903090612acf565b5061075f612b40565b505050565b60408051602081019091526000815261077b61289c565b6106ae82612b55565b61078c61289c565b610794612a40565b600061079f33612a4f565b905080600101546000036107b257600080fd5b600281015460405133907f74d8a3658feb89d1a5c335229bbbfc3bbcfaf492769feb7aa4cd2d92efeaf69190600090a36107eb81612c10565b506107f4612b40565b565b6000546001600160a01b031661080b57600080fd5b60005460405163117c72b360e11b8152600481018390526001600160a01b03909116906322f8e56690602401600060405180830381600087803b15801561085157600080fd5b505af1158015610865573d6000803e3d6000fd5b5050505050565b60006108846040518060200160405280600081525090565b61088c612999565b61089461289c565b61089c612a40565b826108a5610e0c565b11156108ef5760405162461bcd60e51b81526020600482015260146024820152734d696e656420616674657220646561646c696e6560601b60448201526064015b60405180910390fd5b60006108fa88612a4f565b905061092261090e36879003870187613d57565b604080516020810190915283548152612c2a565b915061092f826000612823565b61093857600080fd5b604080516020810190915260038201548152600061095581612c4f565b604080516020810190915260028501549081905283519192501161099357604080516020810190915260028401548152610990908390612c84565b90505b6040805160208101909152835481526109c8826109bf836109b9368e90038e018e613d57565b90612cae565b90519051101590565b610a145760405162461bcd60e51b815260206004820152601e60248201527f4352206973206d6f7265207468616e206d6178206c69712e207072696365000060448201526064016108e6565b610a3482610a2b836109b9368f90038f018f613d57565b90519051111590565b610a805760405162461bcd60e51b815260206004820152601e60248201527f4352206973206c657373207468616e206d696e206c69712e207072696365000060448201526064016108e6565b50604080516020810190915260008152604080516020810190915260008152604080516020810190915285548152600090610abc908890612ceb565b9050610ac88582612cae565b9250610ad48482612cae565b604080516020810190915260028801548152909250600090610af69083612cae565b9050610b048e898684612d27565b50506040805160208082018352600d54825282519081019092526010548252610b3791610b31908561283a565b9061283a565b516010556001600160a01b038c166000818152600f6020908152604091829020805483516101208101855294855233928501929092529099509190810160018152602001610b83610e0c565b815260200188815260200184815260200183815260200160006001600160a01b03168152602001610bb46000612c4f565b90528154600181810184556000938452602093849020835160089093020180546001600160a01b039384166001600160a01b0319918216178255948401519181018054929093169482168517835560408401519394909392916001600160a81b03191617600160a01b836004811115610c2f57610c2f613e6a565b021790555060608201516002820155608082015151600382015560a082015151600482015560c082015151600582015560e08201516006820180546001600160a01b0319166001600160a01b0390921691909117905561010090910151516007909101556040805160208101909152600b548152600186015415801590610cc05750610cb9610e0c565b8660010154115b8015610cce57508051875110155b15610ced57610ce7600a54610ce1610e0c565b90612884565b60018701555b87336001600160a01b03168e6001600160a01b03167f39b4371645b4132767fd76a1aad3108ff95c20d7b687b24d171555f5459a75978a6000015187600001518760000151610d3a610e0c565b60408051948552602085019390935291830152606082015260800160405180910390a48651600454610d7b916001600160a01b039091169033903090612acf565b600480548851604051630852cd8d60e31b8152928301526001600160a01b0316906342966c6890602401600060405180830381600087803b158015610dbf57600080fd5b505af1158015610dd3573d6000803e3d6000fd5b5050600d54600554610df493506001600160a01b0316915033903090612acf565b505050505050610e02612b40565b9550959350505050565b600080546001600160a01b031615610e985760008054906101000a90046001600160a01b03166001600160a01b03166329cb924d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e939190614048565b905090565b504290565b90565b604080516020810190915260008152610eb7612999565b610ebf61289c565b610ec7612a40565b6000610ed233612a4f565b90508060010154600014158015610ef45750610eec610e0c565b816001015411155b610efd57600080fd5b60408051602080820183526000825282518082018452600385015481528351918201909352600284015490819052915190911115610f4d5750604080516020810190915260038201548152610f61565b506040805160208101909152600282015481525b610f6b8282612e28565b9250610f7682612c10565b8251600554610f92916001600160a01b03909116903390612e76565b825160405133907fc86c3298cb79f486674dca87d9247e88b76146160e7d412cc59b26b14c358a6890600090a35050610e9d612b40565b610fd1612999565b610fd9612ea6565b610fe161289c565b610fe9612a40565b610ff1612f12565b6001600160a01b0316336001600160a01b03161461100e57600080fd5b6000805460ff60a81b1916600160a81b17905560095461102c610e0c565b600981905561103a90612fa0565b60095460405133917fd39eeb7157d9c446579a0893ecf9ecd87d1f466cdb270c6a189cf38ca1e30f489161107691858252602082015260400190565b60405180910390a2506107f4612b40565b6110c46040805160808101825260006060820181815282528251602080820185528282528084019190915283519081018452908152909182015290565b82826110d0828261307a565b6110d861289c565b6110e0612a40565b60006110ec8587613130565b90506110f88686613208565b60408051602080820183526007840154825282519081019092526003830154825260009161112591612cae565b604080516020810190915260155481529091506000906111459083612cae565b604080516020810190915260145481529091506000906111659084612cae565b604080516020808201835260135482528251908101909252600487015482529192506000916111949190612cae565b90506111d36040805160808101825260006060820181815282528251602080820185528282528084019190915283519081018452908152909182015290565b60036001870154600160a01b900460ff1660048111156111f5576111f5613e6a565b0361132c576040805160208101909152600d54815261121890610b31868561283a565b60408083019190915280516020810190915260048701548152611241908490610b319088612c84565b8152611257846112518786612c84565b90612c84565b6020808301829052604080519182019052601054815261127691612c84565b516010819055815160408051602081019091529182526112969190612c84565b5160108190556040808301518151602081019092529181526112b791612c84565b5160105560068601546040820151516005546112e1926001600160a01b0391821692911690612e76565b6001860154602082015151600554611307926001600160a01b0391821692911690612e76565b8554815151600554611327926001600160a01b0391821692911690612e76565b611461565b60046001870154600160a01b900460ff16600481111561134e5761134e613e6a565b036113c9576040805160208082018352600d54825282519081019092526004880154825261138091610b31908561283a565b6020808301829052604080519182019052601054815261139f91612c84565b516010556001860154602082015151600554611327926001600160a01b0391821692911690612e76565b600180870154600160a01b900460ff1660048111156113ea576113ea613e6a565b03611461576040805160208082018352600d548252825190810190925260048801548252611418919061283a565b6020808301829052604080519182019052601054815261143791612c84565b516010556001860154602082015151600554611461926001600160a01b0391821692911690612e76565b6001860154600160a01b900460ff16600481111561148157611481613e6a565b602082810151516040808501515185515160078c015483519485529484019190915290820152606081019190915233907fb479588a37dc7f6bac1c91587fcfc539cac4949cf26bb536ad9c8d061f00f50d9060800160405180910390a36001600160a01b038a166000908152600f6020526040902080548c90811061150857611508614061565b60009182526020822060089091020180546001600160a01b031990811682556001820180546001600160a81b03191690556002820183905560038201839055600482018390556005820183905560068201805490911690556007015597505050505050611573612b40565b505092915050565b611583612999565b61158b61289c565b611593612a40565b600061159e33612a4f565b905080600401546000146115b157600080fd5b60006115c1600a54610ce1610e0c565b905060095481106115d157600080fd5b6004820181905560405133907fbf457c80c8bf299d5c48272c4c1168bf87b33d83b13f0ab9aac332ce1161ed1e90600090a250506107f4612b40565b604080516020810190915260008152611624612999565b3361162e816129f1565b61163661289c565b61163e612a40565b611649836000612823565b61165257600080fd5b600061165d33612a4f565b90506116698185613367565b80516040519194509033907f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6590600090a382516005546116b6916001600160a01b03909116903390612e76565b506116bf612b40565b50919050565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611721575060408051601f3d908101601f1916820190925261171e91810190614077565b60015b6106ae57506012919050565b600f602052816000526040600020818154811061174957600080fd5b600091825260209182902060089190910201805460018201546002830154604080518087018252600386015481528151808801835260048701548152825180890184526005880154815260068801548451998a0190945260079097015488526001600160a01b0395861699508585169850600160a01b90940460ff169692959094909291169089565b6117da612999565b336117e4816129f1565b6117ec61289c565b6117f4612a40565b6118356118016000612c4f565b6001600160a01b03841660009081526001602090815260409182902082519182019092526003909101548152905190511490565b61183e57600080fd5b600061184933612a4f565b9050806004015460001415801561186b5750611863610e0c565b816004015411155b61187457600080fd5b600060048083018281556001600160a01b038616808452600160208190526040808620875481558288015481840155600280890154818301556003808a0154818401559554918701919091553380885282882088815593840188905590830187905593820186905593018490559151919290917ff1a2dcf23621f1a96185c79d39a5776b5ba3dadbea70c5aa86d84c17c7e9418e9190a36040516001600160a01b038416907ff60993fa76f94c9e0a803526ee6e1314814ed4d2b0d223febf1436b36897fb3790600090a260405133907fcad20625296d189a6fc6e5b39d0d544e5bd99dbda0c8f2f0ecffef3e0fbcc28290600090a250611973612b40565b5050565b61197f612999565b33611989816129f1565b61199161289c565b611999612a40565b60006119a433612a4f565b6040805160208101909152815490819052845191925010156119c557600080fd5b6040805160208101909152815481526000906119e19085612c84565b6040805160208101909152600b549081905281519192501115611a0357600080fd5b8051825560408051602081019091526002548152611a219085612c84565b516002558051845160405133907f77c6871227e5d2dec8dadd5354f78453203e22e669cd0ec4c19d9a8c5edb31d090600090a48351600454611a72916001600160a01b039091169033903090612acf565b600480548551604051630852cd8d60e31b8152928301526001600160a01b0316906342966c6890602401600060405180830381600087803b158015611ab657600080fd5b505af1158015611aca573d6000803e3d6000fd5b505050505050611973612b40565b60408051602081019091526000815233611af1816129f1565b611af961289c565b611b01612a40565b6000611b0c33612a4f565b604080516020810190915281549081905285519192501015611b2d57600080fd5b604080516020810190915281548152600090611b4a908690612ceb565b604080516020810190915260038401548152909150600090611b6d908390612cae565b6040805160208101909152845490819052875191925003611b9857611b91336133fd565b9450611c1a565b611ba28382612e28565b604080516020810190915284548152909550600090611bc19088612c84565b6040805160208101909152600b549081905281519192501115611bf65760405162461bcd60e51b81526004016108e69061409a565b8051845560408051602081019091526002548152611c149088612c84565b51600255505b8551855160405133907fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a92990600090a48451600554611c65916001600160a01b03909116903390612e76565b8551600454611c83916001600160a01b039091169033903090612acf565b600480548751604051630852cd8d60e31b8152928301526001600160a01b0316906342966c6890602401600060405180830381600087803b158015611cc757600080fd5b505af1158015611cdb573d6000803e3d6000fd5b505050505050506116bf612b40565b6000611cf461289c565b6106ae826134ff565b60088054611d0a906140d1565b80601f0160208091040260200160405190810160405280929190818152602001828054611d36906140d1565b8015611d835780601f10611d5857610100808354040283529160200191611d83565b820191906000526020600020905b815481529060010190602001808311611d6657829003601f168201915b505050505081565b611d93612999565b611d9b61289c565b611da3612a40565b33600090815260016020908152604091829020825191820190925260038201548152611df190611dd3908561283a565b604080516020810190915283548152611dec908561283a565b61359c565b80611e015750611e01838361359c565b611e4d5760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e7420636f6c6c61746572616c00000000000000000060448201526064016108e6565b600181015415611e945760405162461bcd60e51b815260206004820152601260248201527114195b991a5b99c81dda5d1a191c985dd85b60721b60448201526064016108e6565b604080516020810190915281548152611eae9060006135ed565b15611f11576040805160208101909152600b549081905282511015611ee55760405162461bcd60e51b81526004016108e69061409a565b60405133907ff60993fa76f94c9e0a803526ee6e1314814ed4d2b0d223febf1436b36897fb3790600090a25b611f1b8184612a77565b50604080516020810190915281548152611f35908361283a565b51815560408051602081019091526002548152611f52908361283a565b516002558151835160405133907f4b82aa16e071a61de1a6b9aeec9edab0356331f8122c78683b469ac8e685dabc90600090a48251600554611fa3916001600160a01b039091169033903090612acf565b6004805483516040516340c10f1960e01b8152339381019390935260248301526001600160a01b0316906340c10f19906044016020604051808303816000875af1158015611ff5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120199190614105565b61202257600080fd5b50611973612b40565b612033613604565b61203b612ea6565b61204361289c565b61204b612a40565b6000805460ff60a81b1916600160a81b17905560095461206a90612fa0565b60405133907f18600820405d6cf356e3556301762ca32395e72d8c81494fa344835c9da3633d90600090a26107f4612b40565b60606120a761289c565b6001600160a01b0382166000908152600f6020908152604080832080548251818502810185019093528083529193909284015b828210156121d557600084815260209081902060408051610120810182526008860290920180546001600160a01b039081168452600182015490811694840194909452919290830190600160a01b900460ff16600481111561213e5761213e613e6a565b600481111561214f5761214f613e6a565b815260028201546020808301919091526040805180830182526003850154815281840152805180830182526004850154815260608401528051808301825260058501548152608084015260068401546001600160a01b031660a08401528051808301909152600790930154835260c09091019190915290825260019290920191016120da565b505050509050919050565b60408051602081019091526000815282826121fb828261365d565b61220361289c565b61220b612a40565b60006122178587613130565b604080516020808201835260135482528251908101909252600483015482529192506000916122469190612cae565b60408051602081019091526010548152909150612263908261283a565b5160105560018201805460ff60a01b1916600160a11b1790556006820180546001600160a01b03191633179055600282015461229e90612fa0565b60018201548151604080518a8152602081019290925233926001600160a01b0390811692908a16917fcaca181ccad7979cf36ed4fc921e496001ab5264608f0fac7007ae1b43d36102910160405180910390a46040805160208101909152600d54815261230c90829061283a565b815160055491965061232b916001600160a01b03169033903090612acf565b5050611573612b40565b61233d612999565b61234561289c565b61234d612a40565b600061235833612a4f565b9050806004015460000361236b57600080fd5b60405133907f2e5702420c76e041698ad7ba57a9ff5cadccf647ea8d96e6007a40b5b2662f5690600090a260006004909101556107f4612b40565b6123ae612999565b336123b8816129f1565b6123c061289c565b6123c8612a40565b60006123d333612a4f565b90506123e0836000612823565b801561240057506040805160208101909152600382015490819052835111155b61240957600080fd5b6000612419600a54610ce1610e0c565b9050600954811061242957600080fd5b6001820181905583516002830181905560405133907fd33b726e11d2c5d38e6702b16613df0160a07f7ba5185455ee3c45d0494fab1190600090a35050611973612b40565b61247833826106b4565b50565b604080516020810190915260008152612492613604565b61249a61289c565b6124a2612a40565b60008054600160a81b900460ff1660028111156124c1576124c1613e6a565b036125035760405162461bcd60e51b81526020600482015260126024820152712ab732bc3834b932b2103837b9b4ba34b7b760711b60448201526064016108e6565b6002600054600160a81b900460ff16600281111561252357612523613e6a565b1461254b576125336009546136f3565b51600c556000805460ff60a81b1916600160a91b1790555b6040805160208101918290526004546370a0823160e01b90925233602482015260009181906001600160a01b03166370a0823160448301602060405180830381865afa15801561259f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c39190614048565b90526040805160208101909152600c5481529091506000906125e6908390612cae565b33600090815260016020908152604080832081519283019091526003810154825292935061261391612823565b156126f1576040805160208082018352600c54825282519081019092528254825260009161264091612cae565b604080516020810190915260038401548152909150600061266383835190511090565b61267c5760405180602001604052806000815250612686565b6126868284612c84565b9050612692858261283a565b336000818152600160208190526040808320838155918201839055600282018390556003820183905560049091018290555192975090917fcad20625296d189a6fc6e5b39d0d544e5bd99dbda0c8f2f0ecffef3e0fbcc2829190a25050505b6040805160208101909152600354815260009061270e9084612c2a565b6040805160208101909152600354815290915061272b9082612c84565b5160035560408051602081019091526002548152909450849061274e9085612c84565b516002558351855160405133907f9d349c102bec959fb7f20f9a3621e015819d3ae4ed6e9afd1f56a69d5845600690600090a4845160055461279d916001600160a01b03909116903390612e76565b83516004546127bb916001600160a01b039091169033903090612acf565b600480548551604051630852cd8d60e31b8152928301526001600160a01b0316906342966c6890602401600060405180830381600087803b1580156127ff57600080fd5b505af1158015612813573d6000803e3d6000fd5b5050505050505050610e9d612b40565b600061282e82612c4f565b51835111905092915050565b60408051602081019091526000815260408051602081019091528251845182916128649190612884565b90529392505050565b600061287882612c4f565b51835110905092915050565b60006106ab828461413d565b60006106ab8284614150565b600054600160a01b900460ff166107f45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108e6565b604080516020810190915260008152600e546001600160a01b03163b61291c5750816106ae565b600e5460405162ff49b960e41b815284516004820152602481018490526001600160a01b0390911690630ff49b9090604401602060405180830381865afa925050508015612987575060408051601f3d908101601f191682019092526129849181019061416f565b60015b6129925750816106ae565b90506106ae565b6009546129a4610e0c565b106107f45760405162461bcd60e51b815260206004820152601860248201527f4f6e6c792063616c6c61626c65207072652d657870697279000000000000000060448201526064016108e6565b6129fa81612a4f565b60010154156124785760405162461bcd60e51b815260206004820152601260248201527114195b991a5b99c81dda5d1a191c985dd85b60721b60448201526064016108e6565b6000805460ff60a01b19169055565b600081612a5b81613838565b50506001600160a01b0316600090815260016020526040902090565b604080516020810190915260008152604080516020810190915260038401548152612aa2908361283a565b51600380850191909155604080516020810190915290548152612ac5908361283a565b5160035550919050565b6040516001600160a01b0380851660248301528316604482015260648101829052612b3a9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526138b6565b50505050565b6000805460ff60a01b1916600160a01b179055565b604080516020810190915260008152600e546001600160a01b03163b612b8a5750506040805160208101909152601254815290565b600e54604051632a31263760e01b81528351600482015260125460248201526001600160a01b0390911690632a31263790604401602060405180830381865afa925050508015612bf7575060408051601f3d908101601f19168201909252612bf49181019061416f565b60015b6106ae5750506040805160208101909152601254815290565b612c1a6000612c4f565b5160028201556000600190910155565b6040805160208101909152600081528151835110612c4857816106ab565b5090919050565b604080516020810190915260008152604080516020810190915280612c7c84670de0b6b3a7640000612890565b905292915050565b60408051602081019091526000815260408051602081019091528251845182916128649190613988565b6040805160208101909152600081526040805160208101909152825184518291670de0b6b3a764000091612ce191612890565b61286491906141bf565b604080516020810190915260008152604080516020810190915282518451829161286491612d2190670de0b6b3a7640000612890565b90613994565b6000612d3285612a4f565b60408051602081019091528154908190528551919250148015612d68575060408051602081019091526003820154908190528351145b15612d7d57612d76856133fd565b5050612b3a565b612d878184612e28565b50604080516020810190915281548152600090612da49086612c84565b6040805160208101909152600b549081905281519192501115612dd95760405162461bcd60e51b81526004016108e69061409a565b80518255604080516020810190915260028301548152612df99084612c84565b51600280840191909155604080516020810190915290548152612e1c9086612c84565b51600255505050505050565b604080516020810190915260008152604080516020810190915260038401548152612e539083612c84565b51600380850191909155604080516020810190915290548152612ac59083612c84565b6040516001600160a01b03831660248201526044810182905261075f90849063a9059cbb60e01b90606401612b03565b60008054600160a81b900460ff166002811115612ec557612ec5613e6a565b146107f45760405162461bcd60e51b815260206004820152601a60248201527f436f6e7472616374207374617465206973206e6f74204f50454e00000000000060448201526064016108e6565b6006546040516302abf57960e61b81527f46696e616e6369616c436f6e74726163747341646d696e00000000000000000060048201526000916001600160a01b03169063aafd5e40906024015b602060405180830381865afa158015612f7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9391906141e1565b6000612faa6139a0565b600d54600554919250612fca916001600160a01b03169033903090612acf565b600d54600554612fe7916001600160a01b039091169083906139e4565b806001600160a01b03166311df92f1612fff846134ff565b600554600d546040516001600160e01b031960e086901b168152613037939288926008926001600160a01b03909216916004016142a2565b6020604051808303816000875af1158015613056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075f9190614048565b60006130868284613130565b600181810154919250600160a01b90910460ff16908160048111156130ad576130ad613e6a565b11806130e457506130bc610e0c565b6130c583613a96565b111580156130e4575060018160048111156130e2576130e2613e6a565b145b612b3a5760405162461bcd60e51b815260206004820152601c60248201527f4c69717569646174696f6e206e6f7420776974686472617761626c650000000060448201526064016108e6565b6001600160a01b0382166000908152600f6020526040812080548310801561319a5750600081848154811061316757613167614061565b906000526020600020906008020160010160149054906101000a900460ff16600481111561319757613197613e6a565b14155b6131df5760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081b1a5c5d5a59185d1a5bdb88125160521b60448201526064016108e6565b8083815481106131f1576131f1614061565b906000526020600020906008020191505092915050565b60006132148284613130565b905060026001820154600160a01b900460ff16600481111561323857613238613e6a565b1461324257505050565b61324f81600201546136f3565b5160078201819055604080516020808201835292815281519283019091526003830154825260009161328091612cae565b6040805160208101909152600784015481529091506000906132ac906132a590612b55565b8390612cae565b604080516020810190915260058501549081905281519192501015806132d35760046132d6565b60035b60018501805460ff60a01b1916600160a01b8360048111156132fa576132fa613e6a565b021790555060018401546006850154604080516001600160a01b039283168152602081018a9052841515818301529051928216929188169133917f6c5582199868fabbe697f9ea10abe481bacf53ac78c02a965b34dff82fd20e3b919081900360600190a4505050505050565b6040805160208101909152600081526040805160208101909152600384015481526133929083612c84565b516003808501919091556040805160208101909152905481526133b59083612c84565b516003556133c283613ab1565b6116bf5760405162461bcd60e51b815260206004820152600c60248201526b21a9103132b637bb9023a1a960a11b60448201526064016108e6565b604080516020810190915260008152600061341783612a4f565b6040805160208082018352600380548084528451808401865291860154825284519283019094529281529293509161344e91612c84565b51600355604080516020808201835284548252825190810190925260025482526134789190612c84565b5160029081556001600160a01b038516600081815260016020819052604080832083815591820183905593810182905560038101829055600401819055915190917fcad20625296d189a6fc6e5b39d0d544e5bd99dbda0c8f2f0ecffef3e0fbcc28291a2604080516020810190915260035481526134f7908290612c84565b949350505050565b600e546000906001600160a01b03163b61351b57505060075490565b600e5460075460405163f19371b760e01b81526001600160a01b039092169163f19371b791613557918690600401918252602082015260400190565b602060405180830381865afa925050508015613590575060408051601f3d908101601f1916820190925261358d91810190614048565b60015b6106ae57505060075490565b604080516020808201835260035482528251908101909252600254825260009182916135c791613adc565b905060006135d58585613adc565b90506135e382825190511190565b1595945050505050565b60006135f882612c4f565b51835114905092915050565b60095461360f610e0c565b10156107f45760405162461bcd60e51b815260206004820152601960248201527f4f6e6c792063616c6c61626c6520706f73742d6578706972790000000000000060448201526064016108e6565b60006136698284613130565b905061367481613a96565b61367c610e0c565b1080156136a75750600180820154600160a01b900460ff1660048111156136a5576136a5613e6a565b145b61075f5760405162461bcd60e51b815260206004820152601a60248201527f4c69717569646174696f6e206e6f742064697370757461626c6500000000000060448201526064016108e6565b604080516020810190915260008152600061370c6139a0565b9050806001600160a01b031663bc58ccaa30613727866134ff565b8660086040518563ffffffff1660e01b815260040161374994939291906142de565b602060405180830381865afa158015613766573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061378a9190614105565b61379357600080fd5b6000816001600160a01b03166353b592396137ad866134ff565b8660086040518463ffffffff1660e01b81526004016137ce93929190614315565b6020604051808303816000875af11580156137ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138119190614048565b90506000811215613820575060005b6134f7604051806020016040528083815250856128f5565b6001600160a01b0381166000908152600160209081526040808320815192830190915260030154815261386a91612823565b6124785760405162461bcd60e51b815260206004820152601a60248201527f506f736974696f6e20686173206e6f20636f6c6c61746572616c00000000000060448201526064016108e6565b600061390b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613b0e9092919063ffffffff16565b80519091501561075f57808060200190518101906139299190614105565b61075f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108e6565b60006106ab828461433d565b60006106ab82846141bf565b6006546040516302abf57960e61b81526f4f7074696d69737469634f7261636c6560801b60048201526000916001600160a01b03169063aafd5e4090602401612f5f565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015613a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a599190614048565b613a63919061413d565b6040516001600160a01b038516602482015260448101829052909150612b3a90859063095ea7b360e01b90606401612b03565b60006106ae601154836002015461288490919063ffffffff16565b6040805160208082018352600384015482528251908101909252825482526000916106ae919061359c565b604080516020810190915260008152613af6826000612823565b613b04576129926000612c4f565b6129928383612ceb565b6060613b1d8484600085613b27565b90505b9392505050565b606082471015613b885760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108e6565b6001600160a01b0385163b613bdf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108e6565b600080866001600160a01b03168587604051613bfb9190614350565b60006040518083038185875af1925050503d8060008114613c38576040519150601f19603f3d011682016040523d82523d6000602084013e613c3d565b606091505b5091509150613c4d828286613c58565b979650505050505050565b60608315613c67575081613b20565b825115613c775782518084602001fd5b8160405162461bcd60e51b81526004016108e69190613f44565b600060208284031215613ca357600080fd5b6040516020810181811067ffffffffffffffff82111715613cd457634e487b7160e01b600052604160045260246000fd5b6040529135825250919050565b60008060408385031215613cf457600080fd5b613cfe8484613c91565b946020939093013593505050565b6001600160a01b038116811461247857600080fd5b60008060408385031215613d3457600080fd5b8235613d3f81613d0c565b9150613d4e8460208501613c91565b90509250929050565b600060208284031215613d6957600080fd5b6106ab8383613c91565b600060208284031215613d8557600080fd5b5035919050565b6000602082840312156116bf57600080fd5b600080600080600060a08688031215613db657600080fd5b8535613dc181613d0c565b9450613dd08760208801613d8c565b9350613ddf8760408801613d8c565b9250613dee8760608801613d8c565b949793965091946080013592915050565b60008060408385031215613e1257600080fd5b823591506020830135613e2481613d0c565b809150509250929050565b600060208284031215613e4157600080fd5b8135613b2081613d0c565b60008060408385031215613e5f57600080fd5b8235613cfe81613d0c565b634e487b7160e01b600052602160045260246000fd5b60058110613e9057613e90613e6a565b9052565b6001600160a01b038a811682528981166020830152610120820190613ebc604084018b613e80565b606083019890985295516080820152935160a0850152915160c084015290931660e08201529151610100909201919091529392505050565b60005b83811015613f0f578181015183820152602001613ef7565b50506000910152565b60008151808452613f30816020860160208601613ef4565b601f01601f19169290920160200192915050565b6020815260006106ab6020830184613f18565b60008060408385031215613f6a57600080fd5b613d3f8484613c91565b6020810160038310613f8857613f88613e6a565b91905290565b602080825282518282018190526000919060409081850190868401855b8281101561403b57815180516001600160a01b03908116865287820151168786015285810151613fdd87870182613e80565b5060608181015190860152608080820151519086015260a080820151519086015260c080820151519086015260e0808201516001600160a01b0316908601526101009081015151908501526101209093019290850190600101613fab565b5091979650505050505050565b60006020828403121561405a57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561408957600080fd5b815160ff81168114613b2057600080fd5b6020808252601e908201527f42656c6f77206d696e696d756d2073706f6e736f7220706f736974696f6e0000604082015260600190565b600181811c908216806140e557607f821691505b6020821081036116bf57634e487b7160e01b600052602260045260246000fd5b60006020828403121561411757600080fd5b81518015158114613b2057600080fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156106ae576106ae614127565b600081600019048311821515161561416a5761416a614127565b500290565b60006020828403121561418157600080fd5b6040516020810181811067ffffffffffffffff821117156141b257634e487b7160e01b600052604160045260246000fd5b6040529151825250919050565b6000826141dc57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156141f357600080fd5b8151613b2081613d0c565b8054600090600181811c908083168061421857607f831692505b6020808410820361423957634e487b7160e01b600052602260045260246000fd5b83885260208801828015614254576001811461426a57614295565b60ff198716825285151560051b82019750614295565b60008981526020902060005b8781101561428f57815484820152908601908401614276565b83019850505b5050505050505092915050565b85815284602082015260a0604082015260006142c160a08301866141fe565b6001600160a01b0394909416606083015250608001529392505050565b60018060a01b038516815283602082015282604082015260806060820152600061430b60808301846141fe565b9695505050505050565b83815282602082015260606040820152600061433460608301846141fe565b95945050505050565b818103818111156106ae576106ae614127565b60008251614362818460208701613ef4565b919091019291505056fea2646970667358221220de46f9f123e0a263791e3a381ac83eabe8d478297c3c99afc735e1d86add5b8064736f6c63430008100033a2646970667358221220c0c0e04e79bb78480e95beead6b15fb3dcdd8c8bb0ae7b36de465c0033a0b45a64736f6c63430008100033",
  "deployedBytecode": "0x7300000000000000000000000000000000000000003014608060405260043610620000375760003560e01c8063bdc3f244146200003c575b600080fd5b8180156200004957600080fd5b50620000616200005b36600462000209565b6200007d565b6040516001600160a01b03909116815260200160405180910390f35b600080826040516200008f90620000c0565b6200009b9190620003df565b604051809103906000f080158015620000b8573d6000803e3d6000fd5b509392505050565b614df6806200051e83390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff811182821017156200010b576200010b620000ce565b60405290565b80356001600160a01b03811681146200012957600080fd5b919050565b600082601f8301126200014057600080fd5b813567ffffffffffffffff808211156200015e576200015e620000ce565b604051601f8301601f19908116603f01168101908282118183101715620001895762000189620000ce565b81604052838152866020858801011115620001a357600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215620001d657600080fd5b6040516020810181811067ffffffffffffffff82111715620001fc57620001fc620000ce565b6040529135825250919050565b6000602082840312156200021c57600080fd5b813567ffffffffffffffff808211156200023557600080fd5b9083019061020082860312156200024b57600080fd5b62000255620000e4565b8235815260208301356020820152620002716040840162000111565b6040820152620002846060840162000111565b6060820152620002976080840162000111565b6080820152620002aa60a0840162000111565b60a0820152620002bd60c0840162000111565b60c082015260e083013560e08201526101008084013583811115620002e157600080fd5b620002ef888287016200012e565b82840152505061012091506200030886838501620001c3565b8282015261014091506200031f86838501620001c3565b828201526101609150818301358282015261018091506200034386838501620001c3565b828201526101a091506200035a86838501620001c3565b828201526101c091506200037186838501620001c3565b828201526101e091506200038886838501620001c3565b91810191909152949350505050565b6000815180845260005b81811015620003bf57602081850181015186830182015201620003a1565b506000602082860101526020601f19601f83011685010191505092915050565b602081528151602082015260208201516040820152600060408301516200041160608401826001600160a01b03169052565b5060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516001600160a01b03811660c08401525060c08301516001600160a01b03811660e08401525060e0830151610100838101919091528301516102006101208085018290526200049461022086018462000397565b90860151909250610140620004ab86820183519052565b8601519050610160620004c086820183519052565b8601516101808681019190915286015190506101a0620004e281870183519052565b86015190506101c0620004f786820183519052565b86015190506101e06200050c86820183519052565b90950151519301929092525091905056fe60806040523480156200001157600080fd5b5060405162004df638038062004df68339810160408190526200003491620006b2565b8051602082015160408301516060840151608085015160e086015161012087015161014088015160a089015160c08a01516101008b0151600080546001600160a81b0319166001600160a01b03851617600160a01b1790558b9a99989796959493929190620000a2620002ea565b620000b56000805460ff60a01b19169055565b600680546001600160a01b0319166001600160a01b038916179055620000da6200034a565b8b11620000e657600080fd5b620000f0620003df565b6001600160a01b03166390978d1b876040518263ffffffff1660e01b81526004016200011e91815260200190565b602060405180830381865afa1580156200013c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016291906200083f565b6200016c57600080fd5b60098b9055600a8a9055600480546001600160a01b03808b166001600160a01b03199283161790925560058054928c16929091169190911790558451600b558351600d5560078690556008620001c38282620008f2565b50600e80546001600160a01b0319166001600160a01b038416179055620001f86000805460ff60a01b1916600160a01b179055565b505050505050505050505062000213620002ea60201b60201c565b620002266000805460ff60a01b19169055565b6200024660018261018001516200046f60201b620028231790919060201c565b6200025057600080fd5b6200028e60016200027a836101e00151846101c001516200048960201b6200283a1790919060201c565b620004ce60201b6200286d1790919060201c565b6200029857600080fd5b610160810151601155610180810151516012556101a0810151516013556101c0810151516014556101e081015151601555620002e26000805460ff60a01b1916600160a01b179055565b505062000a44565b600054600160a01b900460ff16620003485760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640160405180910390fd5b565b600080546001600160a01b031615620003da5760008054906101000a90046001600160a01b03166001600160a01b03166329cb924d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003d59190620009be565b905090565b504290565b6006546040516302abf57960e61b81527f4964656e74696669657257686974656c6973740000000000000000000000000060048201526000916001600160a01b03169063aafd5e4090602401602060405180830381865afa15801562000449573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003d59190620009d8565b60006200047c82620004e7565b5183511190505b92915050565b6040805160208101909152600081526040518060200160405280620004c5846000015186600001516200052b60201b620028841790919060201c565b90529392505050565b6000620004db82620004e7565b51835110905092915050565b604080516020810190915260008152604051806020016040528062000523670de0b6b3a7640000856200054060201b620028901790919060201c565b905292915050565b600062000539828462000a0c565b9392505050565b600062000539828462000a22565b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b03811182821017156200058a576200058a6200054e565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620005bb57620005bb6200054e565b604052919050565b80516001600160a01b0381168114620005db57600080fd5b919050565b600082601f830112620005f257600080fd5b81516001600160401b038111156200060e576200060e6200054e565b602062000624601f8301601f1916820162000590565b82815285828487010111156200063957600080fd5b60005b83811015620006595785810183015182820184015282016200063c565b506000928101909101919091529392505050565b6000602082840312156200068057600080fd5b604051602081016001600160401b0381118282101715620006a557620006a56200054e565b6040529151825250919050565b600060208284031215620006c557600080fd5b81516001600160401b0380821115620006dd57600080fd5b908301906102008286031215620006f357600080fd5b620006fd62000564565b82518152602083015160208201526200071960408401620005c3565b60408201526200072c60608401620005c3565b60608201526200073f60808401620005c3565b60808201526200075260a08401620005c3565b60a08201526200076560c08401620005c3565b60c082015260e083015160e082015261010080840151838111156200078957600080fd5b6200079788828701620005e0565b8284015250506101209150620007b0868385016200066d565b828201526101409150620007c7868385016200066d565b82820152610160915081830151828201526101809150620007eb868385016200066d565b828201526101a0915062000802868385016200066d565b828201526101c0915062000819868385016200066d565b828201526101e0915062000830868385016200066d565b91810191909152949350505050565b6000602082840312156200085257600080fd5b815180151581146200053957600080fd5b600181811c908216806200087857607f821691505b6020821081036200089957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620008ed57600081815260208120601f850160051c81016020861015620008c85750805b601f850160051c820191505b81811015620008e957828155600101620008d4565b5050505b505050565b81516001600160401b038111156200090e576200090e6200054e565b62000926816200091f845462000863565b846200089f565b602080601f8311600181146200095e5760008415620009455750858301515b600019600386901b1c1916600185901b178555620008e9565b600085815260208120601f198616915b828110156200098f578886015182559484019460019091019084016200096e565b5085821015620009ae5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215620009d157600080fd5b5051919050565b600060208284031215620009eb57600080fd5b6200053982620005c3565b634e487b7160e01b600052601160045260246000fd5b80820180821115620004835762000483620009f6565b600081600019048311821515161562000a3f5762000a3f620009f6565b500290565b6143a28062000a546000396000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c80635aa266c9116101675780639f43ddd2116100ce578063bc12163011610087578063bc1216301461063e578063d1e92c1114610651578063e3c0f9cb14610664578063edfa9a9b1461066e578063f0391daf14610678578063fcccedc71461068257600080fd5b80639f43ddd2146105de5780639ff4dea8146105e7578063a1c4d1e7146105f0578063a765fbea14610610578063b795f0d414610623578063b9a3c84c1461062b57600080fd5b806379599f961161012057806379599f96146105855780637e398c221461058d57806385209ee01461059757806392120aec146105b85780639375f0e9146105c257806397523661146105d557600080fd5b80635aa266c9146105115780635f1af1ca1461052457806362b5f7f514610537578063655990571461054a5780636ba2f9921461055f5780637048594b1461057257600080fd5b80632e154f2e1161020b57806343e4771b116101c457806343e4771b1461041457806348e30c3f1461041e5780634ead6e51146104285780634f8c48471461044d57806355f57510146104755780635617151c146104fe57600080fd5b80632e154f2e146103a757806333a46ca2146103b15780633403c2fc146103b9578063360598e1146103c157806336980f58146103f95780633ee7a5ce1461040157600080fd5b80631c39c38d1161025d5780631c39c38d14610341578063226112801461035457806322f8e5661461035c57806325ed4dd81461036f57806329cb924d146103965780632d5436cf1461039e57600080fd5b8063081b314e146102a55780630c9229ca146102c25780630de15fd9146102cc5780630ff49b90146102f757806318928a0c14610319578063197f78481461032e575b600080fd5b6014546102af9081565b6040519081526020015b60405180910390f35b6002546102af9081565b6005546102df906001600160a01b031681565b6040516001600160a01b0390911681526020016102b9565b61030a610305366004613ce1565b61068a565b604051905181526020016102b9565b61032c610327366004613d21565b6106b4565b005b61030a61033c366004613d57565b610764565b6000546102df906001600160a01b031681565b61032c610784565b61032c61036a366004613d73565b6107f6565b61038261037d366004613d9e565b61086c565b6040805192835290516020830152016102b9565b6102af610e0c565b6102af60115481565b6013546102af9081565b61030a610ea0565b61032c610fc9565b6103d46103cf366004613dff565b611087565b60408051825151815260208084015151908201529181015151908201526060016102b9565b61032c61157b565b61030a61040f366004613d57565b61160d565b6003546102af9081565b6012546102af9081565b61043b610436366004613e2f565b6116c5565b60405160ff90911681526020016102b9565b61046061045b366004613e4c565b61172d565b6040516102b999989796959493929190613e94565b6104d1610483366004613e2f565b60016020818152600092835260409283902083518083018552815481529281015484518084018652600283015481528551938401909552600382015483526004909101549293909290919085565b6040805195518652602086019490945291519284019290925290516060830152608082015260a0016102b9565b61032c61050c366004613e2f565b6117d2565b61032c61051f366004613d57565b611977565b61030a610532366004613d57565b611ad8565b6102af610545366004613d73565b611cea565b610552611cfd565b6040516102b99190613f44565b61032c61056d366004613f57565b611d8b565b6004546102df906001600160a01b031681565b61032c61202b565b6015546102af9081565b6000546105ab90600160a81b900460ff1681565b6040516102b99190613f74565b600b546102af9081565b600e546102df906001600160a01b031681565b6102af60075481565b6102af60095481565b6102af600a5481565b6106036105fe366004613e2f565b61209d565b6040516102b99190613f8e565b61030a61061e366004613dff565b6121e0565b61032c612335565b6006546102df906001600160a01b031681565b61032c61064c366004613d57565b6123a6565b61032c61065f366004613d57565b61246e565b6010546102af9081565b600c546102af9081565b600d546102af9081565b61030a61247b565b6040805160208101909152600081526106a161289c565b6106ab83836128f5565b90505b92915050565b6106bc612999565b816106c6816129f1565b6106ce61289c565b6106d6612a40565b6106e1826000612823565b6106ea57600080fd5b60006106f584612a4f565b90506107018184612a77565b5082516040516001600160a01b038616907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c90600090a38251600554610756916001600160a01b039091169033903090612acf565b5061075f612b40565b505050565b60408051602081019091526000815261077b61289c565b6106ae82612b55565b61078c61289c565b610794612a40565b600061079f33612a4f565b905080600101546000036107b257600080fd5b600281015460405133907f74d8a3658feb89d1a5c335229bbbfc3bbcfaf492769feb7aa4cd2d92efeaf69190600090a36107eb81612c10565b506107f4612b40565b565b6000546001600160a01b031661080b57600080fd5b60005460405163117c72b360e11b8152600481018390526001600160a01b03909116906322f8e56690602401600060405180830381600087803b15801561085157600080fd5b505af1158015610865573d6000803e3d6000fd5b5050505050565b60006108846040518060200160405280600081525090565b61088c612999565b61089461289c565b61089c612a40565b826108a5610e0c565b11156108ef5760405162461bcd60e51b81526020600482015260146024820152734d696e656420616674657220646561646c696e6560601b60448201526064015b60405180910390fd5b60006108fa88612a4f565b905061092261090e36879003870187613d57565b604080516020810190915283548152612c2a565b915061092f826000612823565b61093857600080fd5b604080516020810190915260038201548152600061095581612c4f565b604080516020810190915260028501549081905283519192501161099357604080516020810190915260028401548152610990908390612c84565b90505b6040805160208101909152835481526109c8826109bf836109b9368e90038e018e613d57565b90612cae565b90519051101590565b610a145760405162461bcd60e51b815260206004820152601e60248201527f4352206973206d6f7265207468616e206d6178206c69712e207072696365000060448201526064016108e6565b610a3482610a2b836109b9368f90038f018f613d57565b90519051111590565b610a805760405162461bcd60e51b815260206004820152601e60248201527f4352206973206c657373207468616e206d696e206c69712e207072696365000060448201526064016108e6565b50604080516020810190915260008152604080516020810190915260008152604080516020810190915285548152600090610abc908890612ceb565b9050610ac88582612cae565b9250610ad48482612cae565b604080516020810190915260028801548152909250600090610af69083612cae565b9050610b048e898684612d27565b50506040805160208082018352600d54825282519081019092526010548252610b3791610b31908561283a565b9061283a565b516010556001600160a01b038c166000818152600f6020908152604091829020805483516101208101855294855233928501929092529099509190810160018152602001610b83610e0c565b815260200188815260200184815260200183815260200160006001600160a01b03168152602001610bb46000612c4f565b90528154600181810184556000938452602093849020835160089093020180546001600160a01b039384166001600160a01b0319918216178255948401519181018054929093169482168517835560408401519394909392916001600160a81b03191617600160a01b836004811115610c2f57610c2f613e6a565b021790555060608201516002820155608082015151600382015560a082015151600482015560c082015151600582015560e08201516006820180546001600160a01b0319166001600160a01b0390921691909117905561010090910151516007909101556040805160208101909152600b548152600186015415801590610cc05750610cb9610e0c565b8660010154115b8015610cce57508051875110155b15610ced57610ce7600a54610ce1610e0c565b90612884565b60018701555b87336001600160a01b03168e6001600160a01b03167f39b4371645b4132767fd76a1aad3108ff95c20d7b687b24d171555f5459a75978a6000015187600001518760000151610d3a610e0c565b60408051948552602085019390935291830152606082015260800160405180910390a48651600454610d7b916001600160a01b039091169033903090612acf565b600480548851604051630852cd8d60e31b8152928301526001600160a01b0316906342966c6890602401600060405180830381600087803b158015610dbf57600080fd5b505af1158015610dd3573d6000803e3d6000fd5b5050600d54600554610df493506001600160a01b0316915033903090612acf565b505050505050610e02612b40565b9550959350505050565b600080546001600160a01b031615610e985760008054906101000a90046001600160a01b03166001600160a01b03166329cb924d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e939190614048565b905090565b504290565b90565b604080516020810190915260008152610eb7612999565b610ebf61289c565b610ec7612a40565b6000610ed233612a4f565b90508060010154600014158015610ef45750610eec610e0c565b816001015411155b610efd57600080fd5b60408051602080820183526000825282518082018452600385015481528351918201909352600284015490819052915190911115610f4d5750604080516020810190915260038201548152610f61565b506040805160208101909152600282015481525b610f6b8282612e28565b9250610f7682612c10565b8251600554610f92916001600160a01b03909116903390612e76565b825160405133907fc86c3298cb79f486674dca87d9247e88b76146160e7d412cc59b26b14c358a6890600090a35050610e9d612b40565b610fd1612999565b610fd9612ea6565b610fe161289c565b610fe9612a40565b610ff1612f12565b6001600160a01b0316336001600160a01b03161461100e57600080fd5b6000805460ff60a81b1916600160a81b17905560095461102c610e0c565b600981905561103a90612fa0565b60095460405133917fd39eeb7157d9c446579a0893ecf9ecd87d1f466cdb270c6a189cf38ca1e30f489161107691858252602082015260400190565b60405180910390a2506107f4612b40565b6110c46040805160808101825260006060820181815282528251602080820185528282528084019190915283519081018452908152909182015290565b82826110d0828261307a565b6110d861289c565b6110e0612a40565b60006110ec8587613130565b90506110f88686613208565b60408051602080820183526007840154825282519081019092526003830154825260009161112591612cae565b604080516020810190915260155481529091506000906111459083612cae565b604080516020810190915260145481529091506000906111659084612cae565b604080516020808201835260135482528251908101909252600487015482529192506000916111949190612cae565b90506111d36040805160808101825260006060820181815282528251602080820185528282528084019190915283519081018452908152909182015290565b60036001870154600160a01b900460ff1660048111156111f5576111f5613e6a565b0361132c576040805160208101909152600d54815261121890610b31868561283a565b60408083019190915280516020810190915260048701548152611241908490610b319088612c84565b8152611257846112518786612c84565b90612c84565b6020808301829052604080519182019052601054815261127691612c84565b516010819055815160408051602081019091529182526112969190612c84565b5160108190556040808301518151602081019092529181526112b791612c84565b5160105560068601546040820151516005546112e1926001600160a01b0391821692911690612e76565b6001860154602082015151600554611307926001600160a01b0391821692911690612e76565b8554815151600554611327926001600160a01b0391821692911690612e76565b611461565b60046001870154600160a01b900460ff16600481111561134e5761134e613e6a565b036113c9576040805160208082018352600d54825282519081019092526004880154825261138091610b31908561283a565b6020808301829052604080519182019052601054815261139f91612c84565b516010556001860154602082015151600554611327926001600160a01b0391821692911690612e76565b600180870154600160a01b900460ff1660048111156113ea576113ea613e6a565b03611461576040805160208082018352600d548252825190810190925260048801548252611418919061283a565b6020808301829052604080519182019052601054815261143791612c84565b516010556001860154602082015151600554611461926001600160a01b0391821692911690612e76565b6001860154600160a01b900460ff16600481111561148157611481613e6a565b602082810151516040808501515185515160078c015483519485529484019190915290820152606081019190915233907fb479588a37dc7f6bac1c91587fcfc539cac4949cf26bb536ad9c8d061f00f50d9060800160405180910390a36001600160a01b038a166000908152600f6020526040902080548c90811061150857611508614061565b60009182526020822060089091020180546001600160a01b031990811682556001820180546001600160a81b03191690556002820183905560038201839055600482018390556005820183905560068201805490911690556007015597505050505050611573612b40565b505092915050565b611583612999565b61158b61289c565b611593612a40565b600061159e33612a4f565b905080600401546000146115b157600080fd5b60006115c1600a54610ce1610e0c565b905060095481106115d157600080fd5b6004820181905560405133907fbf457c80c8bf299d5c48272c4c1168bf87b33d83b13f0ab9aac332ce1161ed1e90600090a250506107f4612b40565b604080516020810190915260008152611624612999565b3361162e816129f1565b61163661289c565b61163e612a40565b611649836000612823565b61165257600080fd5b600061165d33612a4f565b90506116698185613367565b80516040519194509033907f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6590600090a382516005546116b6916001600160a01b03909116903390612e76565b506116bf612b40565b50919050565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611721575060408051601f3d908101601f1916820190925261171e91810190614077565b60015b6106ae57506012919050565b600f602052816000526040600020818154811061174957600080fd5b600091825260209182902060089190910201805460018201546002830154604080518087018252600386015481528151808801835260048701548152825180890184526005880154815260068801548451998a0190945260079097015488526001600160a01b0395861699508585169850600160a01b90940460ff169692959094909291169089565b6117da612999565b336117e4816129f1565b6117ec61289c565b6117f4612a40565b6118356118016000612c4f565b6001600160a01b03841660009081526001602090815260409182902082519182019092526003909101548152905190511490565b61183e57600080fd5b600061184933612a4f565b9050806004015460001415801561186b5750611863610e0c565b816004015411155b61187457600080fd5b600060048083018281556001600160a01b038616808452600160208190526040808620875481558288015481840155600280890154818301556003808a0154818401559554918701919091553380885282882088815593840188905590830187905593820186905593018490559151919290917ff1a2dcf23621f1a96185c79d39a5776b5ba3dadbea70c5aa86d84c17c7e9418e9190a36040516001600160a01b038416907ff60993fa76f94c9e0a803526ee6e1314814ed4d2b0d223febf1436b36897fb3790600090a260405133907fcad20625296d189a6fc6e5b39d0d544e5bd99dbda0c8f2f0ecffef3e0fbcc28290600090a250611973612b40565b5050565b61197f612999565b33611989816129f1565b61199161289c565b611999612a40565b60006119a433612a4f565b6040805160208101909152815490819052845191925010156119c557600080fd5b6040805160208101909152815481526000906119e19085612c84565b6040805160208101909152600b549081905281519192501115611a0357600080fd5b8051825560408051602081019091526002548152611a219085612c84565b516002558051845160405133907f77c6871227e5d2dec8dadd5354f78453203e22e669cd0ec4c19d9a8c5edb31d090600090a48351600454611a72916001600160a01b039091169033903090612acf565b600480548551604051630852cd8d60e31b8152928301526001600160a01b0316906342966c6890602401600060405180830381600087803b158015611ab657600080fd5b505af1158015611aca573d6000803e3d6000fd5b505050505050611973612b40565b60408051602081019091526000815233611af1816129f1565b611af961289c565b611b01612a40565b6000611b0c33612a4f565b604080516020810190915281549081905285519192501015611b2d57600080fd5b604080516020810190915281548152600090611b4a908690612ceb565b604080516020810190915260038401548152909150600090611b6d908390612cae565b6040805160208101909152845490819052875191925003611b9857611b91336133fd565b9450611c1a565b611ba28382612e28565b604080516020810190915284548152909550600090611bc19088612c84565b6040805160208101909152600b549081905281519192501115611bf65760405162461bcd60e51b81526004016108e69061409a565b8051845560408051602081019091526002548152611c149088612c84565b51600255505b8551855160405133907fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a92990600090a48451600554611c65916001600160a01b03909116903390612e76565b8551600454611c83916001600160a01b039091169033903090612acf565b600480548751604051630852cd8d60e31b8152928301526001600160a01b0316906342966c6890602401600060405180830381600087803b158015611cc757600080fd5b505af1158015611cdb573d6000803e3d6000fd5b505050505050506116bf612b40565b6000611cf461289c565b6106ae826134ff565b60088054611d0a906140d1565b80601f0160208091040260200160405190810160405280929190818152602001828054611d36906140d1565b8015611d835780601f10611d5857610100808354040283529160200191611d83565b820191906000526020600020905b815481529060010190602001808311611d6657829003601f168201915b505050505081565b611d93612999565b611d9b61289c565b611da3612a40565b33600090815260016020908152604091829020825191820190925260038201548152611df190611dd3908561283a565b604080516020810190915283548152611dec908561283a565b61359c565b80611e015750611e01838361359c565b611e4d5760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e7420636f6c6c61746572616c00000000000000000060448201526064016108e6565b600181015415611e945760405162461bcd60e51b815260206004820152601260248201527114195b991a5b99c81dda5d1a191c985dd85b60721b60448201526064016108e6565b604080516020810190915281548152611eae9060006135ed565b15611f11576040805160208101909152600b549081905282511015611ee55760405162461bcd60e51b81526004016108e69061409a565b60405133907ff60993fa76f94c9e0a803526ee6e1314814ed4d2b0d223febf1436b36897fb3790600090a25b611f1b8184612a77565b50604080516020810190915281548152611f35908361283a565b51815560408051602081019091526002548152611f52908361283a565b516002558151835160405133907f4b82aa16e071a61de1a6b9aeec9edab0356331f8122c78683b469ac8e685dabc90600090a48251600554611fa3916001600160a01b039091169033903090612acf565b6004805483516040516340c10f1960e01b8152339381019390935260248301526001600160a01b0316906340c10f19906044016020604051808303816000875af1158015611ff5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120199190614105565b61202257600080fd5b50611973612b40565b612033613604565b61203b612ea6565b61204361289c565b61204b612a40565b6000805460ff60a81b1916600160a81b17905560095461206a90612fa0565b60405133907f18600820405d6cf356e3556301762ca32395e72d8c81494fa344835c9da3633d90600090a26107f4612b40565b60606120a761289c565b6001600160a01b0382166000908152600f6020908152604080832080548251818502810185019093528083529193909284015b828210156121d557600084815260209081902060408051610120810182526008860290920180546001600160a01b039081168452600182015490811694840194909452919290830190600160a01b900460ff16600481111561213e5761213e613e6a565b600481111561214f5761214f613e6a565b815260028201546020808301919091526040805180830182526003850154815281840152805180830182526004850154815260608401528051808301825260058501548152608084015260068401546001600160a01b031660a08401528051808301909152600790930154835260c09091019190915290825260019290920191016120da565b505050509050919050565b60408051602081019091526000815282826121fb828261365d565b61220361289c565b61220b612a40565b60006122178587613130565b604080516020808201835260135482528251908101909252600483015482529192506000916122469190612cae565b60408051602081019091526010548152909150612263908261283a565b5160105560018201805460ff60a01b1916600160a11b1790556006820180546001600160a01b03191633179055600282015461229e90612fa0565b60018201548151604080518a8152602081019290925233926001600160a01b0390811692908a16917fcaca181ccad7979cf36ed4fc921e496001ab5264608f0fac7007ae1b43d36102910160405180910390a46040805160208101909152600d54815261230c90829061283a565b815160055491965061232b916001600160a01b03169033903090612acf565b5050611573612b40565b61233d612999565b61234561289c565b61234d612a40565b600061235833612a4f565b9050806004015460000361236b57600080fd5b60405133907f2e5702420c76e041698ad7ba57a9ff5cadccf647ea8d96e6007a40b5b2662f5690600090a260006004909101556107f4612b40565b6123ae612999565b336123b8816129f1565b6123c061289c565b6123c8612a40565b60006123d333612a4f565b90506123e0836000612823565b801561240057506040805160208101909152600382015490819052835111155b61240957600080fd5b6000612419600a54610ce1610e0c565b9050600954811061242957600080fd5b6001820181905583516002830181905560405133907fd33b726e11d2c5d38e6702b16613df0160a07f7ba5185455ee3c45d0494fab1190600090a35050611973612b40565b61247833826106b4565b50565b604080516020810190915260008152612492613604565b61249a61289c565b6124a2612a40565b60008054600160a81b900460ff1660028111156124c1576124c1613e6a565b036125035760405162461bcd60e51b81526020600482015260126024820152712ab732bc3834b932b2103837b9b4ba34b7b760711b60448201526064016108e6565b6002600054600160a81b900460ff16600281111561252357612523613e6a565b1461254b576125336009546136f3565b51600c556000805460ff60a81b1916600160a91b1790555b6040805160208101918290526004546370a0823160e01b90925233602482015260009181906001600160a01b03166370a0823160448301602060405180830381865afa15801561259f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c39190614048565b90526040805160208101909152600c5481529091506000906125e6908390612cae565b33600090815260016020908152604080832081519283019091526003810154825292935061261391612823565b156126f1576040805160208082018352600c54825282519081019092528254825260009161264091612cae565b604080516020810190915260038401548152909150600061266383835190511090565b61267c5760405180602001604052806000815250612686565b6126868284612c84565b9050612692858261283a565b336000818152600160208190526040808320838155918201839055600282018390556003820183905560049091018290555192975090917fcad20625296d189a6fc6e5b39d0d544e5bd99dbda0c8f2f0ecffef3e0fbcc2829190a25050505b6040805160208101909152600354815260009061270e9084612c2a565b6040805160208101909152600354815290915061272b9082612c84565b5160035560408051602081019091526002548152909450849061274e9085612c84565b516002558351855160405133907f9d349c102bec959fb7f20f9a3621e015819d3ae4ed6e9afd1f56a69d5845600690600090a4845160055461279d916001600160a01b03909116903390612e76565b83516004546127bb916001600160a01b039091169033903090612acf565b600480548551604051630852cd8d60e31b8152928301526001600160a01b0316906342966c6890602401600060405180830381600087803b1580156127ff57600080fd5b505af1158015612813573d6000803e3d6000fd5b5050505050505050610e9d612b40565b600061282e82612c4f565b51835111905092915050565b60408051602081019091526000815260408051602081019091528251845182916128649190612884565b90529392505050565b600061287882612c4f565b51835110905092915050565b60006106ab828461413d565b60006106ab8284614150565b600054600160a01b900460ff166107f45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108e6565b604080516020810190915260008152600e546001600160a01b03163b61291c5750816106ae565b600e5460405162ff49b960e41b815284516004820152602481018490526001600160a01b0390911690630ff49b9090604401602060405180830381865afa925050508015612987575060408051601f3d908101601f191682019092526129849181019061416f565b60015b6129925750816106ae565b90506106ae565b6009546129a4610e0c565b106107f45760405162461bcd60e51b815260206004820152601860248201527f4f6e6c792063616c6c61626c65207072652d657870697279000000000000000060448201526064016108e6565b6129fa81612a4f565b60010154156124785760405162461bcd60e51b815260206004820152601260248201527114195b991a5b99c81dda5d1a191c985dd85b60721b60448201526064016108e6565b6000805460ff60a01b19169055565b600081612a5b81613838565b50506001600160a01b0316600090815260016020526040902090565b604080516020810190915260008152604080516020810190915260038401548152612aa2908361283a565b51600380850191909155604080516020810190915290548152612ac5908361283a565b5160035550919050565b6040516001600160a01b0380851660248301528316604482015260648101829052612b3a9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526138b6565b50505050565b6000805460ff60a01b1916600160a01b179055565b604080516020810190915260008152600e546001600160a01b03163b612b8a5750506040805160208101909152601254815290565b600e54604051632a31263760e01b81528351600482015260125460248201526001600160a01b0390911690632a31263790604401602060405180830381865afa925050508015612bf7575060408051601f3d908101601f19168201909252612bf49181019061416f565b60015b6106ae5750506040805160208101909152601254815290565b612c1a6000612c4f565b5160028201556000600190910155565b6040805160208101909152600081528151835110612c4857816106ab565b5090919050565b604080516020810190915260008152604080516020810190915280612c7c84670de0b6b3a7640000612890565b905292915050565b60408051602081019091526000815260408051602081019091528251845182916128649190613988565b6040805160208101909152600081526040805160208101909152825184518291670de0b6b3a764000091612ce191612890565b61286491906141bf565b604080516020810190915260008152604080516020810190915282518451829161286491612d2190670de0b6b3a7640000612890565b90613994565b6000612d3285612a4f565b60408051602081019091528154908190528551919250148015612d68575060408051602081019091526003820154908190528351145b15612d7d57612d76856133fd565b5050612b3a565b612d878184612e28565b50604080516020810190915281548152600090612da49086612c84565b6040805160208101909152600b549081905281519192501115612dd95760405162461bcd60e51b81526004016108e69061409a565b80518255604080516020810190915260028301548152612df99084612c84565b51600280840191909155604080516020810190915290548152612e1c9086612c84565b51600255505050505050565b604080516020810190915260008152604080516020810190915260038401548152612e539083612c84565b51600380850191909155604080516020810190915290548152612ac59083612c84565b6040516001600160a01b03831660248201526044810182905261075f90849063a9059cbb60e01b90606401612b03565b60008054600160a81b900460ff166002811115612ec557612ec5613e6a565b146107f45760405162461bcd60e51b815260206004820152601a60248201527f436f6e7472616374207374617465206973206e6f74204f50454e00000000000060448201526064016108e6565b6006546040516302abf57960e61b81527f46696e616e6369616c436f6e74726163747341646d696e00000000000000000060048201526000916001600160a01b03169063aafd5e40906024015b602060405180830381865afa158015612f7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9391906141e1565b6000612faa6139a0565b600d54600554919250612fca916001600160a01b03169033903090612acf565b600d54600554612fe7916001600160a01b039091169083906139e4565b806001600160a01b03166311df92f1612fff846134ff565b600554600d546040516001600160e01b031960e086901b168152613037939288926008926001600160a01b03909216916004016142a2565b6020604051808303816000875af1158015613056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075f9190614048565b60006130868284613130565b600181810154919250600160a01b90910460ff16908160048111156130ad576130ad613e6a565b11806130e457506130bc610e0c565b6130c583613a96565b111580156130e4575060018160048111156130e2576130e2613e6a565b145b612b3a5760405162461bcd60e51b815260206004820152601c60248201527f4c69717569646174696f6e206e6f7420776974686472617761626c650000000060448201526064016108e6565b6001600160a01b0382166000908152600f6020526040812080548310801561319a5750600081848154811061316757613167614061565b906000526020600020906008020160010160149054906101000a900460ff16600481111561319757613197613e6a565b14155b6131df5760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081b1a5c5d5a59185d1a5bdb88125160521b60448201526064016108e6565b8083815481106131f1576131f1614061565b906000526020600020906008020191505092915050565b60006132148284613130565b905060026001820154600160a01b900460ff16600481111561323857613238613e6a565b1461324257505050565b61324f81600201546136f3565b5160078201819055604080516020808201835292815281519283019091526003830154825260009161328091612cae565b6040805160208101909152600784015481529091506000906132ac906132a590612b55565b8390612cae565b604080516020810190915260058501549081905281519192501015806132d35760046132d6565b60035b60018501805460ff60a01b1916600160a01b8360048111156132fa576132fa613e6a565b021790555060018401546006850154604080516001600160a01b039283168152602081018a9052841515818301529051928216929188169133917f6c5582199868fabbe697f9ea10abe481bacf53ac78c02a965b34dff82fd20e3b919081900360600190a4505050505050565b6040805160208101909152600081526040805160208101909152600384015481526133929083612c84565b516003808501919091556040805160208101909152905481526133b59083612c84565b516003556133c283613ab1565b6116bf5760405162461bcd60e51b815260206004820152600c60248201526b21a9103132b637bb9023a1a960a11b60448201526064016108e6565b604080516020810190915260008152600061341783612a4f565b6040805160208082018352600380548084528451808401865291860154825284519283019094529281529293509161344e91612c84565b51600355604080516020808201835284548252825190810190925260025482526134789190612c84565b5160029081556001600160a01b038516600081815260016020819052604080832083815591820183905593810182905560038101829055600401819055915190917fcad20625296d189a6fc6e5b39d0d544e5bd99dbda0c8f2f0ecffef3e0fbcc28291a2604080516020810190915260035481526134f7908290612c84565b949350505050565b600e546000906001600160a01b03163b61351b57505060075490565b600e5460075460405163f19371b760e01b81526001600160a01b039092169163f19371b791613557918690600401918252602082015260400190565b602060405180830381865afa925050508015613590575060408051601f3d908101601f1916820190925261358d91810190614048565b60015b6106ae57505060075490565b604080516020808201835260035482528251908101909252600254825260009182916135c791613adc565b905060006135d58585613adc565b90506135e382825190511190565b1595945050505050565b60006135f882612c4f565b51835114905092915050565b60095461360f610e0c565b10156107f45760405162461bcd60e51b815260206004820152601960248201527f4f6e6c792063616c6c61626c6520706f73742d6578706972790000000000000060448201526064016108e6565b60006136698284613130565b905061367481613a96565b61367c610e0c565b1080156136a75750600180820154600160a01b900460ff1660048111156136a5576136a5613e6a565b145b61075f5760405162461bcd60e51b815260206004820152601a60248201527f4c69717569646174696f6e206e6f742064697370757461626c6500000000000060448201526064016108e6565b604080516020810190915260008152600061370c6139a0565b9050806001600160a01b031663bc58ccaa30613727866134ff565b8660086040518563ffffffff1660e01b815260040161374994939291906142de565b602060405180830381865afa158015613766573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061378a9190614105565b61379357600080fd5b6000816001600160a01b03166353b592396137ad866134ff565b8660086040518463ffffffff1660e01b81526004016137ce93929190614315565b6020604051808303816000875af11580156137ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138119190614048565b90506000811215613820575060005b6134f7604051806020016040528083815250856128f5565b6001600160a01b0381166000908152600160209081526040808320815192830190915260030154815261386a91612823565b6124785760405162461bcd60e51b815260206004820152601a60248201527f506f736974696f6e20686173206e6f20636f6c6c61746572616c00000000000060448201526064016108e6565b600061390b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613b0e9092919063ffffffff16565b80519091501561075f57808060200190518101906139299190614105565b61075f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108e6565b60006106ab828461433d565b60006106ab82846141bf565b6006546040516302abf57960e61b81526f4f7074696d69737469634f7261636c6560801b60048201526000916001600160a01b03169063aafd5e4090602401612f5f565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015613a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a599190614048565b613a63919061413d565b6040516001600160a01b038516602482015260448101829052909150612b3a90859063095ea7b360e01b90606401612b03565b60006106ae601154836002015461288490919063ffffffff16565b6040805160208082018352600384015482528251908101909252825482526000916106ae919061359c565b604080516020810190915260008152613af6826000612823565b613b04576129926000612c4f565b6129928383612ceb565b6060613b1d8484600085613b27565b90505b9392505050565b606082471015613b885760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108e6565b6001600160a01b0385163b613bdf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108e6565b600080866001600160a01b03168587604051613bfb9190614350565b60006040518083038185875af1925050503d8060008114613c38576040519150601f19603f3d011682016040523d82523d6000602084013e613c3d565b606091505b5091509150613c4d828286613c58565b979650505050505050565b60608315613c67575081613b20565b825115613c775782518084602001fd5b8160405162461bcd60e51b81526004016108e69190613f44565b600060208284031215613ca357600080fd5b6040516020810181811067ffffffffffffffff82111715613cd457634e487b7160e01b600052604160045260246000fd5b6040529135825250919050565b60008060408385031215613cf457600080fd5b613cfe8484613c91565b946020939093013593505050565b6001600160a01b038116811461247857600080fd5b60008060408385031215613d3457600080fd5b8235613d3f81613d0c565b9150613d4e8460208501613c91565b90509250929050565b600060208284031215613d6957600080fd5b6106ab8383613c91565b600060208284031215613d8557600080fd5b5035919050565b6000602082840312156116bf57600080fd5b600080600080600060a08688031215613db657600080fd5b8535613dc181613d0c565b9450613dd08760208801613d8c565b9350613ddf8760408801613d8c565b9250613dee8760608801613d8c565b949793965091946080013592915050565b60008060408385031215613e1257600080fd5b823591506020830135613e2481613d0c565b809150509250929050565b600060208284031215613e4157600080fd5b8135613b2081613d0c565b60008060408385031215613e5f57600080fd5b8235613cfe81613d0c565b634e487b7160e01b600052602160045260246000fd5b60058110613e9057613e90613e6a565b9052565b6001600160a01b038a811682528981166020830152610120820190613ebc604084018b613e80565b606083019890985295516080820152935160a0850152915160c084015290931660e08201529151610100909201919091529392505050565b60005b83811015613f0f578181015183820152602001613ef7565b50506000910152565b60008151808452613f30816020860160208601613ef4565b601f01601f19169290920160200192915050565b6020815260006106ab6020830184613f18565b60008060408385031215613f6a57600080fd5b613d3f8484613c91565b6020810160038310613f8857613f88613e6a565b91905290565b602080825282518282018190526000919060409081850190868401855b8281101561403b57815180516001600160a01b03908116865287820151168786015285810151613fdd87870182613e80565b5060608181015190860152608080820151519086015260a080820151519086015260c080820151519086015260e0808201516001600160a01b0316908601526101009081015151908501526101209093019290850190600101613fab565b5091979650505050505050565b60006020828403121561405a57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561408957600080fd5b815160ff81168114613b2057600080fd5b6020808252601e908201527f42656c6f77206d696e696d756d2073706f6e736f7220706f736974696f6e0000604082015260600190565b600181811c908216806140e557607f821691505b6020821081036116bf57634e487b7160e01b600052602260045260246000fd5b60006020828403121561411757600080fd5b81518015158114613b2057600080fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156106ae576106ae614127565b600081600019048311821515161561416a5761416a614127565b500290565b60006020828403121561418157600080fd5b6040516020810181811067ffffffffffffffff821117156141b257634e487b7160e01b600052604160045260246000fd5b6040529151825250919050565b6000826141dc57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156141f357600080fd5b8151613b2081613d0c565b8054600090600181811c908083168061421857607f831692505b6020808410820361423957634e487b7160e01b600052602260045260246000fd5b83885260208801828015614254576001811461426a57614295565b60ff198716825285151560051b82019750614295565b60008981526020902060005b8781101561428f57815484820152908601908401614276565b83019850505b5050505050505092915050565b85815284602082015260a0604082015260006142c160a08301866141fe565b6001600160a01b0394909416606083015250608001529392505050565b60018060a01b038516815283602082015282604082015260806060820152600061430b60808301846141fe565b9695505050505050565b83815282602082015260606040820152600061433460608301846141fe565b95945050505050565b818103818111156106ae576106ae614127565b60008251614362818460208701613ef4565b919091019291505056fea2646970667358221220de46f9f123e0a263791e3a381ac83eabe8d478297c3c99afc735e1d86add5b8064736f6c63430008100033a2646970667358221220c0c0e04e79bb78480e95beead6b15fb3dcdd8c8bb0ae7b36de465c0033a0b45a64736f6c63430008100033",
  "devdoc": {
    "details": "Using this library to deploy EMP's allows calling contracts to avoid importing the full EMP bytecode.",
    "kind": "dev",
    "methods": {
      "deploy(Liquidatable.ConstructorParams)": {
        "details": "Caller will need to register new EMP with the Registry to begin requesting prices. Caller is also responsible for enforcing constraints on `params`.",
        "params": {
          "params": "is a `ConstructorParams` object from ExpiringMultiParty."
        },
        "returns": {
          "_0": "address of the deployed ExpiringMultiParty contract"
        }
      }
    },
    "title": "Provides convenient Expiring Multi Party contract utilities.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deploy(Liquidatable.ConstructorParams)": {
        "notice": "Returns address of new EMP deployed with given `params` configuration."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}