{
  "address": "0x9AEEc7af355eE8Ce4819fA67B636b027273640D8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_clayToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardRate",
          "type": "uint256"
        }
      ],
      "name": "RewardRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clayToken",
      "outputs": [
        {
          "internalType": "contract IClayToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardRate",
          "type": "uint256"
        }
      ],
      "name": "updateRewardRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x80ceebfcfbb43b539998c69b3bb32d8b26da14fe53654d5db23cd9a658ff527a",
  "receipt": {
    "to": null,
    "from": "0x83EF79Ea3FfA70E781073b7E459e324952EcD4Bd",
    "contractAddress": "0x9AEEc7af355eE8Ce4819fA67B636b027273640D8",
    "transactionIndex": 89,
    "gasUsed": "882321",
    "logsBloom": "0x
    "blockHash": "0x687309057fc2947032f29c1cad87a2a8b34070b9338c61b6c99d4f12ad9fdb78",
    "transactionHash": "0x80ceebfcfbb43b539998c69b3bb32d8b26da14fe53654d5db23cd9a658ff527a",
    "logs": [
      {
        "transactionIndex": 89,
        "blockNumber": 7914498,
        "transactionHash": "0x80ceebfcfbb43b539998c69b3bb32d8b26da14fe53654d5db23cd9a658ff527a",
        "address": "0x9AEEc7af355eE8Ce4819fA67B636b027273640D8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000083ef79ea3ffa70e781073b7e459e324952ecd4bd"
        ],
        "data": "0x",
        "logIndex": 139,
        "blockHash": "0x687309057fc2947032f29c1cad87a2a8b34070b9338c61b6c99d4f12ad9fdb78"
      }
    ],
    "blockNumber": 7914498,
    "cumulativeGasUsed": "14179986",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0b0127317E2B2A90D0a6C53651e6749C44f8BeFe",
    "0xc73DD67CAedA81758F80621E7dee0A67C14EB0a9"
  ],
  "numDeployments": 1,
  "solcInputHash": "ff64ff316af37f8c5c87978941fbcc25",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_clayToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"name\":\"RewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clayToken\",\"outputs\":[{\"internalType\":\"contract IClayToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"updateRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"User can stake Sumero LP Tokens (received by providing liquidity to a Liquidity Pool on Sumero) to earn CLAY rewards. User can unstake the Sumero LP tokens and claim rewards at any point in time. Rewards would depend on your - time period of stake   - percentage of your staked tokens with respect to total staked tokens Owner of this contract can perform following actions: - pause / unpause this contract in case of closure of Staking Rewards scheme or other unforseen circumstances - change reward rate\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ClayStakingRewards.sol\":\"ClayStakingRewards\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ClayStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IClayToken.sol\\\";\\n\\n/**\\n    User can stake Sumero LP Tokens (received by providing liquidity to a Liquidity Pool on Sumero) to earn CLAY rewards.\\n    User can unstake the Sumero LP tokens and claim rewards at any point in time.\\n    Rewards would depend on your\\n    - time period of stake  \\n    - percentage of your staked tokens with respect to total staked tokens\\n\\n    Owner of this contract can perform following actions:\\n    - pause / unpause this contract in case of closure of Staking Rewards scheme or other unforseen circumstances\\n    - change reward rate\\n */\\ncontract ClayStakingRewards is Ownable, ReentrancyGuard, Pausable {\\n    IClayToken public immutable clayToken;\\n    // Staking token would be Sumero LP tokens\\n    IERC20 public immutable stakingToken;\\n\\n    // Reward Rate per day\\n    // 10 gwei CLAY per second\\n    // 10 gwei * (24 * 60 * 60)\\n    // 10 gwei * 86400\\n    // 864000 gwei => 0.000864 CLAY per day per token\\n    // Make this a max deterministic reward so that we can control outflow of CLAY?\\n\\n    // reward rate i.e. reward in wei rewarded per second for staking a whole token\\n    uint256 public rewardRate = 10 gwei;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    constructor(address _stakedToken, address _clayToken) {\\n        stakingToken = IERC20(_stakedToken);\\n        clayToken = IClayToken(_clayToken);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored +\\n            ((rewardRate * (block.timestamp - lastUpdateTime) * 1e18) /\\n                _totalSupply);\\n    }\\n\\n    function earned(address _account) public view returns (uint256) {\\n        return\\n            ((_balances[_account] *\\n                (rewardPerToken() - userRewardPerTokenPaid[_account])) / 1e18) +\\n            rewards[_account];\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateReward(address _account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = block.timestamp;\\n\\n        rewards[_account] = earned(_account);\\n        userRewardPerTokenPaid[_account] = rewardPerTokenStored;\\n        _;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function stake(uint256 _amount)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        updateReward(msg.sender)\\n    {\\n        require(_amount > 0, \\\"ClayStakingRewards: AMOUNT_IS_ZERO\\\");\\n        _totalSupply += _amount;\\n        _balances[msg.sender] += _amount;\\n        bool success = stakingToken.transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        require(success, \\\"ClayStakingRewards: TRANSFER_FAILED\\\");\\n        emit Staked(msg.sender, _amount);\\n    }\\n\\n    function withdraw(uint256 _amount)\\n        public\\n        nonReentrant\\n        updateReward(msg.sender)\\n    {\\n        require(_amount > 0, \\\"ClayStakingRewards: AMOUNT_IS_ZERO\\\");\\n        require(\\n            _amount <= _balances[msg.sender],\\n            \\\"ClayStakingRewards: INSUFFICIENT_BALANCE\\\"\\n        );\\n\\n        _totalSupply -= _amount;\\n        _balances[msg.sender] -= _amount;\\n        bool success = stakingToken.transfer(msg.sender, _amount);\\n        require(success, \\\"ClayStakingRewards: TRANSFER_FAILED\\\");\\n        emit Withdrawn(msg.sender, _amount);\\n    }\\n\\n    function exit() external {\\n        withdraw(_balances[msg.sender]);\\n        getReward();\\n    }\\n\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        rewards[msg.sender] = 0;\\n        // Sumero Owner needs to grant MINTER_ROLE for CLAY to StakingRewards\\n        clayToken.mint(msg.sender, reward);\\n        emit RewardPaid(msg.sender, reward);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function updateRewardRate(uint256 _rewardRate) external onlyOwner {\\n        rewardRate = _rewardRate;\\n        emit RewardRateUpdated(_rewardRate);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardRateUpdated(uint256 rewardRate);\\n}\\n\",\"keccak256\":\"0x154e3af2ec40133272388daedb5ceac570723dc627b51dc6af872cf78888aaed\",\"license\":\"MIT\"},\"contracts/interfaces/IClayToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the Clay Token.\\n */\\ninterface IClayToken {\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5809cc044db90f05598a789ff174e0e310fae296f5d9601801debd626f2720cd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526402540be40060035534801561001957600080fd5b50604051610ee7380380610ee7833981016040819052610038916100d2565b61004133610066565b600180556002805460ff191690556001600160a01b0391821660a05216608052610105565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100cd57600080fd5b919050565b600080604083850312156100e557600080fd5b6100ee836100b6565b91506100fc602084016100b6565b90509250929050565b60805160a051610da861013f60003960008181610205015281816104db01526108480152600081816102ce01526106460152610da86000f3fe608060405234801561001057600080fd5b50600436106101415760003560e01c80638456cb59116100b8578063c8f33c911161007c578063c8f33c91146102a7578063cd3daf9d146102b0578063df136d65146102b8578063e9fad8ee146102c1578063eb247bc3146102c9578063f2fde38b146102f057600080fd5b80638456cb59146102485780638b876347146102505780638da5cb5b146102705780639ef3a26114610281578063a694fc3a1461029457600080fd5b80633f4ba83a1161010a5780633f4ba83a146101b15780635c975abb146101b957806370a08231146101cf578063715018a6146101f857806372f702f3146102005780637b0a47ee1461023f57600080fd5b80628cc262146101465780630700037d1461016c57806318160ddd1461018c5780632e1a7d4d146101945780633d18b912146101a9575b600080fd5b610159610154366004610bce565b610303565b6040519081526020015b60405180910390f35b61015961017a366004610bce565b60076020526000908152604090205481565b600854610159565b6101a76101a2366004610bfe565b610380565b005b6101a76105ae565b6101a76106e1565b60025460ff166040519015158152602001610163565b6101596101dd366004610bce565b6001600160a01b031660009081526009602052604090205490565b6101a76106f3565b6102277f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610163565b61015960035481565b6101a7610705565b61015961025e366004610bce565b60066020526000908152604090205481565b6000546001600160a01b0316610227565b6101a761028f366004610bfe565b610715565b6101a76102a2366004610bfe565b610758565b61015960045481565b61015961090e565b61015960055481565b6101a761096c565b6102277f000000000000000000000000000000000000000000000000000000000000000081565b6101a76102fe366004610bce565b61098d565b6001600160a01b0381166000908152600760209081526040808320546006909252822054670de0b6b3a76400009061033961090e565b6103439190610c2d565b6001600160a01b0385166000908152600960205260409020546103669190610c40565b6103709190610c5f565b61037a9190610c81565b92915050565b6002600154036103ab5760405162461bcd60e51b81526004016103a290610c94565b60405180910390fd5b6002600155336103b961090e565b600555426004556103c981610303565b6001600160a01b038216600090815260076020908152604080832093909355600554600690915291902055816104115760405162461bcd60e51b81526004016103a290610ccb565b336000908152600960205260409020548211156104815760405162461bcd60e51b815260206004820152602860248201527f436c61795374616b696e67526577617264733a20494e53554646494349454e546044820152675f42414c414e434560c01b60648201526084016103a2565b81600860008282546104939190610c2d565b909155505033600090815260096020526040812080548492906104b7908490610c2d565b909155505060405163a9059cbb60e01b8152336004820152602481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561052c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105509190610d0d565b90508061056f5760405162461bcd60e51b81526004016103a290610d2f565b60405183815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250506001805550565b6002600154036105d05760405162461bcd60e51b81526004016103a290610c94565b6002600155336105de61090e565b600555426004556105ee81610303565b6001600160a01b03828116600090815260076020818152604080842095909555600554600682528584205533808452919052838220805492905592516340c10f1960e01b8152600481019390935260248301819052917f0000000000000000000000000000000000000000000000000000000000000000909116906340c10f1990604401600060405180830381600087803b15801561068c57600080fd5b505af11580156106a0573d6000803e3d6000fd5b50506040518381523392507fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486915060200160405180910390a2505060018055565b6106e9610a06565b6106f1610a60565b565b6106fb610a06565b6106f16000610ab2565b61070d610a06565b6106f1610b02565b61071d610a06565b60038190556040518181527f41d466ebd06fb97e7786086ac8b69b7eb7da798592036251291d34e9791cde019060200160405180910390a150565b60026001540361077a5760405162461bcd60e51b81526004016103a290610c94565b6002600155610787610b3f565b3361079061090e565b600555426004556107a081610303565b6001600160a01b038216600090815260076020908152604080832093909355600554600690915291902055816107e85760405162461bcd60e51b81526004016103a290610ccb565b81600860008282546107fa9190610c81565b9091555050336000908152600960205260408120805484929061081e908490610c81565b90915550506040516323b872dd60e01b8152336004820152306024820152604481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd9190610d0d565b9050806108dc5760405162461bcd60e51b81526004016103a290610d2f565b60405183815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200161059d565b6000600854600003610921575060055490565b6008546004546109319042610c2d565b60035461093e9190610c40565b61095090670de0b6b3a7640000610c40565b61095a9190610c5f565b6005546109679190610c81565b905090565b3360009081526009602052604090205461098590610380565b6106f16105ae565b610995610a06565b6001600160a01b0381166109fa5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103a2565b610a0381610ab2565b50565b6000546001600160a01b031633146106f15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103a2565b610a68610b85565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610b0a610b3f565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610a953390565b60025460ff16156106f15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103a2565b60025460ff166106f15760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016103a2565b600060208284031215610be057600080fd5b81356001600160a01b0381168114610bf757600080fd5b9392505050565b600060208284031215610c1057600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561037a5761037a610c17565b6000816000190483118215151615610c5a57610c5a610c17565b500290565b600082610c7c57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561037a5761037a610c17565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526022908201527f436c61795374616b696e67526577617264733a20414d4f554e545f49535f5a45604082015261524f60f01b606082015260800190565b600060208284031215610d1f57600080fd5b81518015158114610bf757600080fd5b60208082526023908201527f436c61795374616b696e67526577617264733a205452414e534645525f46414960408201526213115160ea1b60608201526080019056fea264697066735822122081daeb51a52b4e466fbdfb37e3f699bda023e466ccc07c36c5c62138596e50fa64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101415760003560e01c80638456cb59116100b8578063c8f33c911161007c578063c8f33c91146102a7578063cd3daf9d146102b0578063df136d65146102b8578063e9fad8ee146102c1578063eb247bc3146102c9578063f2fde38b146102f057600080fd5b80638456cb59146102485780638b876347146102505780638da5cb5b146102705780639ef3a26114610281578063a694fc3a1461029457600080fd5b80633f4ba83a1161010a5780633f4ba83a146101b15780635c975abb146101b957806370a08231146101cf578063715018a6146101f857806372f702f3146102005780637b0a47ee1461023f57600080fd5b80628cc262146101465780630700037d1461016c57806318160ddd1461018c5780632e1a7d4d146101945780633d18b912146101a9575b600080fd5b610159610154366004610bce565b610303565b6040519081526020015b60405180910390f35b61015961017a366004610bce565b60076020526000908152604090205481565b600854610159565b6101a76101a2366004610bfe565b610380565b005b6101a76105ae565b6101a76106e1565b60025460ff166040519015158152602001610163565b6101596101dd366004610bce565b6001600160a01b031660009081526009602052604090205490565b6101a76106f3565b6102277f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610163565b61015960035481565b6101a7610705565b61015961025e366004610bce565b60066020526000908152604090205481565b6000546001600160a01b0316610227565b6101a761028f366004610bfe565b610715565b6101a76102a2366004610bfe565b610758565b61015960045481565b61015961090e565b61015960055481565b6101a761096c565b6102277f000000000000000000000000000000000000000000000000000000000000000081565b6101a76102fe366004610bce565b61098d565b6001600160a01b0381166000908152600760209081526040808320546006909252822054670de0b6b3a76400009061033961090e565b6103439190610c2d565b6001600160a01b0385166000908152600960205260409020546103669190610c40565b6103709190610c5f565b61037a9190610c81565b92915050565b6002600154036103ab5760405162461bcd60e51b81526004016103a290610c94565b60405180910390fd5b6002600155336103b961090e565b600555426004556103c981610303565b6001600160a01b038216600090815260076020908152604080832093909355600554600690915291902055816104115760405162461bcd60e51b81526004016103a290610ccb565b336000908152600960205260409020548211156104815760405162461bcd60e51b815260206004820152602860248201527f436c61795374616b696e67526577617264733a20494e53554646494349454e546044820152675f42414c414e434560c01b60648201526084016103a2565b81600860008282546104939190610c2d565b909155505033600090815260096020526040812080548492906104b7908490610c2d565b909155505060405163a9059cbb60e01b8152336004820152602481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561052c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105509190610d0d565b90508061056f5760405162461bcd60e51b81526004016103a290610d2f565b60405183815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250506001805550565b6002600154036105d05760405162461bcd60e51b81526004016103a290610c94565b6002600155336105de61090e565b600555426004556105ee81610303565b6001600160a01b03828116600090815260076020818152604080842095909555600554600682528584205533808452919052838220805492905592516340c10f1960e01b8152600481019390935260248301819052917f0000000000000000000000000000000000000000000000000000000000000000909116906340c10f1990604401600060405180830381600087803b15801561068c57600080fd5b505af11580156106a0573d6000803e3d6000fd5b50506040518381523392507fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486915060200160405180910390a2505060018055565b6106e9610a06565b6106f1610a60565b565b6106fb610a06565b6106f16000610ab2565b61070d610a06565b6106f1610b02565b61071d610a06565b60038190556040518181527f41d466ebd06fb97e7786086ac8b69b7eb7da798592036251291d34e9791cde019060200160405180910390a150565b60026001540361077a5760405162461bcd60e51b81526004016103a290610c94565b6002600155610787610b3f565b3361079061090e565b600555426004556107a081610303565b6001600160a01b038216600090815260076020908152604080832093909355600554600690915291902055816107e85760405162461bcd60e51b81526004016103a290610ccb565b81600860008282546107fa9190610c81565b9091555050336000908152600960205260408120805484929061081e908490610c81565b90915550506040516323b872dd60e01b8152336004820152306024820152604481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd9190610d0d565b9050806108dc5760405162461bcd60e51b81526004016103a290610d2f565b60405183815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200161059d565b6000600854600003610921575060055490565b6008546004546109319042610c2d565b60035461093e9190610c40565b61095090670de0b6b3a7640000610c40565b61095a9190610c5f565b6005546109679190610c81565b905090565b3360009081526009602052604090205461098590610380565b6106f16105ae565b610995610a06565b6001600160a01b0381166109fa5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103a2565b610a0381610ab2565b50565b6000546001600160a01b031633146106f15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103a2565b610a68610b85565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610b0a610b3f565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610a953390565b60025460ff16156106f15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103a2565b60025460ff166106f15760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016103a2565b600060208284031215610be057600080fd5b81356001600160a01b0381168114610bf757600080fd5b9392505050565b600060208284031215610c1057600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561037a5761037a610c17565b6000816000190483118215151615610c5a57610c5a610c17565b500290565b600082610c7c57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561037a5761037a610c17565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526022908201527f436c61795374616b696e67526577617264733a20414d4f554e545f49535f5a45604082015261524f60f01b606082015260800190565b600060208284031215610d1f57600080fd5b81518015158114610bf757600080fd5b60208082526023908201527f436c61795374616b696e67526577617264733a205452414e534645525f46414960408201526213115160ea1b60608201526080019056fea264697066735822122081daeb51a52b4e466fbdfb37e3f699bda023e466ccc07c36c5c62138596e50fa64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "User can stake Sumero LP Tokens (received by providing liquidity to a Liquidity Pool on Sumero) to earn CLAY rewards. User can unstake the Sumero LP tokens and claim rewards at any point in time. Rewards would depend on your - time period of stake   - percentage of your staked tokens with respect to total staked tokens Owner of this contract can perform following actions: - pause / unpause this contract in case of closure of Staking Rewards scheme or other unforseen circumstances - change reward rate",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/ClayStakingRewards.sol:ClayStakingRewards",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 624,
        "contract": "contracts/ClayStakingRewards.sol:ClayStakingRewards",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 523,
        "contract": "contracts/ClayStakingRewards.sol:ClayStakingRewards",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 3577,
        "contract": "contracts/ClayStakingRewards.sol:ClayStakingRewards",
        "label": "rewardRate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3579,
        "contract": "contracts/ClayStakingRewards.sol:ClayStakingRewards",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3581,
        "contract": "contracts/ClayStakingRewards.sol:ClayStakingRewards",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3585,
        "contract": "contracts/ClayStakingRewards.sol:ClayStakingRewards",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3589,
        "contract": "contracts/ClayStakingRewards.sol:ClayStakingRewards",
        "label": "rewards",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3591,
        "contract": "contracts/ClayStakingRewards.sol:ClayStakingRewards",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3595,
        "contract": "contracts/ClayStakingRewards.sol:ClayStakingRewards",
        "label": "_balances",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}