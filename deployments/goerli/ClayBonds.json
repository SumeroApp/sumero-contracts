{
  "address": "0x8ed2F29D044AA5BfC53e64AA6997c5635Cf62be3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IClayToken",
          "name": "_clay",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maximumBondRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daysLeftToMaturationDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Issue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "APY_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BONDS_ISSUANCE_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BONUS_APY_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clay",
      "outputs": [
        {
          "internalType": "contract IClayToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dailyYieldPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositCloseDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositStartDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDaysLeftToMaturationDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "daysLeftToMaturationDate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPercent",
          "type": "uint256"
        }
      ],
      "name": "getReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "daysLeftToMaturationDate",
          "type": "uint256"
        }
      ],
      "name": "getRewardPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardPercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_clayAmount",
          "type": "uint256"
        }
      ],
      "name": "issue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maturationDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maximumBondRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBondDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x69864d052444ffdc5a669109d34538b6ff639ac3eb9b25d44aad1bc3050580dd",
  "receipt": {
    "to": null,
    "from": "0x8D9656505A20C9562488bfa6EA0d1eF6B12966d7",
    "contractAddress": "0x8ed2F29D044AA5BfC53e64AA6997c5635Cf62be3",
    "transactionIndex": 54,
    "gasUsed": "1362106",
    "logsBloom": "0x
    "blockHash": "0x045660fbc27061b8b0271bd70725bf5f1b018ad423224dcba80b939294d635d5",
    "transactionHash": "0x69864d052444ffdc5a669109d34538b6ff639ac3eb9b25d44aad1bc3050580dd",
    "logs": [
      {
        "transactionIndex": 54,
        "blockNumber": 7503650,
        "transactionHash": "0x69864d052444ffdc5a669109d34538b6ff639ac3eb9b25d44aad1bc3050580dd",
        "address": "0x8ed2F29D044AA5BfC53e64AA6997c5635Cf62be3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008d9656505a20c9562488bfa6ea0d1ef6b12966d7"
        ],
        "data": "0x",
        "logIndex": 109,
        "blockHash": "0x045660fbc27061b8b0271bd70725bf5f1b018ad423224dcba80b939294d635d5"
      }
    ],
    "blockNumber": 7503650,
    "cumulativeGasUsed": "7419103",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0F0E38FCD59424d43BCeEA640A96F806962F5463",
    "1000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "902221a1375c045c8d98f9ed312af11b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IClayToken\",\"name\":\"_clay\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maximumBondRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daysLeftToMaturationDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APY_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BONDS_ISSUANCE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BONUS_APY_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clay\",\"outputs\":[{\"internalType\":\"contract IClayToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyYieldPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCloseDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDaysLeftToMaturationDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daysLeftToMaturationDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPercent\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daysLeftToMaturationDate\",\"type\":\"uint256\"}],\"name\":\"getRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_clayAmount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturationDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumBondRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBondDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn()\":{\"details\":\"Burns the remaining Clay in the contract*\"},\"claim()\":{\"details\":\"Burns zClay and returns the underlying Clay tokens*\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"issue(uint256)\":{\"params\":{\"_clayAmount\":\"The amount of CLAY deposited\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"issue(uint256)\":{\"notice\":\"Issues a zCLAY Bond depending on the amount of CLAY deposited and the current APY which depends on the time elapsed since bond programme inception\"}},\"notice\":\"You can deposit CLAY (ERC20 token native to Sumero) to get zCLAY Bonds (a new ERC20 representing the bond). These zCLAY Bonds can be minted upto a year from depositStartDate. The bonds will mature after a period of 3 years from the depositStartDate. There is a \\\"Fixed APY\\\" (Annual Percentage Yield) of 40% on the zCLAY Bonds and a \\\"Bonus APY\\\" of additional 20% that is constantly decreasing as the deposit close date is nearing (i.e. from a maximum of 20% to 0%). In total giving a maximum of 60% APY if a user creates bonds at Day 1 of bond start date. - FIXED_APY = 40% - BONUS_APY = 20% (decreases as deposit close date nears) Example: - User deposits 1 Clay and issues a zCLAY Bond on Day 1 of bond start date - [(deposit close timestamp - block timestamp) / (1 year in seconds) * Bonus_APY] - Total APY = APY + Bonus APY = 60% - User get 2.8 zCLAY Bond (Total APY (60%) for next 3 years i.e 180% total interest) - 1 + (180% of 1) => 1 + 1.8 => 2.8 The user can claim the zCLAY Bonds for equivalent value of CLAY after the maturation date. The user has to lock his CLAY in to zCLAY bonds for atleast 3 years. They are open to trade these bonds on a secondary market (i.e. via LP pools on Sumero)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ClayBonds.sol\":\"ClayBonds\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ClayBonds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IClayToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\n/**\\n    You can deposit CLAY (ERC20 token native to Sumero) to get zCLAY Bonds (a new ERC20 representing the bond).\\n\\n    These zCLAY Bonds can be minted upto a year from depositStartDate.\\n    The bonds will mature after a period of 3 years from the depositStartDate.\\n\\n    There is a \\\"Fixed APY\\\" (Annual Percentage Yield) of 40% on the zCLAY Bonds and a \\\"Bonus APY\\\" of additional 20% that is constantly decreasing as the deposit close date is nearing (i.e. from a maximum of 20% to 0%).\\n    In total giving a maximum of 60% APY if a user creates bonds at Day 1 of bond start date.\\n\\n    - FIXED_APY = 40%\\n    - BONUS_APY = 20% (decreases as deposit close date nears)\\n\\n    Example:\\n\\n    - User deposits 1 Clay and issues a zCLAY Bond on Day 1 of bond start date\\n    - [(deposit close timestamp - block timestamp) / (1 year in seconds) * Bonus_APY]\\n    - Total APY = APY + Bonus APY = 60%\\n    - User get 2.8 zCLAY Bond (Total APY (60%) for next 3 years i.e 180% total interest)\\n    - 1 + (180% of 1) => 1 + 1.8 => 2.8\\n    \\n    The user can claim the zCLAY Bonds for equivalent value of CLAY after the maturation date.\\n    The user has to lock his CLAY in to zCLAY bonds for atleast 3 years. They are open to trade these bonds on a secondary market (i.e. via LP pools on Sumero)\\n */\\ncontract ClayBonds is ERC20(\\\"zClay Token\\\", \\\"zCLAY\\\"), Ownable{\\n    IClayToken public clay;\\n\\n    // the maximum upper limit of bond rewards that this contract will give over it's lifetime\\n    uint256 public maximumBondRewards;\\n    // total zCLAY bonds locked into the contract\\n    uint256 public totalBondDeposits;\\n\\n    uint256 public depositStartDate;\\n    uint256 public depositCloseDate;\\n    uint256 public maturationDate;\\n\\n    uint256 public dailyYieldPercent;\\n\\n    uint256 public constant APY_PERCENT = 40;\\n    uint256 public constant BONUS_APY_PERCENT = 20;\\n    uint256 public constant BONDS_ISSUANCE_PERIOD = 1 days * 365;\\n\\n    event Issue(\\n        uint256 amount,\\n        uint256 daysLeftToMaturationDate,\\n        uint256 rewardPercent,\\n        uint256 reward\\n    );\\n\\n    constructor(IClayToken _clay, uint256 _maximumBondRewards) {\\n        clay = _clay;\\n        maximumBondRewards = _maximumBondRewards;\\n        depositStartDate = block.timestamp;\\n\\n        // TODO: take into consideration leap year?\\n\\n        // deposit close date is 1 year in future\\n        depositCloseDate = depositStartDate + BONDS_ISSUANCE_PERIOD;\\n        // maturation date of bond is 3 years in future\\n        maturationDate = depositStartDate + (BONDS_ISSUANCE_PERIOD * 3);\\n\\n        // calculate daily yield\\n        // APY details can be taken as constructor argument\\n        dailyYieldPercent =\\n            ((APY_PERCENT + BONUS_APY_PERCENT) * (1 ether)) /\\n            365;\\n    }\\n\\n    function getDaysLeftToMaturationDate()\\n        public\\n        view\\n        returns (uint256 daysLeftToMaturationDate)\\n    {\\n        if (maturationDate < block.timestamp) {\\n            return 0; // just return 0 instead of dealing with negatives\\n        }\\n        // calculate days remaining till maturation day\\n        daysLeftToMaturationDate =\\n            (maturationDate - block.timestamp) /\\n            (1 days);\\n    }\\n\\n    function getRewardPercent(uint256 daysLeftToMaturationDate)\\n        public\\n        view\\n        returns (uint256 rewardPercent)\\n    {\\n        // Total Percentage Reward => dailyYieldPercent * daysLeftToMaturationDate\\n        // adding 1 here to consider interest for the current ongoing day\\n        rewardPercent = dailyYieldPercent * (daysLeftToMaturationDate + 1);\\n    }\\n\\n    function getReward(uint256 _amount, uint256 _rewardPercent)\\n        public\\n        pure\\n        returns (uint256 reward)\\n    {\\n        // bondAmount => amount + (total percentage reward * amount)\\n        reward = ((_amount * _rewardPercent) / 100) / 1 ether;\\n    }\\n\\n    /**\\n     * Issues a zCLAY Bond depending on the amount of CLAY deposited and the current APY which depends on the time elapsed since bond programme inception\\n     * @param _clayAmount The amount of CLAY deposited\\n     */\\n    function issue(uint256 _clayAmount) public returns (uint256 bondAmount) {\\n        require(_clayAmount > 100, \\\"Clay Amount must be greater than 100 wei\\\");\\n        require(\\n            block.timestamp >= depositStartDate &&\\n                block.timestamp < depositCloseDate,\\n            \\\"Deposit closed\\\"\\n        );\\n\\n        uint256 daysLeftToMaturationDate = getDaysLeftToMaturationDate();\\n        uint256 rewardPercent = getRewardPercent(daysLeftToMaturationDate);\\n        uint256 reward = getReward(_clayAmount, rewardPercent);\\n\\n        bondAmount = _clayAmount + reward;\\n\\n        clay.transferFrom(msg.sender, address(this), _clayAmount);\\n        _mint(msg.sender, bondAmount);\\n\\n        totalBondDeposits = totalBondDeposits + bondAmount;\\n\\n        require(\\n            totalBondDeposits < maximumBondRewards,\\n            \\\"Maximum Bond Reward Pool Reached\\\"\\n        );\\n\\n        emit Issue(\\n            _clayAmount,\\n            daysLeftToMaturationDate,\\n            rewardPercent,\\n            reward\\n        );\\n    }\\n\\n    /**\\n     * @dev Burns zClay and returns the underlying Clay tokens\\n     **/\\n    function claim() public {\\n        require(\\n            maturationDate <= block.timestamp,\\n            \\\"Bond Maturity date not reached\\\"\\n        );\\n        uint256 balance = balanceOf(msg.sender);\\n        require(balance > 0, \\\"Balance must be greater than zero\\\");\\n        _burn(msg.sender, balance);\\n        clay.mint(msg.sender, balance);\\n    }\\n\\n    /**\\n     * @dev Burns the remaining Clay in the contract\\n     **/\\n    function burn() public onlyOwner{\\n        require(\\n            maturationDate <= block.timestamp,\\n            \\\"Bond Maturity date not reached\\\"\\n        );\\n        uint256 clayBalance = clay.balanceOf(address(this));\\n        clay.burn(address(this), clayBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x562b4e927fd01a45736a48b208c80984ff303ebbe54d1876121a6589436732bb\",\"license\":\"MIT\"},\"contracts/interfaces/IClayToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the Clay Token.\\n */\\ninterface IClayToken {\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5809cc044db90f05598a789ff174e0e310fae296f5d9601801debd626f2720cd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620017143803806200171483398101604081905262000034916200024d565b604080518082018252600b81526a3d21b630bc902a37b5b2b760a91b6020808301918252835180850190945260058452647a434c415960d81b9084015281519192916200008491600391620001a7565b5080516200009a906004906020840190620001a7565b505050620000b7620000b16200015160201b60201c565b62000155565b600680546001600160a01b0319166001600160a01b0384161790556007819055426009819055620000ee906301e13380906200029f565b600a55620001026301e133806003620002ba565b6009546200011191906200029f565b600b5561016d62000125601460286200029f565b6200013990670de0b6b3a7640000620002ba565b620001459190620002dc565b600c55506200033c9050565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001b590620002ff565b90600052602060002090601f016020900481019282620001d9576000855562000224565b82601f10620001f457805160ff191683800117855562000224565b8280016001018555821562000224579182015b828111156200022457825182559160200191906001019062000207565b506200023292915062000236565b5090565b5b8082111562000232576000815560010162000237565b600080604083850312156200026157600080fd5b82516001600160a01b03811681146200027957600080fd5b6020939093015192949293505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115620002b557620002b562000289565b500190565b6000816000190483118215151615620002d757620002d762000289565b500290565b600082620002fa57634e487b7160e01b600052601260045260246000fd5b500490565b600181811c908216806200031457607f821691505b602082108114156200033657634e487b7160e01b600052602260045260246000fd5b50919050565b6113c8806200034c6000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80638da5cb5b11610104578063b90bc519116100a2578063dd62ed3e11610071578063dd62ed3e14610390578063ec1f5a97146103a3578063f2fde38b146103ac578063ff6bca69146103bf57600080fd5b8063b90bc51914610358578063cc872b661461036b578063d66f0acb1461037e578063d6afbfd01461038757600080fd5b8063a457c2d7116100de578063a457c2d714610316578063a4d60c7c14610329578063a60872201461033c578063a9059cbb1461034557600080fd5b80638da5cb5b146102de57806395d89b411461030357806398975e851461030b57600080fd5b806344df8e701161017c5780635140af3f1161014b5780635140af3f1461029d57806370a08231146102a5578063715018a6146102ce57806379225699146102d657600080fd5b806344df8e701461026f5780634aec1928146102795780634e68d114146102825780634e71d92d1461029557600080fd5b806323b872dd116101b857806323b872dd14610232578063313ce5671461024557806339509351146102545780633f9d01c01461026757600080fd5b806306fdde03146101df578063095ea7b3146101fd57806318160ddd14610220575b600080fd5b6101e76103c8565b6040516101f49190611136565b60405180910390f35b61021061020b3660046111a7565b61045a565b60405190151581526020016101f4565b6002545b6040519081526020016101f4565b6102106102403660046111d1565b610472565b604051601281526020016101f4565b6102106102623660046111a7565b610496565b610224601481565b6102776104b8565b005b610224600c5481565b61022461029036600461120d565b6105fc565b61027761061c565b610224610716565b6102246102b3366004611226565b6001600160a01b031660009081526020819052604090205490565b610277610749565b610224602881565b6005546001600160a01b03165b6040516001600160a01b0390911681526020016101f4565b6101e761075d565b6102246301e1338081565b6102106103243660046111a7565b61076c565b6006546102eb906001600160a01b031681565b610224600a5481565b6102106103533660046111a7565b6107e7565b610224610366366004611241565b6107f5565b61022461037936600461120d565b610827565b61022460085481565b61022460075481565b61022461039e366004611263565b610a54565b610224600b5481565b6102776103ba366004611226565b610a7f565b61022460095481565b6060600380546103d790611296565b80601f016020809104026020016040519081016040528092919081815260200182805461040390611296565b80156104505780601f1061042557610100808354040283529160200191610450565b820191906000526020600020905b81548152906001019060200180831161043357829003601f168201915b5050505050905090565b600033610468818585610af8565b5060019392505050565b600033610480858285610c1d565b61048b858585610c97565b506001949350505050565b6000336104688185856104a98383610a54565b6104b391906112e7565b610af8565b6104c0610e65565b42600b5411156105175760405162461bcd60e51b815260206004820152601e60248201527f426f6e64204d617475726974792064617465206e6f742072656163686564000060448201526064015b60405180910390fd5b6006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561055b57600080fd5b505afa15801561056f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059391906112ff565b600654604051632770a7eb60e21b8152306004820152602481018390529192506001600160a01b031690639dc29fac906044015b600060405180830381600087803b1580156105e157600080fd5b505af11580156105f5573d6000803e3d6000fd5b5050505050565b60006106098260016112e7565b600c546106169190611318565b92915050565b42600b54111561066e5760405162461bcd60e51b815260206004820152601e60248201527f426f6e64204d617475726974792064617465206e6f7420726561636865640000604482015260640161050e565b33600090815260208190526040902054806106d55760405162461bcd60e51b815260206004820152602160248201527f42616c616e6365206d7573742062652067726561746572207468616e207a65726044820152606f60f81b606482015260840161050e565b6106df3382610ebf565b6006546040516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f19906044016105c7565b600042600b5410156107285750600090565b6201518042600b5461073a9190611337565b610744919061134e565b905090565b610751610e65565b61075b6000611005565b565b6060600480546103d790611296565b6000338161077a8286610a54565b9050838110156107da5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161050e565b61048b8286868403610af8565b600033610468818585610c97565b6000670de0b6b3a7640000606461080c8486611318565b610816919061134e565b610820919061134e565b9392505050565b60006064821161088a5760405162461bcd60e51b815260206004820152602860248201527f436c617920416d6f756e74206d7573742062652067726561746572207468616e604482015267203130302077656960c01b606482015260840161050e565b600954421015801561089d5750600a5442105b6108da5760405162461bcd60e51b815260206004820152600e60248201526d11195c1bdcda5d0818db1bdcd95960921b604482015260640161050e565b60006108e4610716565b905060006108f1826105fc565b905060006108ff85836107f5565b905061090b81866112e7565b6006546040516323b872dd60e01b8152336004820152306024820152604481018890529195506001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561095e57600080fd5b505af1158015610972573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109969190611370565b506109a13385611057565b836008546109af91906112e7565b600881905560075411610a045760405162461bcd60e51b815260206004820181905260248201527f4d6178696d756d20426f6e642052657761726420506f6f6c2052656163686564604482015260640161050e565b6040805186815260208101859052908101839052606081018290527fb93112bad930e8f857186a753ad92a9bb21c2c34169673ed07e60accffc430b69060800160405180910390a1505050919050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610a87610e65565b6001600160a01b038116610aec5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161050e565b610af581611005565b50565b6001600160a01b038316610b5a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161050e565b6001600160a01b038216610bbb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161050e565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000610c298484610a54565b90506000198114610c915781811015610c845760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161050e565b610c918484848403610af8565b50505050565b6001600160a01b038316610cfb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161050e565b6001600160a01b038216610d5d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161050e565b6001600160a01b03831660009081526020819052604090205481811015610dd55760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161050e565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610e0c9084906112e7565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610e5891815260200190565b60405180910390a3610c91565b6005546001600160a01b0316331461075b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161050e565b6001600160a01b038216610f1f5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161050e565b6001600160a01b03821660009081526020819052604090205481811015610f935760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161050e565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610fc2908490611337565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610c10565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166110ad5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161050e565b80600260008282546110bf91906112e7565b90915550506001600160a01b038216600090815260208190526040812080548392906110ec9084906112e7565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060208083528351808285015260005b8181101561116357858101830151858201604001528201611147565b81811115611175576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146111a257600080fd5b919050565b600080604083850312156111ba57600080fd5b6111c38361118b565b946020939093013593505050565b6000806000606084860312156111e657600080fd5b6111ef8461118b565b92506111fd6020850161118b565b9150604084013590509250925092565b60006020828403121561121f57600080fd5b5035919050565b60006020828403121561123857600080fd5b6108208261118b565b6000806040838503121561125457600080fd5b50508035926020909101359150565b6000806040838503121561127657600080fd5b61127f8361118b565b915061128d6020840161118b565b90509250929050565b600181811c908216806112aa57607f821691505b602082108114156112cb57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156112fa576112fa6112d1565b500190565b60006020828403121561131157600080fd5b5051919050565b6000816000190483118215151615611332576113326112d1565b500290565b600082821015611349576113496112d1565b500390565b60008261136b57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561138257600080fd5b8151801515811461082057600080fdfea26469706673582212200d30cdd9baedde144685eeed625ad4b3ef7ff16bc51020e3d2c6bd0a9a984d7264736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80638da5cb5b11610104578063b90bc519116100a2578063dd62ed3e11610071578063dd62ed3e14610390578063ec1f5a97146103a3578063f2fde38b146103ac578063ff6bca69146103bf57600080fd5b8063b90bc51914610358578063cc872b661461036b578063d66f0acb1461037e578063d6afbfd01461038757600080fd5b8063a457c2d7116100de578063a457c2d714610316578063a4d60c7c14610329578063a60872201461033c578063a9059cbb1461034557600080fd5b80638da5cb5b146102de57806395d89b411461030357806398975e851461030b57600080fd5b806344df8e701161017c5780635140af3f1161014b5780635140af3f1461029d57806370a08231146102a5578063715018a6146102ce57806379225699146102d657600080fd5b806344df8e701461026f5780634aec1928146102795780634e68d114146102825780634e71d92d1461029557600080fd5b806323b872dd116101b857806323b872dd14610232578063313ce5671461024557806339509351146102545780633f9d01c01461026757600080fd5b806306fdde03146101df578063095ea7b3146101fd57806318160ddd14610220575b600080fd5b6101e76103c8565b6040516101f49190611136565b60405180910390f35b61021061020b3660046111a7565b61045a565b60405190151581526020016101f4565b6002545b6040519081526020016101f4565b6102106102403660046111d1565b610472565b604051601281526020016101f4565b6102106102623660046111a7565b610496565b610224601481565b6102776104b8565b005b610224600c5481565b61022461029036600461120d565b6105fc565b61027761061c565b610224610716565b6102246102b3366004611226565b6001600160a01b031660009081526020819052604090205490565b610277610749565b610224602881565b6005546001600160a01b03165b6040516001600160a01b0390911681526020016101f4565b6101e761075d565b6102246301e1338081565b6102106103243660046111a7565b61076c565b6006546102eb906001600160a01b031681565b610224600a5481565b6102106103533660046111a7565b6107e7565b610224610366366004611241565b6107f5565b61022461037936600461120d565b610827565b61022460085481565b61022460075481565b61022461039e366004611263565b610a54565b610224600b5481565b6102776103ba366004611226565b610a7f565b61022460095481565b6060600380546103d790611296565b80601f016020809104026020016040519081016040528092919081815260200182805461040390611296565b80156104505780601f1061042557610100808354040283529160200191610450565b820191906000526020600020905b81548152906001019060200180831161043357829003601f168201915b5050505050905090565b600033610468818585610af8565b5060019392505050565b600033610480858285610c1d565b61048b858585610c97565b506001949350505050565b6000336104688185856104a98383610a54565b6104b391906112e7565b610af8565b6104c0610e65565b42600b5411156105175760405162461bcd60e51b815260206004820152601e60248201527f426f6e64204d617475726974792064617465206e6f742072656163686564000060448201526064015b60405180910390fd5b6006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561055b57600080fd5b505afa15801561056f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059391906112ff565b600654604051632770a7eb60e21b8152306004820152602481018390529192506001600160a01b031690639dc29fac906044015b600060405180830381600087803b1580156105e157600080fd5b505af11580156105f5573d6000803e3d6000fd5b5050505050565b60006106098260016112e7565b600c546106169190611318565b92915050565b42600b54111561066e5760405162461bcd60e51b815260206004820152601e60248201527f426f6e64204d617475726974792064617465206e6f7420726561636865640000604482015260640161050e565b33600090815260208190526040902054806106d55760405162461bcd60e51b815260206004820152602160248201527f42616c616e6365206d7573742062652067726561746572207468616e207a65726044820152606f60f81b606482015260840161050e565b6106df3382610ebf565b6006546040516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f19906044016105c7565b600042600b5410156107285750600090565b6201518042600b5461073a9190611337565b610744919061134e565b905090565b610751610e65565b61075b6000611005565b565b6060600480546103d790611296565b6000338161077a8286610a54565b9050838110156107da5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161050e565b61048b8286868403610af8565b600033610468818585610c97565b6000670de0b6b3a7640000606461080c8486611318565b610816919061134e565b610820919061134e565b9392505050565b60006064821161088a5760405162461bcd60e51b815260206004820152602860248201527f436c617920416d6f756e74206d7573742062652067726561746572207468616e604482015267203130302077656960c01b606482015260840161050e565b600954421015801561089d5750600a5442105b6108da5760405162461bcd60e51b815260206004820152600e60248201526d11195c1bdcda5d0818db1bdcd95960921b604482015260640161050e565b60006108e4610716565b905060006108f1826105fc565b905060006108ff85836107f5565b905061090b81866112e7565b6006546040516323b872dd60e01b8152336004820152306024820152604481018890529195506001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561095e57600080fd5b505af1158015610972573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109969190611370565b506109a13385611057565b836008546109af91906112e7565b600881905560075411610a045760405162461bcd60e51b815260206004820181905260248201527f4d6178696d756d20426f6e642052657761726420506f6f6c2052656163686564604482015260640161050e565b6040805186815260208101859052908101839052606081018290527fb93112bad930e8f857186a753ad92a9bb21c2c34169673ed07e60accffc430b69060800160405180910390a1505050919050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610a87610e65565b6001600160a01b038116610aec5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161050e565b610af581611005565b50565b6001600160a01b038316610b5a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161050e565b6001600160a01b038216610bbb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161050e565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000610c298484610a54565b90506000198114610c915781811015610c845760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161050e565b610c918484848403610af8565b50505050565b6001600160a01b038316610cfb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161050e565b6001600160a01b038216610d5d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161050e565b6001600160a01b03831660009081526020819052604090205481811015610dd55760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161050e565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610e0c9084906112e7565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610e5891815260200190565b60405180910390a3610c91565b6005546001600160a01b0316331461075b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161050e565b6001600160a01b038216610f1f5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161050e565b6001600160a01b03821660009081526020819052604090205481811015610f935760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161050e565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610fc2908490611337565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610c10565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166110ad5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161050e565b80600260008282546110bf91906112e7565b90915550506001600160a01b038216600090815260208190526040812080548392906110ec9084906112e7565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060208083528351808285015260005b8181101561116357858101830151858201604001528201611147565b81811115611175576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146111a257600080fd5b919050565b600080604083850312156111ba57600080fd5b6111c38361118b565b946020939093013593505050565b6000806000606084860312156111e657600080fd5b6111ef8461118b565b92506111fd6020850161118b565b9150604084013590509250925092565b60006020828403121561121f57600080fd5b5035919050565b60006020828403121561123857600080fd5b6108208261118b565b6000806040838503121561125457600080fd5b50508035926020909101359150565b6000806040838503121561127657600080fd5b61127f8361118b565b915061128d6020840161118b565b90509250929050565b600181811c908216806112aa57607f821691505b602082108114156112cb57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156112fa576112fa6112d1565b500190565b60006020828403121561131157600080fd5b5051919050565b6000816000190483118215151615611332576113326112d1565b500290565b600082821015611349576113496112d1565b500390565b60008261136b57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561138257600080fd5b8151801515811461082057600080fdfea26469706673582212200d30cdd9baedde144685eeed625ad4b3ef7ff16bc51020e3d2c6bd0a9a984d7264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn()": {
        "details": "Burns the remaining Clay in the contract*"
      },
      "claim()": {
        "details": "Burns zClay and returns the underlying Clay tokens*"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "issue(uint256)": {
        "params": {
          "_clayAmount": "The amount of CLAY deposited"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "issue(uint256)": {
        "notice": "Issues a zCLAY Bond depending on the amount of CLAY deposited and the current APY which depends on the time elapsed since bond programme inception"
      }
    },
    "notice": "You can deposit CLAY (ERC20 token native to Sumero) to get zCLAY Bonds (a new ERC20 representing the bond). These zCLAY Bonds can be minted upto a year from depositStartDate. The bonds will mature after a period of 3 years from the depositStartDate. There is a \"Fixed APY\" (Annual Percentage Yield) of 40% on the zCLAY Bonds and a \"Bonus APY\" of additional 20% that is constantly decreasing as the deposit close date is nearing (i.e. from a maximum of 20% to 0%). In total giving a maximum of 60% APY if a user creates bonds at Day 1 of bond start date. - FIXED_APY = 40% - BONUS_APY = 20% (decreases as deposit close date nears) Example: - User deposits 1 Clay and issues a zCLAY Bond on Day 1 of bond start date - [(deposit close timestamp - block timestamp) / (1 year in seconds) * Bonus_APY] - Total APY = APY + Bonus APY = 60% - User get 2.8 zCLAY Bond (Total APY (60%) for next 3 years i.e 180% total interest) - 1 + (180% of 1) => 1 + 1.8 => 2.8 The user can claim the zCLAY Bonds for equivalent value of CLAY after the maturation date. The user has to lock his CLAY in to zCLAY bonds for atleast 3 years. They are open to trade these bonds on a secondary market (i.e. via LP pools on Sumero)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 669,
        "contract": "contracts/ClayBonds.sol:ClayBonds",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 675,
        "contract": "contracts/ClayBonds.sol:ClayBonds",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 677,
        "contract": "contracts/ClayBonds.sol:ClayBonds",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 679,
        "contract": "contracts/ClayBonds.sol:ClayBonds",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 681,
        "contract": "contracts/ClayBonds.sol:ClayBonds",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 400,
        "contract": "contracts/ClayBonds.sol:ClayBonds",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3050,
        "contract": "contracts/ClayBonds.sol:ClayBonds",
        "label": "clay",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IClayToken)13622"
      },
      {
        "astId": 3052,
        "contract": "contracts/ClayBonds.sol:ClayBonds",
        "label": "maximumBondRewards",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3054,
        "contract": "contracts/ClayBonds.sol:ClayBonds",
        "label": "totalBondDeposits",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3056,
        "contract": "contracts/ClayBonds.sol:ClayBonds",
        "label": "depositStartDate",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3058,
        "contract": "contracts/ClayBonds.sol:ClayBonds",
        "label": "depositCloseDate",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3060,
        "contract": "contracts/ClayBonds.sol:ClayBonds",
        "label": "maturationDate",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3062,
        "contract": "contracts/ClayBonds.sol:ClayBonds",
        "label": "dailyYieldPercent",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IClayToken)13622": {
        "encoding": "inplace",
        "label": "contract IClayToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}