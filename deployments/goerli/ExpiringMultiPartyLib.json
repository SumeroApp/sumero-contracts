{
  "address": "0x982e4e1a299353331f8A2E360f6D6c85BfD67c00",
  "abi": [],
  "transactionHash": "0x177f5650b34f4ae3ec23685a87e4685130dabfba94af701bff0ecc9a052ad0b6",
  "receipt": {
    "to": null,
    "from": "0x8D9656505A20C9562488bfa6EA0d1eF6B12966d7",
    "contractAddress": "0x982e4e1a299353331f8A2E360f6D6c85BfD67c00",
    "transactionIndex": 27,
    "gasUsed": "5200378",
    "logsBloom": "0x
    "blockHash": "0x87db92ff5478d71efbd7e8eef6269131f59330fc51b2e0225b47876887f3ddb3",
    "transactionHash": "0x177f5650b34f4ae3ec23685a87e4685130dabfba94af701bff0ecc9a052ad0b6",
    "logs": [],
    "blockNumber": 7546319,
    "cumulativeGasUsed": "10368933",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1e68da7ce4bd93b091caf47b8ff3a37d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Using this library to deploy EMP's allows calling contracts to avoid importing the full EMP bytecode.\",\"kind\":\"dev\",\"methods\":{\"deploy(Liquidatable.ConstructorParams)\":{\"details\":\"Caller will need to register new EMP with the Registry to begin requesting prices. Caller is also responsible for enforcing constraints on `params`.\",\"params\":{\"params\":\"is a `ConstructorParams` object from ExpiringMultiParty.\"},\"returns\":{\"_0\":\"address of the deployed ExpiringMultiParty contract\"}}},\"title\":\"Provides convenient Expiring Multi Party contract utilities.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy(Liquidatable.ConstructorParams)\":{\"notice\":\"Returns address of new EMP deployed with given `params` configuration.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UMA/financial-templates/expiring-multiparty/ExpiringMultiPartyLib.sol\":\"ExpiringMultiPartyLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"contracts/UMA/common/implementation/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\n\\n/**\\n * @title Library for fixed point arithmetic on uints\\n */\\nlibrary FixedPoint {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For unsigned values:\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\\n\\n    // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\\n    struct Unsigned {\\n        uint256 rawValue;\\n    }\\n\\n    /**\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a uint to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledUint(uint256 a)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(uint256 a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(uint256 a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return Unsigned(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return add(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return sub(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(uint256 a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return sub(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as a uint256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\n        if (mod != 0) {\\n            return Unsigned(mulFloor.add(1));\\n        } else {\\n            return Unsigned(mulFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        // Since b is an uint, there is no risk of truncation and we can just mul it normally\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as a uint256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return Unsigned(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a uint256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(uint256 a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        return div(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, Unsigned memory b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\n        uint256 divFloor = aScaled.div(b.rawValue);\\n        uint256 mod = aScaled.mod(b.rawValue);\\n        if (mod != 0) {\\n            return Unsigned(divFloor.add(1));\\n        } else {\\n            return Unsigned(divFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\n        // This creates the possibility of overflow if b is very large.\\n        return divCeil(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Unsigned memory a, uint256 b)\\n        internal\\n        pure\\n        returns (Unsigned memory output)\\n    {\\n        output = fromUnscaledUint(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------------------------------------- SIGNED -------------------------------------------------------------\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For signed values:\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\n\\n    struct Signed {\\n        int256 rawValue;\\n    }\\n\\n    function fromSigned(Signed memory a)\\n        internal\\n        pure\\n        returns (Unsigned memory)\\n    {\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\n        return Unsigned(uint256(a.rawValue));\\n    }\\n\\n    function fromUnsigned(Unsigned memory a)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\n        return Signed(int256(a.rawValue));\\n    }\\n\\n    /**\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a int to convert into a FixedPoint.Signed.\\n     * @return the converted FixedPoint.Signed.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a int256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, int256 b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(int256 a, Signed memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, int256 b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(int256 a, Signed memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, int256 b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(int256 a, Signed memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, int256 b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(int256 a, Signed memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        return Signed(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, int256 b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        return add(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        return Signed(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, int256 b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        return sub(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(int256 a, Signed memory b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        return sub(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as an int256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, int256 b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(mulTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(mulTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, int256 b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as an int256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, int256 b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        return Signed(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a an int256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(int256 a, Signed memory b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        return div(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, Signed memory b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = aScaled % b.rawValue;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(divTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(divTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, int256 b)\\n        internal\\n        pure\\n        returns (Signed memory)\\n    {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\n        // This creates the possibility of overflow if b is very large.\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a uint256 (negative exponents are not allowed).\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Signed memory a, uint256 b)\\n        internal\\n        pure\\n        returns (Signed memory output)\\n    {\\n        output = fromUnscaledInt(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6581e8d3ea75875a673b896bd2cf1318734f9469ca0f586e8be0559fd0ba7be2\",\"license\":\"MIT\"},\"contracts/UMA/common/implementation/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\n */\\ncontract Lockable {\\n    bool private _notEntered;\\n\\n    constructor() {\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\n        // refund coming into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\\n     * function that does the actual state modification.\\n     */\\n    modifier nonReentrant() {\\n        _preEntranceCheck();\\n        _preEntranceSet();\\n        _;\\n        _postEntranceReset();\\n    }\\n\\n    /**\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\n     */\\n    modifier nonReentrantView() {\\n        _preEntranceCheck();\\n        _;\\n    }\\n\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\\n    // then call `_postEntranceReset()`.\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\n    function _preEntranceCheck() internal view {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n    }\\n\\n    function _preEntranceSet() internal {\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n    }\\n\\n    function _postEntranceReset() internal {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    // These functions are intended to be used by child contracts to temporarily disable and re-enable the guard.\\n    // Intended use:\\n    // _startReentrantGuardDisabled();\\n    // ...\\n    // _endReentrantGuardDisabled();\\n    //\\n    // IMPORTANT: these should NEVER be used in a method that isn't inside a nonReentrant block. Otherwise, it's\\n    // possible to permanently lock your contract.\\n    function _startReentrantGuardDisabled() internal {\\n        _notEntered = true;\\n    }\\n\\n    function _endReentrantGuardDisabled() internal {\\n        _notEntered = false;\\n    }\\n}\\n\",\"keccak256\":\"0x62f70caf33b9b53618647ddbf1cb7a4ff94593f73d4fbfc7eaea59811bb6771f\",\"license\":\"MIT\"},\"contracts/UMA/common/implementation/Testable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Timer.sol\\\";\\n\\n/**\\n * @title Base class that provides time overrides, but only if being run in test mode.\\n */\\nabstract contract Testable {\\n    // If the contract is being run in production, then `timerAddress` will be the 0x0 address.\\n    // Note: this variable should be set on construction and never modified.\\n    address public timerAddress;\\n\\n    /**\\n     * @notice Constructs the Testable contract. Called by child contracts.\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\n     * Must be set to 0x0 for production environments that use live time.\\n     */\\n    constructor(address _timerAddress) {\\n        timerAddress = _timerAddress;\\n    }\\n\\n    /**\\n     * @notice Reverts if not running in test mode.\\n     */\\n    modifier onlyIfTest() {\\n        require(timerAddress != address(0x0));\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the current time.\\n     * @dev Will revert if not running in test mode.\\n     * @param time timestamp to set current Testable time to.\\n     */\\n    function setCurrentTime(uint256 time) external onlyIfTest {\\n        Timer(timerAddress).setCurrentTime(time);\\n    }\\n\\n    /**\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\n     * Otherwise, it will return the block timestamp.\\n     * @return uint for the current Testable timestamp.\\n     */\\n    function getCurrentTime() public view virtual returns (uint256) {\\n        if (timerAddress != address(0x0)) {\\n            return Timer(timerAddress).getCurrentTime();\\n        } else {\\n            return block.timestamp; // solhint-disable-line not-rely-on-time\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x35d99152ba1a4c83027cdff79885aa705f00fe4f7d50aaf8cebf659a76cee07a\",\"license\":\"MIT\"},\"contracts/UMA/common/implementation/Timer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Universal store of current contract time for testing environments.\\n */\\ncontract Timer {\\n    uint256 private currentTime;\\n\\n    constructor() {\\n        currentTime = block.timestamp; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /**\\n     * @notice Sets the current time.\\n     * @dev Will revert if not running in test mode.\\n     * @param time timestamp to set `currentTime` to.\\n     */\\n    function setCurrentTime(uint256 time) external {\\n        currentTime = time;\\n    }\\n\\n    /**\\n     * @notice Gets the currentTime variable set in the Timer.\\n     * @return uint256 for the current Testable timestamp.\\n     */\\n    function getCurrentTime() public view returns (uint256) {\\n        return currentTime;\\n    }\\n}\\n\",\"keccak256\":\"0xc2e1472718bb5ec7d523d0b639a470d36bb07b70753ce3dc9fa60969ddfa5048\",\"license\":\"MIT\"},\"contracts/UMA/common/interfaces/ExpandedIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ERC20 interface that includes burn and mint methods.\\n */\\nabstract contract ExpandedIERC20 is IERC20 {\\n    /**\\n     * @notice Burns a specific amount of the caller's tokens.\\n     * @dev Only burns the caller's tokens, so it is safe to leave this method permissionless.\\n     */\\n    function burn(uint256 value) external virtual;\\n\\n    /**\\n     * @dev Burns `value` tokens owned by `recipient`.\\n     * @param recipient address to burn tokens from.\\n     * @param value amount of tokens to burn.\\n     */\\n    function burnFrom(address recipient, uint256 value)\\n        external\\n        virtual\\n        returns (bool);\\n\\n    /**\\n     * @notice Mints tokens and adds them to the balance of the `to` address.\\n     * @dev This method should be permissioned to only allow designated parties to mint tokens.\\n     */\\n    function mint(address to, uint256 value) external virtual returns (bool);\\n\\n    function addMinter(address account) external virtual;\\n\\n    function addBurner(address account) external virtual;\\n\\n    function resetOwner(address account) external virtual;\\n}\\n\",\"keccak256\":\"0xcbb9d2ddd811e037240a3dde2ff25390f31151ac18f2042959523670276c61e6\",\"license\":\"MIT\"},\"contracts/UMA/common/interfaces/IERC20Standard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ERC20 interface that includes the decimals read only method.\\n */\\ninterface IERC20Standard is IERC20 {\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05`\\n     * (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value\\n     * {ERC20} uses, unless {_setupDecimals} is called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic\\n     * of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd4006ff9790e0a4e62b9d88d84d7167f99db44066d738e7bc531b7ad3ec58fcb\",\"license\":\"MIT\"},\"contracts/UMA/financial-templates/common/FeePayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../../common/implementation/Lockable.sol\\\";\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\nimport \\\"../../common/implementation/Testable.sol\\\";\\n\\nimport \\\"../../oracle/interfaces/StoreInterface.sol\\\";\\nimport \\\"../../oracle/interfaces/FinderInterface.sol\\\";\\nimport \\\"../../oracle/interfaces/AdministrateeInterface.sol\\\";\\nimport \\\"../../oracle/implementation/Constants.sol\\\";\\n\\n/**\\n * @title FeePayer contract.\\n * @notice Provides fee payment functionality for the ExpiringMultiParty contract.\\n * contract is abstract as each derived contract that inherits `FeePayer` must implement `pfc()`.\\n */\\n\\nabstract contract FeePayer is AdministrateeInterface, Testable, Lockable {\\n    using SafeMath for uint256;\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using SafeERC20 for IERC20;\\n\\n    /****************************************\\n     *      FEE PAYER DATA STRUCTURES       *\\n     ****************************************/\\n\\n    // The collateral currency used to back the positions in this contract.\\n    IERC20 public collateralCurrency;\\n\\n    // Finder contract used to look up addresses for UMA system contracts.\\n    FinderInterface public finder;\\n\\n    // Tracks the last block time when the fees were paid.\\n    uint256 private lastPaymentTime;\\n\\n    // Tracks the cumulative fees that have been paid by the contract for use by derived contracts.\\n    // The multiplier starts at 1, and is updated by computing cumulativeFeeMultiplier * (1 - effectiveFee).\\n    // Put another way, the cumulativeFeeMultiplier is (1 - effectiveFee1) * (1 - effectiveFee2) ...\\n    // For example:\\n    // The cumulativeFeeMultiplier should start at 1.\\n    // If a 1% fee is charged, the multiplier should update to .99.\\n    // If another 1% fee is charged, the multiplier should be 0.99^2 (0.9801).\\n    FixedPoint.Unsigned public cumulativeFeeMultiplier;\\n\\n    /****************************************\\n     *                EVENTS                *\\n     ****************************************/\\n\\n    event RegularFeesPaid(uint256 indexed regularFee, uint256 indexed lateFee);\\n    event FinalFeesPaid(uint256 indexed amount);\\n\\n    /****************************************\\n     *              MODIFIERS               *\\n     ****************************************/\\n\\n    // modifier that calls payRegularFees().\\n    modifier fees() virtual {\\n        // Note: the regular fee is applied on every fee-accruing transaction, where the total change is simply the\\n        // regular fee applied linearly since the last update. This implies that the compounding rate depends on the\\n        // frequency of update transactions that have this modifier, and it never reaches the ideal of continuous\\n        // compounding. This approximate-compounding pattern is common in the Ethereum ecosystem because of the\\n        // complexity of compounding data on-chain.\\n        payRegularFees();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructs the FeePayer contract. Called by child contracts.\\n     * @param _collateralAddress ERC20 token that is used as the underlying collateral for the synthetic.\\n     * @param _finderAddress UMA protocol Finder used to discover other protocol contracts.\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\n     * Must be set to 0x0 for production environments that use live time.\\n     */\\n    constructor(\\n        address _collateralAddress,\\n        address _finderAddress,\\n        address _timerAddress\\n    ) Testable(_timerAddress) {\\n        collateralCurrency = IERC20(_collateralAddress);\\n        finder = FinderInterface(_finderAddress);\\n        lastPaymentTime = getCurrentTime();\\n        cumulativeFeeMultiplier = FixedPoint.fromUnscaledUint(1);\\n    }\\n\\n    /****************************************\\n     *        FEE PAYMENT FUNCTIONS         *\\n     ****************************************/\\n\\n    /**\\n     * @notice Pays UMA DVM regular fees (as a % of the collateral pool) to the Store contract.\\n     * @dev These must be paid periodically for the life of the contract. If the contract has not paid its regular fee\\n     * in a week or more then a late penalty is applied which is sent to the caller. If the amount of\\n     * fees owed are greater than the pfc, then this will pay as much as possible from the available collateral.\\n     * An event is only fired if the fees charged are greater than 0.\\n     * @return totalPaid Amount of collateral that the contract paid (sum of the amount paid to the Store and caller).\\n     * This returns 0 and exit early if there is no pfc, fees were already paid during the current block, or the fee rate is 0.\\n     */\\n    function payRegularFees()\\n        public\\n        nonReentrant\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        uint256 time = getCurrentTime();\\n        FixedPoint.Unsigned memory collateralPool = _pfc();\\n\\n        // Fetch the regular fees, late penalty and the max possible to pay given the current collateral within the contract.\\n        (\\n            FixedPoint.Unsigned memory regularFee,\\n            FixedPoint.Unsigned memory latePenalty,\\n            FixedPoint.Unsigned memory totalPaid\\n        ) = getOutstandingRegularFees(time);\\n        lastPaymentTime = time;\\n\\n        // If there are no fees to pay then exit early.\\n        if (totalPaid.isEqual(0)) {\\n            return totalPaid;\\n        }\\n\\n        emit RegularFeesPaid(regularFee.rawValue, latePenalty.rawValue);\\n\\n        _adjustCumulativeFeeMultiplier(totalPaid, collateralPool);\\n\\n        if (regularFee.isGreaterThan(0)) {\\n            StoreInterface store = _getStore();\\n            collateralCurrency.safeIncreaseAllowance(\\n                address(store),\\n                regularFee.rawValue\\n            );\\n            store.payOracleFeesErc20(address(collateralCurrency), regularFee);\\n        }\\n\\n        if (latePenalty.isGreaterThan(0)) {\\n            collateralCurrency.safeTransfer(msg.sender, latePenalty.rawValue);\\n        }\\n        return totalPaid;\\n    }\\n\\n    /**\\n     * @notice Fetch any regular fees that the contract has pending but has not yet paid. If the fees to be paid are more\\n     * than the total collateral within the contract then the totalPaid returned is full contract collateral amount.\\n     * @dev This returns 0 and exit early if there is no pfc, fees were already paid during the current block, or the fee rate is 0.\\n     * @return regularFee outstanding unpaid regular fee.\\n     * @return latePenalty outstanding unpaid late fee for being late in previous fee payments.\\n     * @return totalPaid Amount of collateral that the contract paid (sum of the amount paid to the Store and caller).\\n     */\\n    function getOutstandingRegularFees(uint256 time)\\n        public\\n        view\\n        returns (\\n            FixedPoint.Unsigned memory regularFee,\\n            FixedPoint.Unsigned memory latePenalty,\\n            FixedPoint.Unsigned memory totalPaid\\n        )\\n    {\\n        StoreInterface store = _getStore();\\n        FixedPoint.Unsigned memory collateralPool = _pfc();\\n\\n        // Exit early if there is no collateral or if fees were already paid during this block.\\n        if (collateralPool.isEqual(0) || lastPaymentTime == time) {\\n            return (regularFee, latePenalty, totalPaid);\\n        }\\n\\n        (regularFee, latePenalty) = store.computeRegularFee(\\n            lastPaymentTime,\\n            time,\\n            collateralPool\\n        );\\n\\n        totalPaid = regularFee.add(latePenalty);\\n        if (totalPaid.isEqual(0)) {\\n            return (regularFee, latePenalty, totalPaid);\\n        }\\n        // If the effective fees paid as a % of the pfc is > 100%, then we need to reduce it and make the contract pay\\n        // as much of the fee that it can (up to 100% of its pfc). We'll reduce the late penalty first and then the\\n        // regular fee, which has the effect of paying the store first, followed by the caller if there is any fee remaining.\\n        if (totalPaid.isGreaterThan(collateralPool)) {\\n            FixedPoint.Unsigned memory deficit = totalPaid.sub(collateralPool);\\n            FixedPoint.Unsigned memory latePenaltyReduction = FixedPoint.min(\\n                latePenalty,\\n                deficit\\n            );\\n            latePenalty = latePenalty.sub(latePenaltyReduction);\\n            deficit = deficit.sub(latePenaltyReduction);\\n            regularFee = regularFee.sub(FixedPoint.min(regularFee, deficit));\\n            totalPaid = collateralPool;\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the current profit from corruption for this contract in terms of the collateral currency.\\n     * @dev This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are\\n     * expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.\\n     * @return pfc value for equal to the current profit from corruption denominated in collateral currency.\\n     */\\n    function pfc()\\n        external\\n        view\\n        override\\n        nonReentrantView\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        return _pfc();\\n    }\\n\\n    /**\\n     * @notice Removes excess collateral balance not counted in the PfC by distributing it out pro-rata to all sponsors.\\n     * @dev Multiplying the `cumulativeFeeMultiplier` by the ratio of non-PfC-collateral :: PfC-collateral effectively\\n     * pays all sponsors a pro-rata portion of the excess collateral.\\n     * @dev This will revert if PfC is 0 and this contract's collateral balance > 0.\\n     */\\n    function gulp() external nonReentrant {\\n        _gulp();\\n    }\\n\\n    /****************************************\\n     *         INTERNAL FUNCTIONS           *\\n     ****************************************/\\n\\n    // Pays UMA Oracle final fees of `amount` in `collateralCurrency` to the Store contract. Final fee is a flat fee\\n    // charged for each price request. If payer is the contract, adjusts internal bookkeeping variables. If payer is not\\n    // the contract, pulls in `amount` of collateral currency.\\n    function _payFinalFees(address payer, FixedPoint.Unsigned memory amount)\\n        internal\\n    {\\n        if (amount.isEqual(0)) {\\n            return;\\n        }\\n\\n        if (payer != address(this)) {\\n            // If the payer is not the contract pull the collateral from the payer.\\n            collateralCurrency.safeTransferFrom(\\n                payer,\\n                address(this),\\n                amount.rawValue\\n            );\\n        } else {\\n            // If the payer is the contract, adjust the cumulativeFeeMultiplier to compensate.\\n            FixedPoint.Unsigned memory collateralPool = _pfc();\\n\\n            // The final fee must be < available collateral or the fee will be larger than 100%.\\n            // Note: revert reason removed to save bytecode.\\n            require(collateralPool.isGreaterThan(amount));\\n\\n            _adjustCumulativeFeeMultiplier(amount, collateralPool);\\n        }\\n\\n        emit FinalFeesPaid(amount.rawValue);\\n\\n        StoreInterface store = _getStore();\\n        collateralCurrency.safeIncreaseAllowance(\\n            address(store),\\n            amount.rawValue\\n        );\\n        store.payOracleFeesErc20(address(collateralCurrency), amount);\\n    }\\n\\n    function _gulp() internal {\\n        FixedPoint.Unsigned memory currentPfc = _pfc();\\n        FixedPoint.Unsigned memory currentBalance = FixedPoint.Unsigned(\\n            collateralCurrency.balanceOf(address(this))\\n        );\\n        if (currentPfc.isLessThan(currentBalance)) {\\n            cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(\\n                currentBalance.div(currentPfc)\\n            );\\n        }\\n    }\\n\\n    function _pfc() internal view virtual returns (FixedPoint.Unsigned memory);\\n\\n    function _getStore() internal view returns (StoreInterface) {\\n        return\\n            StoreInterface(\\n                finder.getImplementationAddress(OracleInterfaces.Store)\\n            );\\n    }\\n\\n    function _computeFinalFees()\\n        internal\\n        view\\n        returns (FixedPoint.Unsigned memory finalFees)\\n    {\\n        StoreInterface store = _getStore();\\n        return store.computeFinalFee(address(collateralCurrency));\\n    }\\n\\n    // Returns the user's collateral minus any fees that have been subtracted since it was originally\\n    // deposited into the contract. Note: if the contract has paid fees since it was deployed, the raw\\n    // value should be larger than the returned value.\\n    function _getFeeAdjustedCollateral(FixedPoint.Unsigned memory rawCollateral)\\n        internal\\n        view\\n        returns (FixedPoint.Unsigned memory collateral)\\n    {\\n        return rawCollateral.mul(cumulativeFeeMultiplier);\\n    }\\n\\n    // Returns the user's collateral minus any pending fees that have yet to be subtracted.\\n    function _getPendingRegularFeeAdjustedCollateral(\\n        FixedPoint.Unsigned memory rawCollateral\\n    ) internal view returns (FixedPoint.Unsigned memory) {\\n        (\\n            ,\\n            ,\\n            FixedPoint.Unsigned memory currentTotalOutstandingRegularFees\\n        ) = getOutstandingRegularFees(getCurrentTime());\\n        if (\\n            currentTotalOutstandingRegularFees.isEqual(\\n                FixedPoint.fromUnscaledUint(0)\\n            )\\n        ) return rawCollateral;\\n\\n        // Calculate the total outstanding regular fee as a fraction of the total contract PFC.\\n        FixedPoint.Unsigned\\n            memory effectiveOutstandingFee = currentTotalOutstandingRegularFees\\n                .divCeil(_pfc());\\n\\n        // Scale as rawCollateral* (1 - effectiveOutstandingFee) to apply the pro-rata amount to the regular fee.\\n        return\\n            rawCollateral.mul(\\n                FixedPoint.fromUnscaledUint(1).sub(effectiveOutstandingFee)\\n            );\\n    }\\n\\n    // Converts a user-readable collateral value into a raw value that accounts for already-assessed fees. If any fees\\n    // have been taken from this contract in the past, then the raw value will be larger than the user-readable value.\\n    function _convertToRawCollateral(FixedPoint.Unsigned memory collateral)\\n        internal\\n        view\\n        returns (FixedPoint.Unsigned memory rawCollateral)\\n    {\\n        return collateral.div(cumulativeFeeMultiplier);\\n    }\\n\\n    // Decrease rawCollateral by a fee-adjusted collateralToRemove amount. Fee adjustment scales up collateralToRemove\\n    // by dividing it by cumulativeFeeMultiplier. There is potential for this quotient to be floored, therefore\\n    // rawCollateral is decreased by less than expected. Because this method is usually called in conjunction with an\\n    // actual removal of collateral from this contract, return the fee-adjusted amount that the rawCollateral is\\n    // decreased by so that the caller can minimize error between collateral removed and rawCollateral debited.\\n    function _removeCollateral(\\n        FixedPoint.Unsigned storage rawCollateral,\\n        FixedPoint.Unsigned memory collateralToRemove\\n    ) internal returns (FixedPoint.Unsigned memory removedCollateral) {\\n        FixedPoint.Unsigned memory initialBalance = _getFeeAdjustedCollateral(\\n            rawCollateral\\n        );\\n        FixedPoint.Unsigned memory adjustedCollateral = _convertToRawCollateral(\\n            collateralToRemove\\n        );\\n        rawCollateral.rawValue = rawCollateral.sub(adjustedCollateral).rawValue;\\n        removedCollateral = initialBalance.sub(\\n            _getFeeAdjustedCollateral(rawCollateral)\\n        );\\n    }\\n\\n    // Increase rawCollateral by a fee-adjusted collateralToAdd amount. Fee adjustment scales up collateralToAdd\\n    // by dividing it by cumulativeFeeMultiplier. There is potential for this quotient to be floored, therefore\\n    // rawCollateral is increased by less than expected. Because this method is usually called in conjunction with an\\n    // actual addition of collateral to this contract, return the fee-adjusted amount that the rawCollateral is\\n    // increased by so that the caller can minimize error between collateral added and rawCollateral credited.\\n    // NOTE: This return value exists only for the sake of symmetry with _removeCollateral. We don't actually use it\\n    // because we are OK if more collateral is stored in the contract than is represented by rawTotalPositionCollateral.\\n    function _addCollateral(\\n        FixedPoint.Unsigned storage rawCollateral,\\n        FixedPoint.Unsigned memory collateralToAdd\\n    ) internal returns (FixedPoint.Unsigned memory addedCollateral) {\\n        FixedPoint.Unsigned memory initialBalance = _getFeeAdjustedCollateral(\\n            rawCollateral\\n        );\\n        FixedPoint.Unsigned memory adjustedCollateral = _convertToRawCollateral(\\n            collateralToAdd\\n        );\\n        rawCollateral.rawValue = rawCollateral.add(adjustedCollateral).rawValue;\\n        addedCollateral = _getFeeAdjustedCollateral(rawCollateral).sub(\\n            initialBalance\\n        );\\n    }\\n\\n    // Scale the cumulativeFeeMultiplier by the ratio of fees paid to the current available collateral.\\n    function _adjustCumulativeFeeMultiplier(\\n        FixedPoint.Unsigned memory amount,\\n        FixedPoint.Unsigned memory currentPfc\\n    ) internal {\\n        FixedPoint.Unsigned memory effectiveFee = amount.divCeil(currentPfc);\\n        cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(\\n            FixedPoint.fromUnscaledUint(1).sub(effectiveFee)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xb6c08dd271fbb42c24fd2b7105f1b7f53a0f88a0f0fe284931568e58f13318bd\",\"license\":\"MIT\"},\"contracts/UMA/financial-templates/common/financial-product-libraries/expiring-multiparty-libraries/FinancialProductLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../../../../common/implementation/FixedPoint.sol\\\";\\n\\ninterface ExpiringContractInterface {\\n    function expirationTimestamp() external view returns (uint256);\\n}\\n\\n/**\\n * @title Financial product library contract\\n * @notice Provides price and collateral requirement transformation interfaces that can be overridden by custom\\n * Financial product library implementations.\\n */\\nabstract contract FinancialProductLibrary {\\n    using FixedPoint for FixedPoint.Unsigned;\\n\\n    /**\\n     * @notice Transforms a given oracle price using the financial product libraries transformation logic.\\n     * @param oraclePrice input price returned by the DVM to be transformed.\\n     * @return transformedOraclePrice input oraclePrice with the transformation function applied.\\n     */\\n    function transformPrice(FixedPoint.Unsigned memory oraclePrice, uint256)\\n        public\\n        view\\n        virtual\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        return oraclePrice;\\n    }\\n\\n    /**\\n     * @notice Transforms a given collateral requirement using the financial product libraries transformation logic.\\n     * @param collateralRequirement input collateral requirement to be transformed.\\n     * @return transformedCollateralRequirement input collateral requirement with the transformation function applied.\\n     */\\n    function transformCollateralRequirement(\\n        FixedPoint.Unsigned memory,\\n        FixedPoint.Unsigned memory collateralRequirement\\n    ) public view virtual returns (FixedPoint.Unsigned memory) {\\n        return collateralRequirement;\\n    }\\n\\n    /**\\n     * @notice Transforms a given price identifier using the financial product libraries transformation logic.\\n     * @param priceIdentifier input price identifier defined for the financial contract.\\n     * @return transformedPriceIdentifier input price identifier with the transformation function applied.\\n     */\\n    function transformPriceIdentifier(bytes32 priceIdentifier, uint256)\\n        public\\n        view\\n        virtual\\n        returns (bytes32)\\n    {\\n        return priceIdentifier;\\n    }\\n}\\n\",\"keccak256\":\"0xff9f77f2005cb07c99ad75bc88bfb8baae81c285d1e486e2bdc11052bc6a4cdd\",\"license\":\"MIT\"},\"contracts/UMA/financial-templates/expiring-multiparty/ExpiringMultiParty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Liquidatable.sol\\\";\\n\\n/**\\n * @title Expiring Multi Party.\\n * @notice Convenient wrapper for Liquidatable.\\n */\\ncontract ExpiringMultiParty is Liquidatable {\\n    /**\\n     * @notice Constructs the ExpiringMultiParty contract.\\n     * @param params struct to define input parameters for construction of Liquidatable. Some params\\n     * are fed directly into the PricelessPositionManager's constructor within the inheritance tree.\\n     */\\n    constructor(ConstructorParams memory params)\\n        Liquidatable(params)\\n    // Note: since there is no logic here, there is no need to add a re-entrancy guard.\\n    {\\n\\n    }\\n}\\n\",\"keccak256\":\"0x5c0b655eaf9beb5d731d67fd306d7bbf3c3193fddb195a2b6ba1b66f087cee37\",\"license\":\"MIT\"},\"contracts/UMA/financial-templates/expiring-multiparty/ExpiringMultiPartyLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ExpiringMultiParty.sol\\\";\\n\\n/**\\n * @title Provides convenient Expiring Multi Party contract utilities.\\n * @dev Using this library to deploy EMP's allows calling contracts to avoid importing the full EMP bytecode.\\n */\\nlibrary ExpiringMultiPartyLib {\\n    /**\\n     * @notice Returns address of new EMP deployed with given `params` configuration.\\n     * @dev Caller will need to register new EMP with the Registry to begin requesting prices. Caller is also\\n     * responsible for enforcing constraints on `params`.\\n     * @param params is a `ConstructorParams` object from ExpiringMultiParty.\\n     * @return address of the deployed ExpiringMultiParty contract\\n     */\\n    function deploy(ExpiringMultiParty.ConstructorParams memory params)\\n        public\\n        returns (address)\\n    {\\n        ExpiringMultiParty derivative = new ExpiringMultiParty(params);\\n        return address(derivative);\\n    }\\n}\\n\",\"keccak256\":\"0xdfe91778407dcb82307a061eba935f8525460675307e48959a499ed634f2b8aa\",\"license\":\"MIT\"},\"contracts/UMA/financial-templates/expiring-multiparty/Liquidatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./PricelessPositionManager.sol\\\";\\n\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\n\\n/**\\n * @title Liquidatable\\n * @notice Adds logic to a position-managing contract that enables callers to liquidate an undercollateralized position.\\n * @dev The liquidation has a liveness period before expiring successfully, during which someone can \\\"dispute\\\" the\\n * liquidation, which sends a price request to the relevant Oracle to settle the final collateralization ratio based on\\n * a DVM price. The contract enforces dispute rewards in order to incentivize disputers to correctly dispute false\\n * liquidations and compensate position sponsors who had their position incorrectly liquidated. Importantly, a\\n * prospective disputer must deposit a dispute bond that they can lose in the case of an unsuccessful dispute.\\n * NOTE: this contract does _not_ work with ERC777 collateral currencies or any others that call into the receiver on\\n * transfer(). Using an ERC777 token would allow a user to maliciously grief other participants (while also losing\\n * money themselves).\\n */\\ncontract Liquidatable is PricelessPositionManager {\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for ExpandedIERC20;\\n    using Address for address;\\n\\n    /****************************************\\n     *     LIQUIDATION DATA STRUCTURES      *\\n     ****************************************/\\n\\n    // Because of the check in withdrawable(), the order of these enum values should not change.\\n    enum Status {\\n        Uninitialized,\\n        NotDisputed,\\n        Disputed,\\n        DisputeSucceeded,\\n        DisputeFailed\\n    }\\n\\n    struct LiquidationData {\\n        // Following variables set upon creation of liquidation:\\n        address sponsor; // Address of the liquidated position's sponsor\\n        address liquidator; // Address who created this liquidation\\n        Status state; // Liquidated (and expired or not), Pending a Dispute, or Dispute has resolved\\n        uint256 liquidationTime; // Time when liquidation is initiated, needed to get price from Oracle\\n        // Following variables determined by the position that is being liquidated:\\n        FixedPoint.Unsigned tokensOutstanding; // Synthetic tokens required to be burned by liquidator to initiate dispute\\n        FixedPoint.Unsigned lockedCollateral; // Collateral locked by contract and released upon expiry or post-dispute\\n        // Amount of collateral being liquidated, which could be different from\\n        // lockedCollateral if there were pending withdrawals at the time of liquidation\\n        FixedPoint.Unsigned liquidatedCollateral;\\n        // Unit value (starts at 1) that is used to track the fees per unit of collateral over the course of the liquidation.\\n        FixedPoint.Unsigned rawUnitCollateral;\\n        // Following variable set upon initiation of a dispute:\\n        address disputer; // Person who is disputing a liquidation\\n        // Following variable set upon a resolution of a dispute:\\n        FixedPoint.Unsigned settlementPrice; // Final price as determined by an Oracle following a dispute\\n        FixedPoint.Unsigned finalFee;\\n    }\\n\\n    // Define the contract's constructor parameters as a struct to enable more variables to be specified.\\n    // This is required to enable more params, over and above Solidity's limits.\\n    struct ConstructorParams {\\n        // Params for PricelessPositionManager only.\\n        uint256 expirationTimestamp;\\n        uint256 withdrawalLiveness;\\n        address collateralAddress;\\n        address tokenAddress;\\n        address finderAddress;\\n        address timerAddress;\\n        address financialProductLibraryAddress;\\n        bytes32 priceFeedIdentifier;\\n        FixedPoint.Unsigned minSponsorTokens;\\n        // Params specifically for Liquidatable.\\n        uint256 liquidationLiveness;\\n        FixedPoint.Unsigned collateralRequirement;\\n        FixedPoint.Unsigned disputeBondPercentage;\\n        FixedPoint.Unsigned sponsorDisputeRewardPercentage;\\n        FixedPoint.Unsigned disputerDisputeRewardPercentage;\\n    }\\n\\n    // This struct is used in the `withdrawLiquidation` method that disperses liquidation and dispute rewards.\\n    // `payToX` stores the total collateral to withdraw from the contract to pay X. This value might differ\\n    // from `paidToX` due to precision loss between accounting for the `rawCollateral` versus the\\n    // fee-adjusted collateral. These variables are stored within a struct to avoid the stack too deep error.\\n    struct RewardsData {\\n        FixedPoint.Unsigned payToSponsor;\\n        FixedPoint.Unsigned payToLiquidator;\\n        FixedPoint.Unsigned payToDisputer;\\n        FixedPoint.Unsigned paidToSponsor;\\n        FixedPoint.Unsigned paidToLiquidator;\\n        FixedPoint.Unsigned paidToDisputer;\\n    }\\n\\n    // Liquidations are unique by ID per sponsor\\n    mapping(address => LiquidationData[]) public liquidations;\\n\\n    // Total collateral in liquidation.\\n    FixedPoint.Unsigned public rawLiquidationCollateral;\\n\\n    // Immutable contract parameters:\\n    // Amount of time for pending liquidation before expiry.\\n    // !!Note: The lower the liquidation liveness value, the more risk incurred by sponsors.\\n    //       Extremely low liveness values increase the chance that opportunistic invalid liquidations\\n    //       expire without dispute, thereby decreasing the usability for sponsors and increasing the risk\\n    //       for the contract as a whole. An insolvent contract is extremely risky for any sponsor or synthetic\\n    //       token holder for the contract.\\n    uint256 public liquidationLiveness;\\n    // Required collateral:TRV ratio for a position to be considered sufficiently collateralized.\\n    FixedPoint.Unsigned public collateralRequirement;\\n    // Percent of a Liquidation/Position's lockedCollateral to be deposited by a potential disputer\\n    // Represented as a multiplier, for example 1.5e18 = \\\"150%\\\" and 0.05e18 = \\\"5%\\\"\\n    FixedPoint.Unsigned public disputeBondPercentage;\\n    // Percent of oraclePrice paid to sponsor in the Disputed state (i.e. following a successful dispute)\\n    // Represented as a multiplier, see above.\\n    FixedPoint.Unsigned public sponsorDisputeRewardPercentage;\\n    // Percent of oraclePrice paid to disputer in the Disputed state (i.e. following a successful dispute)\\n    // Represented as a multiplier, see above.\\n    FixedPoint.Unsigned public disputerDisputeRewardPercentage;\\n\\n    /****************************************\\n     *                EVENTS                *\\n     ****************************************/\\n\\n    event LiquidationCreated(\\n        address indexed sponsor,\\n        address indexed liquidator,\\n        uint256 indexed liquidationId,\\n        uint256 tokensOutstanding,\\n        uint256 lockedCollateral,\\n        uint256 liquidatedCollateral,\\n        uint256 liquidationTime\\n    );\\n    event LiquidationDisputed(\\n        address indexed sponsor,\\n        address indexed liquidator,\\n        address indexed disputer,\\n        uint256 liquidationId,\\n        uint256 disputeBondAmount\\n    );\\n    event DisputeSettled(\\n        address indexed caller,\\n        address indexed sponsor,\\n        address indexed liquidator,\\n        address disputer,\\n        uint256 liquidationId,\\n        bool disputeSucceeded\\n    );\\n    event LiquidationWithdrawn(\\n        address indexed caller,\\n        uint256 paidToLiquidator,\\n        uint256 paidToDisputer,\\n        uint256 paidToSponsor,\\n        Status indexed liquidationStatus,\\n        uint256 settlementPrice\\n    );\\n\\n    /****************************************\\n     *              MODIFIERS               *\\n     ****************************************/\\n\\n    modifier disputable(uint256 liquidationId, address sponsor) {\\n        _disputable(liquidationId, sponsor);\\n        _;\\n    }\\n\\n    modifier withdrawable(uint256 liquidationId, address sponsor) {\\n        _withdrawable(liquidationId, sponsor);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructs the liquidatable contract.\\n     * @param params struct to define input parameters for construction of Liquidatable. Some params\\n     * are fed directly into the PricelessPositionManager's constructor within the inheritance tree.\\n     */\\n    constructor(ConstructorParams memory params)\\n        PricelessPositionManager(\\n            params.expirationTimestamp,\\n            params.withdrawalLiveness,\\n            params.collateralAddress,\\n            params.tokenAddress,\\n            params.finderAddress,\\n            params.priceFeedIdentifier,\\n            params.minSponsorTokens,\\n            params.timerAddress,\\n            params.financialProductLibraryAddress\\n        )\\n        nonReentrant()\\n    {\\n        require(params.collateralRequirement.isGreaterThan(1));\\n        require(\\n            params\\n                .sponsorDisputeRewardPercentage\\n                .add(params.disputerDisputeRewardPercentage)\\n                .isLessThan(1)\\n        );\\n\\n        // Set liquidatable specific variables.\\n        liquidationLiveness = params.liquidationLiveness;\\n        collateralRequirement = params.collateralRequirement;\\n        disputeBondPercentage = params.disputeBondPercentage;\\n        sponsorDisputeRewardPercentage = params.sponsorDisputeRewardPercentage;\\n        disputerDisputeRewardPercentage = params\\n            .disputerDisputeRewardPercentage;\\n    }\\n\\n    /****************************************\\n     *        LIQUIDATION FUNCTIONS         *\\n     ****************************************/\\n\\n    /**\\n     * @notice Liquidates the sponsor's position if the caller has enough\\n     * synthetic tokens to retire the position's outstanding tokens. Liquidations above\\n     * a minimum size also reset an ongoing \\\"slow withdrawal\\\"'s liveness.\\n     * @dev This method generates an ID that will uniquely identify liquidation for the sponsor. This contract must be\\n     * approved to spend at least `tokensLiquidated` of `tokenCurrency` and at least `finalFeeBond` of `collateralCurrency`.\\n     * @dev This contract must have the Burner role for the `tokenCurrency`.\\n     * @param sponsor address of the sponsor to liquidate.\\n     * @param minCollateralPerToken abort the liquidation if the position's collateral per token is below this value.\\n     * @param maxCollateralPerToken abort the liquidation if the position's collateral per token exceeds this value.\\n     * @param maxTokensToLiquidate max number of tokens to liquidate.\\n     * @param deadline abort the liquidation if the transaction is mined after this timestamp.\\n     * @return liquidationId ID of the newly created liquidation.\\n     * @return tokensLiquidated amount of synthetic tokens removed and liquidated from the `sponsor`'s position.\\n     * @return finalFeeBond amount of collateral to be posted by liquidator and returned if not disputed successfully.\\n     */\\n    function createLiquidation(\\n        address sponsor,\\n        FixedPoint.Unsigned calldata minCollateralPerToken,\\n        FixedPoint.Unsigned calldata maxCollateralPerToken,\\n        FixedPoint.Unsigned calldata maxTokensToLiquidate,\\n        uint256 deadline\\n    )\\n        external\\n        fees\\n        onlyPreExpiration\\n        nonReentrant\\n        returns (\\n            uint256 liquidationId,\\n            FixedPoint.Unsigned memory tokensLiquidated,\\n            FixedPoint.Unsigned memory finalFeeBond\\n        )\\n    {\\n        // Check that this transaction was mined pre-deadline.\\n        require(getCurrentTime() <= deadline, \\\"Mined after deadline\\\");\\n\\n        // Retrieve Position data for sponsor\\n        PositionData storage positionToLiquidate = _getPositionData(sponsor);\\n\\n        tokensLiquidated = FixedPoint.min(\\n            maxTokensToLiquidate,\\n            positionToLiquidate.tokensOutstanding\\n        );\\n        require(tokensLiquidated.isGreaterThan(0));\\n\\n        // Starting values for the Position being liquidated. If withdrawal request amount is > position's collateral,\\n        // then set this to 0, otherwise set it to (startCollateral - withdrawal request amount).\\n        FixedPoint.Unsigned memory startCollateral = _getFeeAdjustedCollateral(\\n            positionToLiquidate.rawCollateral\\n        );\\n        FixedPoint.Unsigned memory startCollateralNetOfWithdrawal = FixedPoint\\n            .fromUnscaledUint(0);\\n        if (\\n            positionToLiquidate.withdrawalRequestAmount.isLessThanOrEqual(\\n                startCollateral\\n            )\\n        ) {\\n            startCollateralNetOfWithdrawal = startCollateral.sub(\\n                positionToLiquidate.withdrawalRequestAmount\\n            );\\n        }\\n\\n        // Scoping to get rid of a stack too deep error.\\n        {\\n            FixedPoint.Unsigned memory startTokens = positionToLiquidate\\n                .tokensOutstanding;\\n\\n            // The Position's collateralization ratio must be between [minCollateralPerToken, maxCollateralPerToken].\\n            // maxCollateralPerToken >= startCollateralNetOfWithdrawal / startTokens.\\n            require(\\n                maxCollateralPerToken.mul(startTokens).isGreaterThanOrEqual(\\n                    startCollateralNetOfWithdrawal\\n                ),\\n                \\\"CR is more than max liq. price\\\"\\n            );\\n            // minCollateralPerToken >= startCollateralNetOfWithdrawal / startTokens.\\n            require(\\n                minCollateralPerToken.mul(startTokens).isLessThanOrEqual(\\n                    startCollateralNetOfWithdrawal\\n                ),\\n                \\\"CR is less than min liq. price\\\"\\n            );\\n        }\\n\\n        // Compute final fee at time of liquidation.\\n        finalFeeBond = _computeFinalFees();\\n\\n        // These will be populated within the scope below.\\n        FixedPoint.Unsigned memory lockedCollateral;\\n        FixedPoint.Unsigned memory liquidatedCollateral;\\n\\n        // Scoping to get rid of a stack too deep error.\\n        {\\n            FixedPoint.Unsigned memory ratio = tokensLiquidated.div(\\n                positionToLiquidate.tokensOutstanding\\n            );\\n\\n            // The actual amount of collateral that gets moved to the liquidation.\\n            lockedCollateral = startCollateral.mul(ratio);\\n\\n            // For purposes of disputes, it's actually this liquidatedCollateral value that's used. This value is net of\\n            // withdrawal requests.\\n            liquidatedCollateral = startCollateralNetOfWithdrawal.mul(ratio);\\n\\n            // Part of the withdrawal request is also removed. Ideally:\\n            // liquidatedCollateral + withdrawalAmountToRemove = lockedCollateral.\\n            FixedPoint.Unsigned\\n                memory withdrawalAmountToRemove = positionToLiquidate\\n                    .withdrawalRequestAmount\\n                    .mul(ratio);\\n            _reduceSponsorPosition(\\n                sponsor,\\n                tokensLiquidated,\\n                lockedCollateral,\\n                withdrawalAmountToRemove\\n            );\\n        }\\n\\n        // Add to the global liquidation collateral count.\\n        _addCollateral(\\n            rawLiquidationCollateral,\\n            lockedCollateral.add(finalFeeBond)\\n        );\\n\\n        // Construct liquidation object.\\n        // Note: All dispute-related values are zeroed out until a dispute occurs. liquidationId is the index of the new\\n        // LiquidationData that is pushed into the array, which is equal to the current length of the array pre-push.\\n        liquidationId = liquidations[sponsor].length;\\n        liquidations[sponsor].push(\\n            LiquidationData({\\n                sponsor: sponsor,\\n                liquidator: msg.sender,\\n                state: Status.NotDisputed,\\n                liquidationTime: getCurrentTime(),\\n                tokensOutstanding: tokensLiquidated,\\n                lockedCollateral: lockedCollateral,\\n                liquidatedCollateral: liquidatedCollateral,\\n                rawUnitCollateral: _convertToRawCollateral(\\n                    FixedPoint.fromUnscaledUint(1)\\n                ),\\n                disputer: address(0),\\n                settlementPrice: FixedPoint.fromUnscaledUint(0),\\n                finalFee: finalFeeBond\\n            })\\n        );\\n\\n        // If this liquidation is a subsequent liquidation on the position, and the liquidation size is larger than\\n        // some \\\"griefing threshold\\\", then re-set the liveness. This enables a liquidation against a withdraw request to be\\n        // \\\"dragged out\\\" if the position is very large and liquidators need time to gather funds. The griefing threshold\\n        // is enforced so that liquidations for trivially small # of tokens cannot drag out an honest sponsor's slow withdrawal.\\n\\n        // We arbitrarily set the \\\"griefing threshold\\\" to `minSponsorTokens` because it is the only parameter\\n        // denominated in token currency units and we can avoid adding another parameter.\\n        FixedPoint.Unsigned memory griefingThreshold = minSponsorTokens;\\n        if (\\n            positionToLiquidate.withdrawalRequestPassTimestamp > 0 && // The position is undergoing a slow withdrawal.\\n            positionToLiquidate.withdrawalRequestPassTimestamp >\\n            getCurrentTime() && // The slow withdrawal has not yet expired.\\n            tokensLiquidated.isGreaterThanOrEqual(griefingThreshold) // The liquidated token count is above a \\\"griefing threshold\\\".\\n        ) {\\n            positionToLiquidate\\n                .withdrawalRequestPassTimestamp = getCurrentTime().add(\\n                withdrawalLiveness\\n            );\\n        }\\n\\n        emit LiquidationCreated(\\n            sponsor,\\n            msg.sender,\\n            liquidationId,\\n            tokensLiquidated.rawValue,\\n            lockedCollateral.rawValue,\\n            liquidatedCollateral.rawValue,\\n            getCurrentTime()\\n        );\\n\\n        // Destroy tokens\\n        tokenCurrency.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            tokensLiquidated.rawValue\\n        );\\n        tokenCurrency.burn(tokensLiquidated.rawValue);\\n\\n        // Pull final fee from liquidator.\\n        collateralCurrency.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            finalFeeBond.rawValue\\n        );\\n    }\\n\\n    /**\\n     * @notice Disputes a liquidation, if the caller has enough collateral to post a dispute bond\\n     * and pay a fixed final fee charged on each price request.\\n     * @dev Can only dispute a liquidation before the liquidation expires and if there are no other pending disputes.\\n     * This contract must be approved to spend at least the dispute bond amount of `collateralCurrency`. This dispute\\n     * bond amount is calculated from `disputeBondPercentage` times the collateral in the liquidation.\\n     * @param liquidationId of the disputed liquidation.\\n     * @param sponsor the address of the sponsor whose liquidation is being disputed.\\n     * @return totalPaid amount of collateral charged to disputer (i.e. final fee bond + dispute bond).\\n     */\\n    function dispute(uint256 liquidationId, address sponsor)\\n        external\\n        disputable(liquidationId, sponsor)\\n        fees\\n        nonReentrant\\n        returns (FixedPoint.Unsigned memory totalPaid)\\n    {\\n        LiquidationData storage disputedLiquidation = _getLiquidationData(\\n            sponsor,\\n            liquidationId\\n        );\\n\\n        // Multiply by the unit collateral so the dispute bond is a percentage of the locked collateral after fees.\\n        FixedPoint.Unsigned memory disputeBondAmount = disputedLiquidation\\n            .lockedCollateral\\n            .mul(disputeBondPercentage)\\n            .mul(\\n                _getFeeAdjustedCollateral(disputedLiquidation.rawUnitCollateral)\\n            );\\n        _addCollateral(rawLiquidationCollateral, disputeBondAmount);\\n\\n        // Request a price from DVM. Liquidation is pending dispute until DVM returns a price.\\n        disputedLiquidation.state = Status.Disputed;\\n        disputedLiquidation.disputer = msg.sender;\\n\\n        // Enqueue a request with the DVM.\\n        _requestOraclePriceLiquidation(disputedLiquidation.liquidationTime);\\n\\n        emit LiquidationDisputed(\\n            sponsor,\\n            disputedLiquidation.liquidator,\\n            msg.sender,\\n            liquidationId,\\n            disputeBondAmount.rawValue\\n        );\\n        totalPaid = disputeBondAmount.add(disputedLiquidation.finalFee);\\n\\n        // Pay the final fee for requesting price from the DVM.\\n        _payFinalFees(msg.sender, disputedLiquidation.finalFee);\\n\\n        // Transfer the dispute bond amount from the caller to this contract.\\n        collateralCurrency.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            disputeBondAmount.rawValue\\n        );\\n    }\\n\\n    /**\\n     * @notice After a dispute has settled or after a non-disputed liquidation has expired,\\n     * anyone can call this method to disperse payments to the sponsor, liquidator, and disdputer.\\n     * @dev If the dispute SUCCEEDED: the sponsor, liquidator, and disputer are eligible for payment.\\n     * If the dispute FAILED: only the liquidator can receive payment.\\n     * This method will revert if rewards have already been dispersed.\\n     * @param liquidationId uniquely identifies the sponsor's liquidation.\\n     * @param sponsor address of the sponsor associated with the liquidation.\\n     * @return data about rewards paid out.\\n     */\\n    function withdrawLiquidation(uint256 liquidationId, address sponsor)\\n        public\\n        withdrawable(liquidationId, sponsor)\\n        fees\\n        nonReentrant\\n        returns (RewardsData memory)\\n    {\\n        LiquidationData storage liquidation = _getLiquidationData(\\n            sponsor,\\n            liquidationId\\n        );\\n\\n        // Settles the liquidation if necessary. This call will revert if the price has not resolved yet.\\n        _settle(liquidationId, sponsor);\\n\\n        // Calculate rewards as a function of the TRV.\\n        // Note: all payouts are scaled by the unit collateral value so all payouts are charged the fees pro rata.\\n        FixedPoint.Unsigned memory feeAttenuation = _getFeeAdjustedCollateral(\\n            liquidation.rawUnitCollateral\\n        );\\n        FixedPoint.Unsigned memory settlementPrice = liquidation\\n            .settlementPrice;\\n        FixedPoint.Unsigned memory tokenRedemptionValue = liquidation\\n            .tokensOutstanding\\n            .mul(settlementPrice)\\n            .mul(feeAttenuation);\\n        FixedPoint.Unsigned memory collateral = liquidation\\n            .lockedCollateral\\n            .mul(feeAttenuation);\\n        FixedPoint.Unsigned\\n            memory disputerDisputeReward = disputerDisputeRewardPercentage.mul(\\n                tokenRedemptionValue\\n            );\\n        FixedPoint.Unsigned\\n            memory sponsorDisputeReward = sponsorDisputeRewardPercentage.mul(\\n                tokenRedemptionValue\\n            );\\n        FixedPoint.Unsigned memory disputeBondAmount = collateral.mul(\\n            disputeBondPercentage\\n        );\\n        FixedPoint.Unsigned memory finalFee = liquidation.finalFee.mul(\\n            feeAttenuation\\n        );\\n\\n        // There are three main outcome states: either the dispute succeeded, failed or was not updated.\\n        // Based on the state, different parties of a liquidation receive different amounts.\\n        // After assigning rewards based on the liquidation status, decrease the total collateral held in this contract\\n        // by the amount to pay each party. The actual amounts withdrawn might differ if _removeCollateral causes\\n        // precision loss.\\n        RewardsData memory rewards;\\n        if (liquidation.state == Status.DisputeSucceeded) {\\n            // If the dispute is successful then all three users should receive rewards:\\n\\n            // Pay DISPUTER: disputer reward + dispute bond + returned final fee\\n            rewards.payToDisputer = disputerDisputeReward\\n                .add(disputeBondAmount)\\n                .add(finalFee);\\n\\n            // Pay SPONSOR: remaining collateral (collateral - TRV) + sponsor reward\\n            rewards.payToSponsor = sponsorDisputeReward.add(\\n                collateral.sub(tokenRedemptionValue)\\n            );\\n\\n            // Pay LIQUIDATOR: TRV - dispute reward - sponsor reward\\n            // If TRV > Collateral, then subtract rewards from collateral\\n            // NOTE: `payToLiquidator` should never be below zero since we enforce that\\n            // (sponsorDisputePct+disputerDisputePct) <= 1 in the constructor when these params are set.\\n            rewards.payToLiquidator = tokenRedemptionValue\\n                .sub(sponsorDisputeReward)\\n                .sub(disputerDisputeReward);\\n\\n            // Transfer rewards and debit collateral\\n            rewards.paidToLiquidator = _removeCollateral(\\n                rawLiquidationCollateral,\\n                rewards.payToLiquidator\\n            );\\n            rewards.paidToSponsor = _removeCollateral(\\n                rawLiquidationCollateral,\\n                rewards.payToSponsor\\n            );\\n            rewards.paidToDisputer = _removeCollateral(\\n                rawLiquidationCollateral,\\n                rewards.payToDisputer\\n            );\\n\\n            collateralCurrency.safeTransfer(\\n                liquidation.disputer,\\n                rewards.paidToDisputer.rawValue\\n            );\\n            collateralCurrency.safeTransfer(\\n                liquidation.liquidator,\\n                rewards.paidToLiquidator.rawValue\\n            );\\n            collateralCurrency.safeTransfer(\\n                liquidation.sponsor,\\n                rewards.paidToSponsor.rawValue\\n            );\\n\\n            // In the case of a failed dispute only the liquidator can withdraw.\\n        } else if (liquidation.state == Status.DisputeFailed) {\\n            // Pay LIQUIDATOR: collateral + dispute bond + returned final fee\\n            rewards.payToLiquidator = collateral.add(disputeBondAmount).add(\\n                finalFee\\n            );\\n\\n            // Transfer rewards and debit collateral\\n            rewards.paidToLiquidator = _removeCollateral(\\n                rawLiquidationCollateral,\\n                rewards.payToLiquidator\\n            );\\n\\n            collateralCurrency.safeTransfer(\\n                liquidation.liquidator,\\n                rewards.paidToLiquidator.rawValue\\n            );\\n\\n            // If the state is pre-dispute but time has passed liveness then there was no dispute. We represent this\\n            // state as a dispute failed and the liquidator can withdraw.\\n        } else if (liquidation.state == Status.NotDisputed) {\\n            // Pay LIQUIDATOR: collateral + returned final fee\\n            rewards.payToLiquidator = collateral.add(finalFee);\\n\\n            // Transfer rewards and debit collateral\\n            rewards.paidToLiquidator = _removeCollateral(\\n                rawLiquidationCollateral,\\n                rewards.payToLiquidator\\n            );\\n\\n            collateralCurrency.safeTransfer(\\n                liquidation.liquidator,\\n                rewards.paidToLiquidator.rawValue\\n            );\\n        }\\n\\n        emit LiquidationWithdrawn(\\n            msg.sender,\\n            rewards.paidToLiquidator.rawValue,\\n            rewards.paidToDisputer.rawValue,\\n            rewards.paidToSponsor.rawValue,\\n            liquidation.state,\\n            settlementPrice.rawValue\\n        );\\n\\n        // Free up space after collateral is withdrawn by removing the liquidation object from the array.\\n        delete liquidations[sponsor][liquidationId];\\n\\n        return rewards;\\n    }\\n\\n    /**\\n     * @notice Gets all liquidation information for a given sponsor address.\\n     * @param sponsor address of the position sponsor.\\n     * @return liquidationData array of all liquidation information for the given sponsor address.\\n     */\\n    function getLiquidations(address sponsor)\\n        external\\n        view\\n        nonReentrantView\\n        returns (LiquidationData[] memory liquidationData)\\n    {\\n        return liquidations[sponsor];\\n    }\\n\\n    /**\\n     * @notice Accessor method to calculate a transformed collateral requirement using the finanical product library\\n      specified during contract deployment. If no library was provided then no modification to the collateral requirement is done.\\n     * @param price input price used as an input to transform the collateral requirement.\\n     * @return transformedCollateralRequirement collateral requirement with transformation applied to it.\\n     * @dev This method should never revert.\\n     */\\n    function transformCollateralRequirement(FixedPoint.Unsigned memory price)\\n        public\\n        view\\n        nonReentrantView\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        return _transformCollateralRequirement(price);\\n    }\\n\\n    /****************************************\\n     *          INTERNAL FUNCTIONS          *\\n     ****************************************/\\n\\n    // This settles a liquidation if it is in the Disputed state. If not, it will immediately return.\\n    // If the liquidation is in the Disputed state, but a price is not available, this will revert.\\n    function _settle(uint256 liquidationId, address sponsor) internal {\\n        LiquidationData storage liquidation = _getLiquidationData(\\n            sponsor,\\n            liquidationId\\n        );\\n\\n        // Settlement only happens when state == Disputed and will only happen once per liquidation.\\n        // If this liquidation is not ready to be settled, this method should return immediately.\\n        if (liquidation.state != Status.Disputed) {\\n            return;\\n        }\\n\\n        // Get the returned price from the oracle. If this has not yet resolved will revert.\\n        liquidation.settlementPrice = _getOraclePriceLiquidation(\\n            liquidation.liquidationTime\\n        );\\n\\n        // Find the value of the tokens in the underlying collateral.\\n        FixedPoint.Unsigned memory tokenRedemptionValue = liquidation\\n            .tokensOutstanding\\n            .mul(liquidation.settlementPrice);\\n\\n        // The required collateral is the value of the tokens in underlying * required collateral ratio. The Transform\\n        // Collateral requirement method applies a from the financial Product library to change the scaled the collateral\\n        // requirement based on the settlement price. If no library was specified when deploying the emp then this makes no change.\\n        FixedPoint.Unsigned memory requiredCollateral = tokenRedemptionValue\\n            .mul(_transformCollateralRequirement(liquidation.settlementPrice));\\n\\n        // If the position has more than the required collateral it is solvent and the dispute is valid(liquidation is invalid)\\n        // Note that this check uses the liquidatedCollateral not the lockedCollateral as this considers withdrawals.\\n        bool disputeSucceeded = liquidation\\n            .liquidatedCollateral\\n            .isGreaterThanOrEqual(requiredCollateral);\\n        liquidation.state = disputeSucceeded\\n            ? Status.DisputeSucceeded\\n            : Status.DisputeFailed;\\n\\n        emit DisputeSettled(\\n            msg.sender,\\n            sponsor,\\n            liquidation.liquidator,\\n            liquidation.disputer,\\n            liquidationId,\\n            disputeSucceeded\\n        );\\n    }\\n\\n    function _pfc()\\n        internal\\n        view\\n        override\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        return\\n            super._pfc().add(\\n                _getFeeAdjustedCollateral(rawLiquidationCollateral)\\n            );\\n    }\\n\\n    function _getLiquidationData(address sponsor, uint256 liquidationId)\\n        internal\\n        view\\n        returns (LiquidationData storage liquidation)\\n    {\\n        LiquidationData[] storage liquidationArray = liquidations[sponsor];\\n\\n        // Revert if the caller is attempting to access an invalid liquidation\\n        // (one that has never been created or one has never been initialized).\\n        require(\\n            liquidationId < liquidationArray.length &&\\n                liquidationArray[liquidationId].state != Status.Uninitialized,\\n            \\\"Invalid liquidation ID\\\"\\n        );\\n        return liquidationArray[liquidationId];\\n    }\\n\\n    function _getLiquidationExpiry(LiquidationData storage liquidation)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return liquidation.liquidationTime.add(liquidationLiveness);\\n    }\\n\\n    // These internal functions are supposed to act identically to modifiers, but re-used modifiers\\n    // unnecessarily increase contract bytecode size.\\n    // source: https://blog.polymath.network/solidity-tips-and-tricks-to-save-gas-and-reduce-bytecode-size-c44580b218e6\\n    function _disputable(uint256 liquidationId, address sponsor) internal view {\\n        LiquidationData storage liquidation = _getLiquidationData(\\n            sponsor,\\n            liquidationId\\n        );\\n        require(\\n            (getCurrentTime() < _getLiquidationExpiry(liquidation)) &&\\n                (liquidation.state == Status.NotDisputed),\\n            \\\"Liquidation not disputable\\\"\\n        );\\n    }\\n\\n    function _withdrawable(uint256 liquidationId, address sponsor)\\n        internal\\n        view\\n    {\\n        LiquidationData storage liquidation = _getLiquidationData(\\n            sponsor,\\n            liquidationId\\n        );\\n        Status state = liquidation.state;\\n\\n        // Must be disputed or the liquidation has passed expiry.\\n        require(\\n            (state > Status.NotDisputed) ||\\n                ((_getLiquidationExpiry(liquidation) <= getCurrentTime()) &&\\n                    (state == Status.NotDisputed)),\\n            \\\"Liquidation not withdrawable\\\"\\n        );\\n    }\\n\\n    function _transformCollateralRequirement(FixedPoint.Unsigned memory price)\\n        internal\\n        view\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        if (!address(financialProductLibrary).isContract())\\n            return collateralRequirement;\\n        try\\n            financialProductLibrary.transformCollateralRequirement(\\n                price,\\n                collateralRequirement\\n            )\\n        returns (FixedPoint.Unsigned memory transformedCollateralRequirement) {\\n            return transformedCollateralRequirement;\\n        } catch {\\n            return collateralRequirement;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf75aad506590283257b6efbeab1ad53c86448cbc40ef62de25668f256e826d6a\",\"license\":\"MIT\"},\"contracts/UMA/financial-templates/expiring-multiparty/PricelessPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\nimport \\\"../../common/interfaces/ExpandedIERC20.sol\\\";\\nimport \\\"../../common/interfaces/IERC20Standard.sol\\\";\\n\\nimport \\\"../../oracle/interfaces/OracleInterface.sol\\\";\\nimport \\\"../../oracle/interfaces/OptimisticOracleInterface.sol\\\";\\nimport \\\"../../oracle/interfaces/IdentifierWhitelistInterface.sol\\\";\\nimport \\\"../../oracle/implementation/Constants.sol\\\";\\n\\nimport \\\"../common/FeePayer.sol\\\";\\nimport \\\"../common/financial-product-libraries/expiring-multiparty-libraries/FinancialProductLibrary.sol\\\";\\n\\n/**\\n * @title Financial contract with priceless position management.\\n * @notice Handles positions for multiple sponsors in an optimistic (i.e., priceless) way without relying\\n * on a price feed. On construction, deploys a new ERC20, managed by this contract, that is the synthetic token.\\n */\\n\\ncontract PricelessPositionManager is FeePayer {\\n    using SafeMath for uint256;\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for ExpandedIERC20;\\n    using Address for address;\\n\\n    /****************************************\\n     *  PRICELESS POSITION DATA STRUCTURES  *\\n     ****************************************/\\n\\n    // Stores the state of the PricelessPositionManager. Set on expiration, emergency shutdown, or settlement.\\n    enum ContractState {\\n        Open,\\n        ExpiredPriceRequested,\\n        ExpiredPriceReceived\\n    }\\n    ContractState public contractState;\\n\\n    // Represents a single sponsor's position. All collateral is held by this contract.\\n    // This struct acts as bookkeeping for how much of that collateral is allocated to each sponsor.\\n    struct PositionData {\\n        FixedPoint.Unsigned tokensOutstanding;\\n        // Tracks pending withdrawal requests. A withdrawal request is pending if `withdrawalRequestPassTimestamp != 0`.\\n        uint256 withdrawalRequestPassTimestamp;\\n        FixedPoint.Unsigned withdrawalRequestAmount;\\n        // Raw collateral value. This value should never be accessed directly -- always use _getFeeAdjustedCollateral().\\n        // To add or remove collateral, use _addCollateral() and _removeCollateral().\\n        FixedPoint.Unsigned rawCollateral;\\n        // Tracks pending transfer position requests. A transfer position request is pending if `transferPositionRequestPassTimestamp != 0`.\\n        uint256 transferPositionRequestPassTimestamp;\\n    }\\n\\n    // Maps sponsor addresses to their positions. Each sponsor can have only one position.\\n    mapping(address => PositionData) public positions;\\n\\n    // Keep track of the total collateral and tokens across all positions to enable calculating the\\n    // global collateralization ratio without iterating over all positions.\\n    FixedPoint.Unsigned public totalTokensOutstanding;\\n\\n    // Similar to the rawCollateral in PositionData, this value should not be used directly.\\n    // _getFeeAdjustedCollateral(), _addCollateral() and _removeCollateral() must be used to access and adjust.\\n    FixedPoint.Unsigned public rawTotalPositionCollateral;\\n\\n    // Synthetic token created by this contract.\\n    ExpandedIERC20 public tokenCurrency;\\n\\n    // Unique identifier for DVM price feed ticker.\\n    bytes32 public priceIdentifier;\\n    // Time that this contract expires. Should not change post-construction unless an emergency shutdown occurs.\\n    uint256 public expirationTimestamp;\\n    // Time that has to elapse for a withdrawal request to be considered passed, if no liquidations occur.\\n    // !!Note: The lower the withdrawal liveness value, the more risk incurred by the contract.\\n    //       Extremely low liveness values increase the chance that opportunistic invalid withdrawal requests\\n    //       expire without liquidation, thereby increasing the insolvency risk for the contract as a whole. An insolvent\\n    //       contract is extremely risky for any sponsor or synthetic token holder for the contract.\\n    uint256 public withdrawalLiveness;\\n\\n    // Minimum number of tokens in a sponsor's position.\\n    FixedPoint.Unsigned public minSponsorTokens;\\n\\n    // The expiry price pulled from the DVM.\\n    FixedPoint.Unsigned public expiryPrice;\\n\\n    // Instance of FinancialProductLibrary to provide custom price and collateral requirement transformations to extend\\n    // the functionality of the EMP to support a wider range of financial products.\\n    FinancialProductLibrary public financialProductLibrary;\\n\\n    /****************************************\\n     *                EVENTS                *\\n     ****************************************/\\n\\n    event RequestTransferPosition(address indexed oldSponsor);\\n    event RequestTransferPositionExecuted(\\n        address indexed oldSponsor,\\n        address indexed newSponsor\\n    );\\n    event RequestTransferPositionCanceled(address indexed oldSponsor);\\n    event Deposit(address indexed sponsor, uint256 indexed collateralAmount);\\n    event Withdrawal(address indexed sponsor, uint256 indexed collateralAmount);\\n    event RequestWithdrawal(\\n        address indexed sponsor,\\n        uint256 indexed collateralAmount\\n    );\\n    event RequestWithdrawalExecuted(\\n        address indexed sponsor,\\n        uint256 indexed collateralAmount\\n    );\\n    event RequestWithdrawalCanceled(\\n        address indexed sponsor,\\n        uint256 indexed collateralAmount\\n    );\\n    event PositionCreated(\\n        address indexed sponsor,\\n        uint256 indexed collateralAmount,\\n        uint256 indexed tokenAmount\\n    );\\n    event NewSponsor(address indexed sponsor);\\n    event EndedSponsorPosition(address indexed sponsor);\\n    event Repay(\\n        address indexed sponsor,\\n        uint256 indexed numTokensRepaid,\\n        uint256 indexed newTokenCount\\n    );\\n    event Redeem(\\n        address indexed sponsor,\\n        uint256 indexed collateralAmount,\\n        uint256 indexed tokenAmount\\n    );\\n    event ContractExpired(address indexed caller);\\n    event SettleExpiredPosition(\\n        address indexed caller,\\n        uint256 indexed collateralReturned,\\n        uint256 indexed tokensBurned\\n    );\\n    event EmergencyShutdown(\\n        address indexed caller,\\n        uint256 originalExpirationTimestamp,\\n        uint256 shutdownTimestamp\\n    );\\n\\n    /****************************************\\n     *               MODIFIERS              *\\n     ****************************************/\\n\\n    modifier onlyPreExpiration() {\\n        _onlyPreExpiration();\\n        _;\\n    }\\n\\n    modifier onlyPostExpiration() {\\n        _onlyPostExpiration();\\n        _;\\n    }\\n\\n    modifier onlyCollateralizedPosition(address sponsor) {\\n        _onlyCollateralizedPosition(sponsor);\\n        _;\\n    }\\n\\n    // Check that the current state of the pricelessPositionManager is Open.\\n    // This prevents multiple calls to `expire` and `EmergencyShutdown` post expiration.\\n    modifier onlyOpenState() {\\n        _onlyOpenState();\\n        _;\\n    }\\n\\n    modifier noPendingWithdrawal(address sponsor) {\\n        _positionHasNoPendingWithdrawal(sponsor);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Construct the PricelessPositionManager\\n     * @dev Deployer of this contract should consider carefully which parties have ability to mint and burn\\n     * the synthetic tokens referenced by `_tokenAddress`. This contract's security assumes that no external accounts\\n     * can mint new tokens, which could be used to steal all of this contract's locked collateral.\\n     * We recommend to only use synthetic token contracts whose sole Owner role (the role capable of adding & removing roles)\\n     * is assigned to this contract, whose sole Minter role is assigned to this contract, and whose\\n     * total supply is 0 prior to construction of this contract.\\n     * @param _expirationTimestamp unix timestamp of when the contract will expire.\\n     * @param _withdrawalLiveness liveness delay, in seconds, for pending withdrawals.\\n     * @param _collateralAddress ERC20 token used as collateral for all positions.\\n     * @param _tokenAddress ERC20 token used as synthetic token.\\n     * @param _finderAddress UMA protocol Finder used to discover other protocol contracts.\\n     * @param _priceIdentifier registered in the DVM for the synthetic.\\n     * @param _minSponsorTokens minimum number of tokens that must exist at any time in a position.\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\n     * Must be set to 0x0 for production environments that use live time.\\n     * @param _financialProductLibraryAddress Contract providing contract state transformations.\\n     */\\n    constructor(\\n        uint256 _expirationTimestamp,\\n        uint256 _withdrawalLiveness,\\n        address _collateralAddress,\\n        address _tokenAddress,\\n        address _finderAddress,\\n        bytes32 _priceIdentifier,\\n        FixedPoint.Unsigned memory _minSponsorTokens,\\n        address _timerAddress,\\n        address _financialProductLibraryAddress\\n    )\\n        FeePayer(_collateralAddress, _finderAddress, _timerAddress)\\n        nonReentrant()\\n    {\\n        require(_expirationTimestamp > getCurrentTime());\\n        require(\\n            _getIdentifierWhitelist().isIdentifierSupported(_priceIdentifier)\\n        );\\n\\n        expirationTimestamp = _expirationTimestamp;\\n        withdrawalLiveness = _withdrawalLiveness;\\n        tokenCurrency = ExpandedIERC20(_tokenAddress);\\n        minSponsorTokens = _minSponsorTokens;\\n        priceIdentifier = _priceIdentifier;\\n\\n        // Initialize the financialProductLibrary at the provided address.\\n        financialProductLibrary = FinancialProductLibrary(\\n            _financialProductLibraryAddress\\n        );\\n    }\\n\\n    /****************************************\\n     *          POSITION FUNCTIONS          *\\n     ****************************************/\\n\\n    /**\\n     * @notice Requests to transfer ownership of the caller's current position to a new sponsor address.\\n     * Once the request liveness is passed, the sponsor can execute the transfer and specify the new sponsor.\\n     * @dev The liveness length is the same as the withdrawal liveness.\\n     */\\n    function requestTransferPosition() public onlyPreExpiration nonReentrant {\\n        PositionData storage positionData = _getPositionData(msg.sender);\\n        require(positionData.transferPositionRequestPassTimestamp == 0);\\n\\n        // Make sure the proposed expiration of this request is not post-expiry.\\n        uint256 requestPassTime = getCurrentTime().add(withdrawalLiveness);\\n        require(requestPassTime < expirationTimestamp);\\n\\n        // Update the position object for the user.\\n        positionData.transferPositionRequestPassTimestamp = requestPassTime;\\n\\n        emit RequestTransferPosition(msg.sender);\\n    }\\n\\n    /**\\n     * @notice After a passed transfer position request (i.e., by a call to `requestTransferPosition` and waiting\\n     * `withdrawalLiveness`), transfers ownership of the caller's current position to `newSponsorAddress`.\\n     * @dev Transferring positions can only occur if the recipient does not already have a position.\\n     * @param newSponsorAddress is the address to which the position will be transferred.\\n     */\\n    function transferPositionPassedRequest(address newSponsorAddress)\\n        public\\n        onlyPreExpiration\\n        noPendingWithdrawal(msg.sender)\\n        nonReentrant\\n    {\\n        require(\\n            _getFeeAdjustedCollateral(\\n                positions[newSponsorAddress].rawCollateral\\n            ).isEqual(FixedPoint.fromUnscaledUint(0))\\n        );\\n        PositionData storage positionData = _getPositionData(msg.sender);\\n        require(\\n            positionData.transferPositionRequestPassTimestamp != 0 &&\\n                positionData.transferPositionRequestPassTimestamp <=\\n                getCurrentTime()\\n        );\\n\\n        // Reset transfer request.\\n        positionData.transferPositionRequestPassTimestamp = 0;\\n\\n        positions[newSponsorAddress] = positionData;\\n        delete positions[msg.sender];\\n\\n        emit RequestTransferPositionExecuted(msg.sender, newSponsorAddress);\\n        emit NewSponsor(newSponsorAddress);\\n        emit EndedSponsorPosition(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Cancels a pending transfer position request.\\n     */\\n    function cancelTransferPosition() external onlyPreExpiration nonReentrant {\\n        PositionData storage positionData = _getPositionData(msg.sender);\\n        require(positionData.transferPositionRequestPassTimestamp != 0);\\n\\n        emit RequestTransferPositionCanceled(msg.sender);\\n\\n        // Reset withdrawal request.\\n        positionData.transferPositionRequestPassTimestamp = 0;\\n    }\\n\\n    /**\\n     * @notice Transfers `collateralAmount` of `collateralCurrency` into the specified sponsor's position.\\n     * @dev Increases the collateralization level of a position after creation. This contract must be approved to spend\\n     * at least `collateralAmount` of `collateralCurrency`.\\n     * @param sponsor the sponsor to credit the deposit to.\\n     * @param collateralAmount total amount of collateral tokens to be sent to the sponsor's position.\\n     */\\n    function depositTo(\\n        address sponsor,\\n        FixedPoint.Unsigned memory collateralAmount\\n    ) public onlyPreExpiration noPendingWithdrawal(sponsor) fees nonReentrant {\\n        require(collateralAmount.isGreaterThan(0));\\n        PositionData storage positionData = _getPositionData(sponsor);\\n\\n        // Increase the position and global collateral balance by collateral amount.\\n        _incrementCollateralBalances(positionData, collateralAmount);\\n\\n        emit Deposit(sponsor, collateralAmount.rawValue);\\n\\n        // Move collateral currency from sender to contract.\\n        collateralCurrency.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            collateralAmount.rawValue\\n        );\\n    }\\n\\n    /**\\n     * @notice Transfers `collateralAmount` of `collateralCurrency` into the caller's position.\\n     * @dev Increases the collateralization level of a position after creation. This contract must be approved to spend\\n     * at least `collateralAmount` of `collateralCurrency`.\\n     * @param collateralAmount total amount of collateral tokens to be sent to the sponsor's position.\\n     */\\n    function deposit(FixedPoint.Unsigned memory collateralAmount) public {\\n        // This is just a thin wrapper over depositTo that specified the sender as the sponsor.\\n        depositTo(msg.sender, collateralAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers `collateralAmount` of `collateralCurrency` from the sponsor's position to the sponsor.\\n     * @dev Reverts if the withdrawal puts this position's collateralization ratio below the global collateralization\\n     * ratio. In that case, use `requestWithdrawal`. Might not withdraw the full requested amount to account for precision loss.\\n     * @param collateralAmount is the amount of collateral to withdraw.\\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\\n     */\\n    function withdraw(FixedPoint.Unsigned memory collateralAmount)\\n        public\\n        onlyPreExpiration\\n        noPendingWithdrawal(msg.sender)\\n        fees\\n        nonReentrant\\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\\n    {\\n        require(collateralAmount.isGreaterThan(0));\\n        PositionData storage positionData = _getPositionData(msg.sender);\\n\\n        // Decrement the sponsor's collateral and global collateral amounts. Check the GCR between decrement to ensure\\n        // position remains above the GCR within the withdrawal. If this is not the case the caller must submit a request.\\n        amountWithdrawn = _decrementCollateralBalancesCheckGCR(\\n            positionData,\\n            collateralAmount\\n        );\\n\\n        emit Withdrawal(msg.sender, amountWithdrawn.rawValue);\\n\\n        // Move collateral currency from contract to sender.\\n        // Note: that we move the amount of collateral that is decreased from rawCollateral (inclusive of fees)\\n        // instead of the user requested amount. This eliminates precision loss that could occur\\n        // where the user withdraws more collateral than rawCollateral is decremented by.\\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\\n    }\\n\\n    /**\\n     * @notice Starts a withdrawal request that, if passed, allows the sponsor to withdraw` from their position.\\n     * @dev The request will be pending for `withdrawalLiveness`, during which the position can be liquidated.\\n     * @param collateralAmount the amount of collateral requested to withdraw\\n     */\\n    function requestWithdrawal(FixedPoint.Unsigned memory collateralAmount)\\n        public\\n        onlyPreExpiration\\n        noPendingWithdrawal(msg.sender)\\n        nonReentrant\\n    {\\n        PositionData storage positionData = _getPositionData(msg.sender);\\n        require(\\n            collateralAmount.isGreaterThan(0) &&\\n                collateralAmount.isLessThanOrEqual(\\n                    _getFeeAdjustedCollateral(positionData.rawCollateral)\\n                )\\n        );\\n\\n        // Make sure the proposed expiration of this request is not post-expiry.\\n        uint256 requestPassTime = getCurrentTime().add(withdrawalLiveness);\\n        require(requestPassTime < expirationTimestamp);\\n\\n        // Update the position object for the user.\\n        positionData.withdrawalRequestPassTimestamp = requestPassTime;\\n        positionData.withdrawalRequestAmount = collateralAmount;\\n\\n        emit RequestWithdrawal(msg.sender, collateralAmount.rawValue);\\n    }\\n\\n    /**\\n     * @notice After a passed withdrawal request (i.e., by a call to `requestWithdrawal` and waiting\\n     * `withdrawalLiveness`), withdraws `positionData.withdrawalRequestAmount` of collateral currency.\\n     * @dev Might not withdraw the full requested amount in order to account for precision loss or if the full requested\\n     * amount exceeds the collateral in the position (due to paying fees).\\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\\n     */\\n    function withdrawPassedRequest()\\n        external\\n        onlyPreExpiration\\n        fees\\n        nonReentrant\\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\\n    {\\n        PositionData storage positionData = _getPositionData(msg.sender);\\n        require(\\n            positionData.withdrawalRequestPassTimestamp != 0 &&\\n                positionData.withdrawalRequestPassTimestamp <= getCurrentTime()\\n        );\\n\\n        // If withdrawal request amount is > position collateral, then withdraw the full collateral amount.\\n        // This situation is possible due to fees charged since the withdrawal was originally requested.\\n        FixedPoint.Unsigned memory amountToWithdraw = positionData\\n            .withdrawalRequestAmount;\\n        if (\\n            positionData.withdrawalRequestAmount.isGreaterThan(\\n                _getFeeAdjustedCollateral(positionData.rawCollateral)\\n            )\\n        ) {\\n            amountToWithdraw = _getFeeAdjustedCollateral(\\n                positionData.rawCollateral\\n            );\\n        }\\n\\n        // Decrement the sponsor's collateral and global collateral amounts.\\n        amountWithdrawn = _decrementCollateralBalances(\\n            positionData,\\n            amountToWithdraw\\n        );\\n\\n        // Reset withdrawal request by setting withdrawal amount and withdrawal timestamp to 0.\\n        _resetWithdrawalRequest(positionData);\\n\\n        // Transfer approved withdrawal amount from the contract to the caller.\\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\\n\\n        emit RequestWithdrawalExecuted(msg.sender, amountWithdrawn.rawValue);\\n    }\\n\\n    /**\\n     * @notice Cancels a pending withdrawal request.\\n     */\\n    function cancelWithdrawal() external nonReentrant {\\n        PositionData storage positionData = _getPositionData(msg.sender);\\n        require(positionData.withdrawalRequestPassTimestamp != 0);\\n\\n        emit RequestWithdrawalCanceled(\\n            msg.sender,\\n            positionData.withdrawalRequestAmount.rawValue\\n        );\\n\\n        // Reset withdrawal request by setting withdrawal amount and withdrawal timestamp to 0.\\n        _resetWithdrawalRequest(positionData);\\n    }\\n\\n    /**\\n     * @notice Creates tokens by creating a new position or by augmenting an existing position. Pulls `collateralAmount` into the sponsor's position and mints `numTokens` of `tokenCurrency`.\\n     * @dev Reverts if minting these tokens would put the position's collateralization ratio below the\\n     * global collateralization ratio. This contract must be approved to spend at least `collateralAmount` of\\n     * `collateralCurrency`.\\n     * @dev This contract must have the Minter role for the `tokenCurrency`.\\n     * @param collateralAmount is the number of collateral tokens to collateralize the position with\\n     * @param numTokens is the number of tokens to mint from the position.\\n     */\\n    function create(\\n        FixedPoint.Unsigned memory collateralAmount,\\n        FixedPoint.Unsigned memory numTokens\\n    ) public onlyPreExpiration fees nonReentrant {\\n        PositionData storage positionData = positions[msg.sender];\\n\\n        // Either the new create ratio or the resultant position CR must be above the current GCR.\\n        require(\\n            (_checkCollateralization(\\n                _getFeeAdjustedCollateral(positionData.rawCollateral).add(\\n                    collateralAmount\\n                ),\\n                positionData.tokensOutstanding.add(numTokens)\\n            ) || _checkCollateralization(collateralAmount, numTokens)),\\n            \\\"Insufficient collateral\\\"\\n        );\\n\\n        require(\\n            positionData.withdrawalRequestPassTimestamp == 0,\\n            \\\"Pending withdrawal\\\"\\n        );\\n        if (positionData.tokensOutstanding.isEqual(0)) {\\n            require(\\n                numTokens.isGreaterThanOrEqual(minSponsorTokens),\\n                \\\"Below minimum sponsor position\\\"\\n            );\\n            emit NewSponsor(msg.sender);\\n        }\\n\\n        // Increase the position and global collateral balance by collateral amount.\\n        _incrementCollateralBalances(positionData, collateralAmount);\\n\\n        // Add the number of tokens created to the position's outstanding tokens.\\n        positionData.tokensOutstanding = positionData.tokensOutstanding.add(\\n            numTokens\\n        );\\n\\n        totalTokensOutstanding = totalTokensOutstanding.add(numTokens);\\n\\n        emit PositionCreated(\\n            msg.sender,\\n            collateralAmount.rawValue,\\n            numTokens.rawValue\\n        );\\n\\n        // Transfer tokens into the contract from caller and mint corresponding synthetic tokens to the caller's address.\\n        collateralCurrency.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            collateralAmount.rawValue\\n        );\\n        require(tokenCurrency.mint(msg.sender, numTokens.rawValue));\\n    }\\n\\n    /**\\n     * @notice Burns `numTokens` of `tokenCurrency` to decrease sponsors position size, without sending back `collateralCurrency`.\\n     * This is done by a sponsor to increase position CR. Resulting size is bounded by minSponsorTokens.\\n     * @dev Can only be called by token sponsor. This contract must be approved to spend `numTokens` of `tokenCurrency`.\\n     * @dev This contract must have the Burner role for the `tokenCurrency`.\\n     * @param numTokens is the number of tokens to be burnt from the sponsor's debt position.\\n     */\\n    function repay(FixedPoint.Unsigned memory numTokens)\\n        public\\n        onlyPreExpiration\\n        noPendingWithdrawal(msg.sender)\\n        fees\\n        nonReentrant\\n    {\\n        PositionData storage positionData = _getPositionData(msg.sender);\\n        require(numTokens.isLessThanOrEqual(positionData.tokensOutstanding));\\n\\n        // Decrease the sponsors position tokens size. Ensure it is above the min sponsor size.\\n        FixedPoint.Unsigned memory newTokenCount = positionData\\n            .tokensOutstanding\\n            .sub(numTokens);\\n        require(newTokenCount.isGreaterThanOrEqual(minSponsorTokens));\\n        positionData.tokensOutstanding = newTokenCount;\\n\\n        // Update the totalTokensOutstanding after redemption.\\n        totalTokensOutstanding = totalTokensOutstanding.sub(numTokens);\\n\\n        emit Repay(msg.sender, numTokens.rawValue, newTokenCount.rawValue);\\n\\n        // Transfer the tokens back from the sponsor and burn them.\\n        tokenCurrency.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            numTokens.rawValue\\n        );\\n        tokenCurrency.burn(numTokens.rawValue);\\n    }\\n\\n    /**\\n     * @notice Burns `numTokens` of `tokenCurrency` and sends back the proportional amount of `collateralCurrency`.\\n     * @dev Can only be called by a token sponsor. Might not redeem the full proportional amount of collateral\\n     * in order to account for precision loss. This contract must be approved to spend at least `numTokens` of\\n     * `tokenCurrency`.\\n     * @dev This contract must have the Burner role for the `tokenCurrency`.\\n     * @param numTokens is the number of tokens to be burnt for a commensurate amount of collateral.\\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\\n     */\\n    function redeem(FixedPoint.Unsigned memory numTokens)\\n        public\\n        noPendingWithdrawal(msg.sender)\\n        fees\\n        nonReentrant\\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\\n    {\\n        PositionData storage positionData = _getPositionData(msg.sender);\\n        require(!numTokens.isGreaterThan(positionData.tokensOutstanding));\\n\\n        FixedPoint.Unsigned memory fractionRedeemed = numTokens.div(\\n            positionData.tokensOutstanding\\n        );\\n        FixedPoint.Unsigned memory collateralRedeemed = fractionRedeemed.mul(\\n            _getFeeAdjustedCollateral(positionData.rawCollateral)\\n        );\\n\\n        // If redemption returns all tokens the sponsor has then we can delete their position. Else, downsize.\\n        if (positionData.tokensOutstanding.isEqual(numTokens)) {\\n            amountWithdrawn = _deleteSponsorPosition(msg.sender);\\n        } else {\\n            // Decrement the sponsor's collateral and global collateral amounts.\\n            amountWithdrawn = _decrementCollateralBalances(\\n                positionData,\\n                collateralRedeemed\\n            );\\n\\n            // Decrease the sponsors position tokens size. Ensure it is above the min sponsor size.\\n            FixedPoint.Unsigned memory newTokenCount = positionData\\n                .tokensOutstanding\\n                .sub(numTokens);\\n            require(\\n                newTokenCount.isGreaterThanOrEqual(minSponsorTokens),\\n                \\\"Below minimum sponsor position\\\"\\n            );\\n            positionData.tokensOutstanding = newTokenCount;\\n\\n            // Update the totalTokensOutstanding after redemption.\\n            totalTokensOutstanding = totalTokensOutstanding.sub(numTokens);\\n        }\\n\\n        emit Redeem(msg.sender, amountWithdrawn.rawValue, numTokens.rawValue);\\n\\n        // Transfer collateral from contract to caller and burn callers synthetic tokens.\\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\\n        tokenCurrency.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            numTokens.rawValue\\n        );\\n        tokenCurrency.burn(numTokens.rawValue);\\n    }\\n\\n    /**\\n     * @notice After a contract has passed expiry all token holders can redeem their tokens for underlying at the\\n     * prevailing price defined by the DVM from the `expire` function.\\n     * @dev This burns all tokens from the caller of `tokenCurrency` and sends back the proportional amount of\\n     * `collateralCurrency`. Might not redeem the full proportional amount of collateral in order to account for\\n     * precision loss. This contract must be approved to spend `tokenCurrency` at least up to the caller's full balance.\\n     * @dev This contract must have the Burner role for the `tokenCurrency`.\\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\\n     */\\n    function settleExpired()\\n        external\\n        onlyPostExpiration\\n        fees\\n        nonReentrant\\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\\n    {\\n        // If the contract state is open and onlyPostExpiration passed then `expire()` has not yet been called.\\n        require(contractState != ContractState.Open, \\\"Unexpired position\\\");\\n\\n        // Get the current settlement price and store it. If it is not resolved will revert.\\n        if (contractState != ContractState.ExpiredPriceReceived) {\\n            expiryPrice = _getOraclePriceExpiration(expirationTimestamp);\\n            contractState = ContractState.ExpiredPriceReceived;\\n        }\\n\\n        // Get caller's tokens balance and calculate amount of underlying entitled to them.\\n        FixedPoint.Unsigned memory tokensToRedeem = FixedPoint.Unsigned(\\n            tokenCurrency.balanceOf(msg.sender)\\n        );\\n        FixedPoint.Unsigned memory totalRedeemableCollateral = tokensToRedeem\\n            .mul(expiryPrice);\\n\\n        // If the caller is a sponsor with outstanding collateral they are also entitled to their excess collateral after their debt.\\n        PositionData storage positionData = positions[msg.sender];\\n        if (\\n            _getFeeAdjustedCollateral(positionData.rawCollateral).isGreaterThan(\\n                0\\n            )\\n        ) {\\n            // Calculate the underlying entitled to a token sponsor. This is collateral - debt in underlying.\\n            FixedPoint.Unsigned memory tokenDebtValueInCollateral = positionData\\n                .tokensOutstanding\\n                .mul(expiryPrice);\\n            FixedPoint.Unsigned\\n                memory positionCollateral = _getFeeAdjustedCollateral(\\n                    positionData.rawCollateral\\n                );\\n\\n            // If the debt is greater than the remaining collateral, they cannot redeem anything.\\n            FixedPoint.Unsigned\\n                memory positionRedeemableCollateral = tokenDebtValueInCollateral\\n                    .isLessThan(positionCollateral)\\n                    ? positionCollateral.sub(tokenDebtValueInCollateral)\\n                    : FixedPoint.Unsigned(0);\\n\\n            // Add the number of redeemable tokens for the sponsor to their total redeemable collateral.\\n            totalRedeemableCollateral = totalRedeemableCollateral.add(\\n                positionRedeemableCollateral\\n            );\\n\\n            // Reset the position state as all the value has been removed after settlement.\\n            delete positions[msg.sender];\\n            emit EndedSponsorPosition(msg.sender);\\n        }\\n\\n        // Take the min of the remaining collateral and the collateral \\\"owed\\\". If the contract is undercapitalized,\\n        // the caller will get as much collateral as the contract can pay out.\\n        FixedPoint.Unsigned memory payout = FixedPoint.min(\\n            _getFeeAdjustedCollateral(rawTotalPositionCollateral),\\n            totalRedeemableCollateral\\n        );\\n\\n        // Decrement total contract collateral and outstanding debt.\\n        amountWithdrawn = _removeCollateral(rawTotalPositionCollateral, payout);\\n        totalTokensOutstanding = totalTokensOutstanding.sub(tokensToRedeem);\\n\\n        emit SettleExpiredPosition(\\n            msg.sender,\\n            amountWithdrawn.rawValue,\\n            tokensToRedeem.rawValue\\n        );\\n\\n        // Transfer tokens & collateral and burn the redeemed tokens.\\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\\n        tokenCurrency.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            tokensToRedeem.rawValue\\n        );\\n        tokenCurrency.burn(tokensToRedeem.rawValue);\\n    }\\n\\n    /****************************************\\n     *        GLOBAL STATE FUNCTIONS        *\\n     ****************************************/\\n\\n    /**\\n     * @notice Locks contract state in expired and requests oracle price.\\n     * @dev this function can only be called once the contract is expired and can't be re-called.\\n     */\\n    function expire()\\n        external\\n        onlyPostExpiration\\n        onlyOpenState\\n        fees\\n        nonReentrant\\n    {\\n        contractState = ContractState.ExpiredPriceRequested;\\n\\n        // Final fees do not need to be paid when sending a request to the optimistic oracle.\\n        _requestOraclePriceExpiration(expirationTimestamp);\\n\\n        emit ContractExpired(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Premature contract settlement under emergency circumstances.\\n     * @dev Only the governor can call this function as they are permissioned within the `FinancialContractAdmin`.\\n     * Upon emergency shutdown, the contract settlement time is set to the shutdown time. This enables withdrawal\\n     * to occur via the standard `settleExpired` function. Contract state is set to `ExpiredPriceRequested`\\n     * which prevents re-entry into this function or the `expire` function. No fees are paid when calling\\n     * `emergencyShutdown` as the governor who would call the function would also receive the fees.\\n     */\\n    function emergencyShutdown()\\n        external\\n        override\\n        onlyPreExpiration\\n        onlyOpenState\\n        nonReentrant\\n    {\\n        require(msg.sender == _getFinancialContractsAdminAddress());\\n\\n        contractState = ContractState.ExpiredPriceRequested;\\n        // Expiratory time now becomes the current time (emergency shutdown time).\\n        // Price requested at this time stamp. `settleExpired` can now withdraw at this timestamp.\\n        uint256 oldExpirationTimestamp = expirationTimestamp;\\n        expirationTimestamp = getCurrentTime();\\n        _requestOraclePriceExpiration(expirationTimestamp);\\n\\n        emit EmergencyShutdown(\\n            msg.sender,\\n            oldExpirationTimestamp,\\n            expirationTimestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Theoretically supposed to pay fees and move money between margin accounts to make sure they\\n     * reflect the NAV of the contract. However, this functionality doesn't apply to this contract.\\n     * @dev This is supposed to be implemented by any contract that inherits `AdministrateeInterface` and callable\\n     * only by the Governor contract. This method is therefore minimally implemented in this contract and does nothing.\\n     */\\n    function remargin() external override onlyPreExpiration nonReentrant {\\n        return;\\n    }\\n\\n    /**\\n     * @notice Accessor method for a sponsor's collateral.\\n     * @dev This is necessary because the struct returned by the positions() method shows\\n     * rawCollateral, which isn't a user-readable value.\\n     * @dev This method accounts for pending regular fees that have not yet been withdrawn from this contract, for\\n     * example if the `lastPaymentTime != currentTime`.\\n     * @param sponsor address whose collateral amount is retrieved.\\n     * @return collateralAmount amount of collateral within a sponsors position.\\n     */\\n    function getCollateral(address sponsor)\\n        external\\n        view\\n        nonReentrantView\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        // Note: do a direct access to avoid the validity check.\\n        return\\n            _getPendingRegularFeeAdjustedCollateral(\\n                _getFeeAdjustedCollateral(positions[sponsor].rawCollateral)\\n            );\\n    }\\n\\n    /**\\n     * @notice Accessor method for the total collateral stored within the PricelessPositionManager.\\n     * @return totalCollateral amount of all collateral within the Expiring Multi Party Contract.\\n     * @dev This method accounts for pending regular fees that have not yet been withdrawn from this contract, for\\n     * example if the `lastPaymentTime != currentTime`.\\n     */\\n    function totalPositionCollateral()\\n        external\\n        view\\n        nonReentrantView\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        return\\n            _getPendingRegularFeeAdjustedCollateral(\\n                _getFeeAdjustedCollateral(rawTotalPositionCollateral)\\n            );\\n    }\\n\\n    /**\\n     * @notice Accessor method to compute a transformed price using the finanicalProductLibrary specified at contract\\n     * deployment. If no library was provided then no modification to the price is done.\\n     * @param price input price to be transformed.\\n     * @param requestTime timestamp the oraclePrice was requested at.\\n     * @return transformedPrice price with the transformation function applied to it.\\n     * @dev This method should never revert.\\n     */\\n\\n    function transformPrice(\\n        FixedPoint.Unsigned memory price,\\n        uint256 requestTime\\n    ) public view nonReentrantView returns (FixedPoint.Unsigned memory) {\\n        return _transformPrice(price, requestTime);\\n    }\\n\\n    /**\\n     * @notice Accessor method to compute a transformed price identifier using the finanicalProductLibrary specified\\n     * at contract deployment. If no library was provided then no modification to the identifier is done.\\n     * @param requestTime timestamp the identifier is to be used at.\\n     * @return transformedPrice price with the transformation function applied to it.\\n     * @dev This method should never revert.\\n     */\\n    function transformPriceIdentifier(uint256 requestTime)\\n        public\\n        view\\n        nonReentrantView\\n        returns (bytes32)\\n    {\\n        return _transformPriceIdentifier(requestTime);\\n    }\\n\\n    /****************************************\\n     *          INTERNAL FUNCTIONS          *\\n     ****************************************/\\n\\n    // Reduces a sponsor's position and global counters by the specified parameters. Handles deleting the entire\\n    // position if the entire position is being removed. Does not make any external transfers.\\n    function _reduceSponsorPosition(\\n        address sponsor,\\n        FixedPoint.Unsigned memory tokensToRemove,\\n        FixedPoint.Unsigned memory collateralToRemove,\\n        FixedPoint.Unsigned memory withdrawalAmountToRemove\\n    ) internal {\\n        PositionData storage positionData = _getPositionData(sponsor);\\n\\n        // If the entire position is being removed, delete it instead.\\n        if (\\n            tokensToRemove.isEqual(positionData.tokensOutstanding) &&\\n            _getFeeAdjustedCollateral(positionData.rawCollateral).isEqual(\\n                collateralToRemove\\n            )\\n        ) {\\n            _deleteSponsorPosition(sponsor);\\n            return;\\n        }\\n\\n        // Decrement the sponsor's collateral and global collateral amounts.\\n        _decrementCollateralBalances(positionData, collateralToRemove);\\n\\n        // Ensure that the sponsor will meet the min position size after the reduction.\\n        FixedPoint.Unsigned memory newTokenCount = positionData\\n            .tokensOutstanding\\n            .sub(tokensToRemove);\\n        require(\\n            newTokenCount.isGreaterThanOrEqual(minSponsorTokens),\\n            \\\"Below minimum sponsor position\\\"\\n        );\\n        positionData.tokensOutstanding = newTokenCount;\\n\\n        // Decrement the position's withdrawal amount.\\n        positionData.withdrawalRequestAmount = positionData\\n            .withdrawalRequestAmount\\n            .sub(withdrawalAmountToRemove);\\n\\n        // Decrement the total outstanding tokens in the overall contract.\\n        totalTokensOutstanding = totalTokensOutstanding.sub(tokensToRemove);\\n    }\\n\\n    // Deletes a sponsor's position and updates global counters. Does not make any external transfers.\\n    function _deleteSponsorPosition(address sponsor)\\n        internal\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        PositionData storage positionToLiquidate = _getPositionData(sponsor);\\n\\n        FixedPoint.Unsigned\\n            memory startingGlobalCollateral = _getFeeAdjustedCollateral(\\n                rawTotalPositionCollateral\\n            );\\n\\n        // Remove the collateral and outstanding from the overall total position.\\n        FixedPoint.Unsigned memory remainingRawCollateral = positionToLiquidate\\n            .rawCollateral;\\n        rawTotalPositionCollateral = rawTotalPositionCollateral.sub(\\n            remainingRawCollateral\\n        );\\n        totalTokensOutstanding = totalTokensOutstanding.sub(\\n            positionToLiquidate.tokensOutstanding\\n        );\\n\\n        // Reset the sponsors position to have zero outstanding and collateral.\\n        delete positions[sponsor];\\n\\n        emit EndedSponsorPosition(sponsor);\\n\\n        // Return fee-adjusted amount of collateral deleted from position.\\n        return\\n            startingGlobalCollateral.sub(\\n                _getFeeAdjustedCollateral(rawTotalPositionCollateral)\\n            );\\n    }\\n\\n    function _pfc()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        return _getFeeAdjustedCollateral(rawTotalPositionCollateral);\\n    }\\n\\n    function _getPositionData(address sponsor)\\n        internal\\n        view\\n        onlyCollateralizedPosition(sponsor)\\n        returns (PositionData storage)\\n    {\\n        return positions[sponsor];\\n    }\\n\\n    function _getIdentifierWhitelist()\\n        internal\\n        view\\n        returns (IdentifierWhitelistInterface)\\n    {\\n        return\\n            IdentifierWhitelistInterface(\\n                finder.getImplementationAddress(\\n                    OracleInterfaces.IdentifierWhitelist\\n                )\\n            );\\n    }\\n\\n    function _getOracle() internal view returns (OracleInterface) {\\n        return\\n            OracleInterface(\\n                finder.getImplementationAddress(OracleInterfaces.Oracle)\\n            );\\n    }\\n\\n    function _getOptimisticOracle()\\n        internal\\n        view\\n        returns (OptimisticOracleInterface)\\n    {\\n        return\\n            OptimisticOracleInterface(\\n                finder.getImplementationAddress(\\n                    OracleInterfaces.OptimisticOracle\\n                )\\n            );\\n    }\\n\\n    function _getFinancialContractsAdminAddress()\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return\\n            finder.getImplementationAddress(\\n                OracleInterfaces.FinancialContractsAdmin\\n            );\\n    }\\n\\n    // Requests a price for transformed `priceIdentifier` at `requestedTime` from the Oracle.\\n    function _requestOraclePriceExpiration(uint256 requestedTime) internal {\\n        OptimisticOracleInterface optimisticOracle = _getOptimisticOracle();\\n\\n        // Increase token allowance to enable the optimistic oracle reward transfer.\\n        FixedPoint.Unsigned memory reward = _computeFinalFees();\\n        collateralCurrency.safeIncreaseAllowance(\\n            address(optimisticOracle),\\n            reward.rawValue\\n        );\\n        optimisticOracle.requestPrice(\\n            _transformPriceIdentifier(requestedTime),\\n            requestedTime,\\n            _getAncillaryData(),\\n            collateralCurrency,\\n            reward.rawValue // Reward is equal to the final fee\\n        );\\n\\n        // Apply haircut to all sponsors by decrementing the cumlativeFeeMultiplier by the amount lost from the final fee.\\n        _adjustCumulativeFeeMultiplier(reward, _pfc());\\n    }\\n\\n    // Fetches a resolved Oracle price from the Oracle. Reverts if the Oracle hasn't resolved for this request.\\n    function _getOraclePriceExpiration(uint256 requestedTime)\\n        internal\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        // Create an instance of the oracle and get the price. If the price is not resolved revert.\\n        OptimisticOracleInterface optimisticOracle = _getOptimisticOracle();\\n        require(\\n            optimisticOracle.hasPrice(\\n                address(this),\\n                _transformPriceIdentifier(requestedTime),\\n                requestedTime,\\n                _getAncillaryData()\\n            )\\n        );\\n        int256 optimisticOraclePrice = optimisticOracle.settleAndGetPrice(\\n            _transformPriceIdentifier(requestedTime),\\n            requestedTime,\\n            _getAncillaryData()\\n        );\\n\\n        // For now we don't want to deal with negative prices in positions.\\n        if (optimisticOraclePrice < 0) {\\n            optimisticOraclePrice = 0;\\n        }\\n        return\\n            _transformPrice(\\n                FixedPoint.Unsigned(uint256(optimisticOraclePrice)),\\n                requestedTime\\n            );\\n    }\\n\\n    // Requests a price for transformed `priceIdentifier` at `requestedTime` from the Oracle.\\n    function _requestOraclePriceLiquidation(uint256 requestedTime) internal {\\n        OracleInterface oracle = _getOracle();\\n        oracle.requestPrice(\\n            _transformPriceIdentifier(requestedTime),\\n            requestedTime\\n        );\\n    }\\n\\n    // Fetches a resolved Oracle price from the Oracle. Reverts if the Oracle hasn't resolved for this request.\\n    function _getOraclePriceLiquidation(uint256 requestedTime)\\n        internal\\n        view\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        // Create an instance of the oracle and get the price. If the price is not resolved revert.\\n        OracleInterface oracle = _getOracle();\\n        require(\\n            oracle.hasPrice(\\n                _transformPriceIdentifier(requestedTime),\\n                requestedTime\\n            ),\\n            \\\"Unresolved oracle price\\\"\\n        );\\n        int256 oraclePrice = oracle.getPrice(\\n            _transformPriceIdentifier(requestedTime),\\n            requestedTime\\n        );\\n\\n        // For now we don't want to deal with negative prices in positions.\\n        if (oraclePrice < 0) {\\n            oraclePrice = 0;\\n        }\\n        return\\n            _transformPrice(\\n                FixedPoint.Unsigned(uint256(oraclePrice)),\\n                requestedTime\\n            );\\n    }\\n\\n    // Reset withdrawal request by setting the withdrawal request and withdrawal timestamp to 0.\\n    function _resetWithdrawalRequest(PositionData storage positionData)\\n        internal\\n    {\\n        positionData.withdrawalRequestAmount = FixedPoint.fromUnscaledUint(0);\\n        positionData.withdrawalRequestPassTimestamp = 0;\\n    }\\n\\n    // Ensure individual and global consistency when increasing collateral balances. Returns the change to the position.\\n    function _incrementCollateralBalances(\\n        PositionData storage positionData,\\n        FixedPoint.Unsigned memory collateralAmount\\n    ) internal returns (FixedPoint.Unsigned memory) {\\n        _addCollateral(positionData.rawCollateral, collateralAmount);\\n        return _addCollateral(rawTotalPositionCollateral, collateralAmount);\\n    }\\n\\n    // Ensure individual and global consistency when decrementing collateral balances. Returns the change to the\\n    // position. We elect to return the amount that the global collateral is decreased by, rather than the individual\\n    // position's collateral, because we need to maintain the invariant that the global collateral is always\\n    // <= the collateral owned by the contract to avoid reverts on withdrawals. The amount returned = amount withdrawn.\\n    function _decrementCollateralBalances(\\n        PositionData storage positionData,\\n        FixedPoint.Unsigned memory collateralAmount\\n    ) internal returns (FixedPoint.Unsigned memory) {\\n        _removeCollateral(positionData.rawCollateral, collateralAmount);\\n        return _removeCollateral(rawTotalPositionCollateral, collateralAmount);\\n    }\\n\\n    // Ensure individual and global consistency when decrementing collateral balances. Returns the change to the position.\\n    // This function is similar to the _decrementCollateralBalances function except this function checks position GCR\\n    // between the decrements. This ensures that collateral removal will not leave the position undercollateralized.\\n    function _decrementCollateralBalancesCheckGCR(\\n        PositionData storage positionData,\\n        FixedPoint.Unsigned memory collateralAmount\\n    ) internal returns (FixedPoint.Unsigned memory) {\\n        _removeCollateral(positionData.rawCollateral, collateralAmount);\\n        require(_checkPositionCollateralization(positionData), \\\"CR below GCR\\\");\\n        return _removeCollateral(rawTotalPositionCollateral, collateralAmount);\\n    }\\n\\n    // These internal functions are supposed to act identically to modifiers, but re-used modifiers\\n    // unnecessarily increase contract bytecode size.\\n    // source: https://blog.polymath.network/solidity-tips-and-tricks-to-save-gas-and-reduce-bytecode-size-c44580b218e6\\n    function _onlyOpenState() internal view {\\n        require(\\n            contractState == ContractState.Open,\\n            \\\"Contract state is not OPEN\\\"\\n        );\\n    }\\n\\n    function _onlyPreExpiration() internal view {\\n        require(\\n            getCurrentTime() < expirationTimestamp,\\n            \\\"Only callable pre-expiry\\\"\\n        );\\n    }\\n\\n    function _onlyPostExpiration() internal view {\\n        require(\\n            getCurrentTime() >= expirationTimestamp,\\n            \\\"Only callable post-expiry\\\"\\n        );\\n    }\\n\\n    function _onlyCollateralizedPosition(address sponsor) internal view {\\n        require(\\n            _getFeeAdjustedCollateral(positions[sponsor].rawCollateral)\\n                .isGreaterThan(0),\\n            \\\"Position has no collateral\\\"\\n        );\\n    }\\n\\n    // Note: This checks whether an already existing position has a pending withdrawal. This cannot be used on the\\n    // `create` method because it is possible that `create` is called on a new position (i.e. one without any collateral\\n    // or tokens outstanding) which would fail the `onlyCollateralizedPosition` modifier on `_getPositionData`.\\n    function _positionHasNoPendingWithdrawal(address sponsor) internal view {\\n        require(\\n            _getPositionData(sponsor).withdrawalRequestPassTimestamp == 0,\\n            \\\"Pending withdrawal\\\"\\n        );\\n    }\\n\\n    /****************************************\\n     *          PRIVATE FUNCTIONS          *\\n     ****************************************/\\n\\n    function _checkPositionCollateralization(PositionData storage positionData)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return\\n            _checkCollateralization(\\n                _getFeeAdjustedCollateral(positionData.rawCollateral),\\n                positionData.tokensOutstanding\\n            );\\n    }\\n\\n    // Checks whether the provided `collateral` and `numTokens` have a collateralization ratio above the global\\n    // collateralization ratio.\\n    function _checkCollateralization(\\n        FixedPoint.Unsigned memory collateral,\\n        FixedPoint.Unsigned memory numTokens\\n    ) private view returns (bool) {\\n        FixedPoint.Unsigned memory global = _getCollateralizationRatio(\\n            _getFeeAdjustedCollateral(rawTotalPositionCollateral),\\n            totalTokensOutstanding\\n        );\\n        FixedPoint.Unsigned memory thisChange = _getCollateralizationRatio(\\n            collateral,\\n            numTokens\\n        );\\n        return !global.isGreaterThan(thisChange);\\n    }\\n\\n    function _getCollateralizationRatio(\\n        FixedPoint.Unsigned memory collateral,\\n        FixedPoint.Unsigned memory numTokens\\n    ) private pure returns (FixedPoint.Unsigned memory ratio) {\\n        if (!numTokens.isGreaterThan(0)) {\\n            return FixedPoint.fromUnscaledUint(0);\\n        } else {\\n            return collateral.div(numTokens);\\n        }\\n    }\\n\\n    // IERC20Standard.decimals() will revert if the collateral contract has not implemented the decimals() method,\\n    // which is possible since the method is only an OPTIONAL method in the ERC20 standard:\\n    // https://eips.ethereum.org/EIPS/eip-20#methods.\\n    function _getSyntheticDecimals(address _collateralAddress)\\n        public\\n        view\\n        returns (uint8 decimals)\\n    {\\n        try IERC20Standard(_collateralAddress).decimals() returns (\\n            uint8 _decimals\\n        ) {\\n            return _decimals;\\n        } catch {\\n            return 18;\\n        }\\n    }\\n\\n    function _transformPrice(\\n        FixedPoint.Unsigned memory price,\\n        uint256 requestTime\\n    ) internal view returns (FixedPoint.Unsigned memory) {\\n        if (!address(financialProductLibrary).isContract()) return price;\\n        try financialProductLibrary.transformPrice(price, requestTime) returns (\\n            FixedPoint.Unsigned memory transformedPrice\\n        ) {\\n            return transformedPrice;\\n        } catch {\\n            return price;\\n        }\\n    }\\n\\n    function _transformPriceIdentifier(uint256 requestTime)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        if (!address(financialProductLibrary).isContract())\\n            return priceIdentifier;\\n        try\\n            financialProductLibrary.transformPriceIdentifier(\\n                priceIdentifier,\\n                requestTime\\n            )\\n        returns (bytes32 transformedIdentifier) {\\n            return transformedIdentifier;\\n        } catch {\\n            return priceIdentifier;\\n        }\\n    }\\n\\n    function _getAncillaryData() internal view returns (bytes memory) {\\n        // Note: when ancillary data is passed to the optimistic oracle, it should be tagged with the token address\\n        // whose funding rate it's trying to get.\\n        return abi.encodePacked(address(tokenCurrency));\\n    }\\n}\\n\",\"keccak256\":\"0x4a3fdbfe0b5b19c0dd5b591ac88fe6217f064b3c5d59101d379c6249e8ca31ea\",\"license\":\"MIT\"},\"contracts/UMA/oracle/implementation/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\\n */\\nlibrary OracleInterfaces {\\n    bytes32 public constant Oracle = \\\"Oracle\\\";\\n    bytes32 public constant IdentifierWhitelist = \\\"IdentifierWhitelist\\\";\\n    bytes32 public constant Store = \\\"Store\\\";\\n    bytes32 public constant FinancialContractsAdmin = \\\"FinancialContractsAdmin\\\";\\n    bytes32 public constant Registry = \\\"Registry\\\";\\n    bytes32 public constant CollateralWhitelist = \\\"CollateralWhitelist\\\";\\n    bytes32 public constant OptimisticOracle = \\\"OptimisticOracle\\\";\\n    bytes32 public constant Bridge = \\\"Bridge\\\";\\n    bytes32 public constant GenericHandler = \\\"GenericHandler\\\";\\n    bytes32 public constant SkinnyOptimisticOracle = \\\"SkinnyOptimisticOracle\\\";\\n    bytes32 public constant ChildMessenger = \\\"ChildMessenger\\\";\\n    bytes32 public constant OracleHub = \\\"OracleHub\\\";\\n    bytes32 public constant OracleSpoke = \\\"OracleSpoke\\\";\\n}\\n\\n/**\\n * @title Commonly re-used values for contracts associated with the OptimisticOracle.\\n */\\nlibrary OptimisticOracleConstraints {\\n    // Any price request submitted to the OptimisticOracle must contain ancillary data no larger than this value.\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` constant value otherwise it is possible\\n    // that a price can be requested to the OptimisticOracle successfully, but cannot be resolved by the DVM which\\n    // refuses to accept a price request made with ancillary data length over a certain size.\\n    uint256 public constant ancillaryBytesLimit = 8192;\\n}\\n\",\"keccak256\":\"0x1d17d417e4672ab9f927e768e41735a9873c395edeee49eb1dbd79817409a460\",\"license\":\"MIT\"},\"contracts/UMA/oracle/interfaces/AdministrateeInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\n\\n/**\\n * @title Interface that all financial contracts expose to the admin.\\n */\\ninterface AdministrateeInterface {\\n    /**\\n     * @notice Initiates the shutdown process, in case of an emergency.\\n     */\\n    function emergencyShutdown() external;\\n\\n    /**\\n     * @notice A core contract method called independently or as a part of other financial contract transactions.\\n     * @dev It pays fees and moves money between margin accounts to make sure they reflect the NAV of the contract.\\n     */\\n    function remargin() external;\\n\\n    /**\\n     * @notice Gets the current profit from corruption for this contract in terms of the collateral currency.\\n     * @dev This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are\\n     * expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.\\n     * @return pfc value for equal to the current profit from corruption denominated in collateral currency.\\n     */\\n    function pfc() external view returns (FixedPoint.Unsigned memory);\\n}\\n\",\"keccak256\":\"0x8f468cc7757c9821d6a95cbec216333da99a1bcbf09bcba5cf192ab3eace96d1\",\"license\":\"MIT\"},\"contracts/UMA/oracle/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\n * @dev Examples are the Oracle or Store interfaces.\\n */\\ninterface FinderInterface {\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function changeImplementationAddress(\\n        bytes32 interfaceName,\\n        address implementationAddress\\n    ) external;\\n\\n    /**\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\n     * @param interfaceName queried interface.\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function getImplementationAddress(bytes32 interfaceName)\\n        external\\n        view\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x043f104060b976bc3d9cdbd6f0a2e8b260fb462c234d90cb1bc237c124269049\",\"license\":\"MIT\"},\"contracts/UMA/oracle/interfaces/IdentifierWhitelistInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interface for whitelists of supported identifiers that the oracle can provide prices for.\\n */\\ninterface IdentifierWhitelistInterface {\\n    /**\\n     * @notice Adds the provided identifier as a supported identifier.\\n     * @dev Price requests using this identifier will succeed after this call.\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\n     */\\n    function addSupportedIdentifier(bytes32 identifier) external;\\n\\n    /**\\n     * @notice Removes the identifier from the whitelist.\\n     * @dev Price requests using this identifier will no longer succeed after this call.\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\n     */\\n    function removeSupportedIdentifier(bytes32 identifier) external;\\n\\n    /**\\n     * @notice Checks whether an identifier is on the whitelist.\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\n     * @return bool if the identifier is supported (or not).\\n     */\\n    function isIdentifierSupported(bytes32 identifier)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x885514ff5c2aec62f7e69c7e5c64d2ef82928d8791d921a039c3d74044b6cbd0\",\"license\":\"MIT\"},\"contracts/UMA/oracle/interfaces/OptimisticOracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./FinderInterface.sol\\\";\\n\\n/**\\n * @title Financial contract facing Oracle interface.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract OptimisticOracleInterface {\\n    event RequestPrice(\\n        address indexed requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        address currency,\\n        uint256 reward,\\n        uint256 finalFee\\n    );\\n    event ProposePrice(\\n        address indexed requester,\\n        address indexed proposer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 proposedPrice,\\n        uint256 expirationTimestamp,\\n        address currency\\n    );\\n    event DisputePrice(\\n        address indexed requester,\\n        address indexed proposer,\\n        address indexed disputer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 proposedPrice\\n    );\\n    event Settle(\\n        address indexed requester,\\n        address indexed proposer,\\n        address indexed disputer,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes ancillaryData,\\n        int256 price,\\n        uint256 payout\\n    );\\n\\n    // Struct representing the state of a price request.\\n    enum State {\\n        Invalid, // Never requested.\\n        Requested, // Requested, no other actions taken.\\n        Proposed, // Proposed, but not expired or disputed yet.\\n        Expired, // Proposed, not disputed, past liveness.\\n        Disputed, // Disputed, but no DVM price returned yet.\\n        Resolved, // Disputed and DVM price is available.\\n        Settled // Final price has been set in the contract (can get here from Expired or Resolved).\\n    }\\n\\n    // Struct representing a price request.\\n    struct Request {\\n        address proposer; // Address of the proposer.\\n        address disputer; // Address of the disputer.\\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\\n        bool settled; // True if the request is settled.\\n        bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\\n        int256 proposedPrice; // Price that the proposer submitted.\\n        int256 resolvedPrice; // Price resolved once the request is settled.\\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\n        uint256 customLiveness; // Custom liveness value set by the requester.\\n    }\\n\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\n    // to accept a price request made with ancillary data length over a certain size.\\n    uint256 public constant ancillaryBytesLimit = 8192;\\n\\n    function defaultLiveness() external view virtual returns (uint256);\\n\\n    function finder() external view virtual returns (FinderInterface);\\n\\n    function getCurrentTime() external view virtual returns (uint256);\\n\\n    // Note: this is required so that typechain generates a return value with named fields.\\n    mapping(bytes32 => Request) public requests;\\n\\n    /**\\n     * @notice Requests a new price.\\n     * @param identifier price identifier being requested.\\n     * @param timestamp timestamp of the price being requested.\\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\n     *               provides its own reward system.\\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\n     * This can be changed with a subsequent call to setBond().\\n     */\\n    function requestPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        IERC20 currency,\\n        uint256 reward\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Set the proposal bond associated with a price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param bond custom bond amount to set.\\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\n     * changed again with a subsequent call to setBond().\\n     */\\n    function setBond(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 bond\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller\\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\\n     * bond, so there is still profit to be made even if the reward is refunded.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     */\\n    function setRefundOnDispute(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\\n     * being auto-resolved.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param customLiveness new custom liveness.\\n     */\\n    function setCustomLiveness(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 customLiveness\\n    ) external virtual;\\n\\n    /**\\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\n     * from this proposal. However, any bonds are pulled from the caller.\\n     * @param proposer address to set as the proposer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePriceFor(\\n        address proposer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Proposes a price value for an existing price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\n     * @param disputer address to set as the disputer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was value (the proposal was incorrect).\\n     */\\n    function disputePriceFor(\\n        address disputer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price value for an existing price request with an active proposal.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n     */\\n    function disputePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\n     * hasn't been settled.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return resolved price.\\n     */\\n    function settleAndGetPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (int256);\\n\\n    /**\\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\n     * the returned bonds as well as additional rewards.\\n     */\\n    function settle(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 payout);\\n\\n    /**\\n     * @notice Gets the current data structure containing all information about a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the Request data structure.\\n     */\\n    function getRequest(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (Request memory);\\n\\n    /**\\n     * @notice Returns the state of a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the State enum value.\\n     */\\n    function getState(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (State);\\n\\n    /**\\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return true if price has resolved or settled, false otherwise.\\n     */\\n    function hasPrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (bool);\\n\\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\\n        public\\n        view\\n        virtual\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x462e7eeb49384d56506fec6d7ca99f2be1f6c0a79eceb6105339a0884269f1a8\",\"license\":\"MIT\"},\"contracts/UMA/oracle/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Financial contract facing Oracle interface.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract OracleInterface {\\n    /**\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\n     * @dev Time must be in the past and the identifier must be supported.\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\n     * @param time unix timestamp for the price request.\\n     */\\n    function requestPrice(bytes32 identifier, uint256 time) public virtual;\\n\\n    /**\\n     * @notice Whether the price for `identifier` and `time` is available.\\n     * @dev Time must be in the past and the identifier must be supported.\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\n     * @param time unix timestamp for the price request.\\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\\n     */\\n    function hasPrice(bytes32 identifier, uint256 time)\\n        public\\n        view\\n        virtual\\n        returns (bool);\\n\\n    /**\\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\\n     * @dev If the price is not available, the method reverts.\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\n     * @param time unix timestamp for the price request.\\n     * @return int256 representing the resolved price for the given identifier and timestamp.\\n     */\\n    function getPrice(bytes32 identifier, uint256 time)\\n        public\\n        view\\n        virtual\\n        returns (int256);\\n}\\n\",\"keccak256\":\"0x1e609803e676a894904a8199adcc0a8e908a9b3cda70d9df3d667979514da60f\",\"license\":\"MIT\"},\"contracts/UMA/oracle/interfaces/StoreInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\n\\n/**\\n * @title Interface that allows financial contracts to pay oracle fees for their use of the system.\\n */\\ninterface StoreInterface {\\n    /**\\n     * @notice Pays Oracle fees in ETH to the store.\\n     * @dev To be used by contracts whose margin currency is ETH.\\n     */\\n    function payOracleFees() external payable;\\n\\n    /**\\n     * @notice Pays oracle fees in the margin currency, erc20Address, to the store.\\n     * @dev To be used if the margin currency is an ERC20 token rather than ETH.\\n     * @param erc20Address address of the ERC20 token used to pay the fee.\\n     * @param amount number of tokens to transfer. An approval for at least this amount must exist.\\n     */\\n    function payOracleFeesErc20(\\n        address erc20Address,\\n        FixedPoint.Unsigned calldata amount\\n    ) external;\\n\\n    /**\\n     * @notice Computes the regular oracle fees that a contract should pay for a period.\\n     * @param startTime defines the beginning time from which the fee is paid.\\n     * @param endTime end time until which the fee is paid.\\n     * @param pfc \\\"profit from corruption\\\", or the maximum amount of margin currency that a\\n     * token sponsor could extract from the contract through corrupting the price feed in their favor.\\n     * @return regularFee amount owed for the duration from start to end time for the given pfc.\\n     * @return latePenalty for paying the fee after the deadline.\\n     */\\n    function computeRegularFee(\\n        uint256 startTime,\\n        uint256 endTime,\\n        FixedPoint.Unsigned calldata pfc\\n    )\\n        external\\n        view\\n        returns (\\n            FixedPoint.Unsigned memory regularFee,\\n            FixedPoint.Unsigned memory latePenalty\\n        );\\n\\n    /**\\n     * @notice Computes the final oracle fees that a contract should pay at settlement.\\n     * @param currency token used to pay the final fee.\\n     * @return finalFee amount due.\\n     */\\n    function computeFinalFee(address currency)\\n        external\\n        view\\n        returns (FixedPoint.Unsigned memory);\\n}\\n\",\"keccak256\":\"0x90468b6f23f5bdcf3e9fef40937845880a859f164bb238d337fd47adfc6f7c6e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x615d2561003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610620000375760003560e01c8063bdc3f244146200003c575b600080fd5b8180156200004957600080fd5b50620000616200005b36600462000176565b6200007d565b6040516001600160a01b03909116815260200160405180910390f35b600080826040516200008f90620000c0565b6200009b919062000286565b604051809103906000f080158015620000b8573d6000803e3d6000fd5b509392505050565b615964806200038c83390190565b6040516101c0810167ffffffffffffffff811182821017156200010157634e487b7160e01b600052604160045260246000fd5b60405290565b80356001600160a01b03811681146200011f57600080fd5b919050565b6000602082840312156200013757600080fd5b6040516020810181811067ffffffffffffffff821117156200016957634e487b7160e01b600052604160045260246000fd5b6040529135825250919050565b60006101c082840312156200018a57600080fd5b62000194620000ce565b8235815260208301356020820152620001b06040840162000107565b6040820152620001c36060840162000107565b6060820152620001d66080840162000107565b6080820152620001e960a0840162000107565b60a0820152620001fc60c0840162000107565b60c082015260e083013560e08201526101006200021c8582860162000124565b9082015261012083810135908201526101406200023c8582860162000124565b90820152610160620002518585830162000124565b90820152610180620002668585830162000124565b908201526101a06200027b8585830162000124565b908201529392505050565b60006101c08201905082518252602083015160208301526040830151620002b860408401826001600160a01b03169052565b506060830151620002d460608401826001600160a01b03169052565b506080830151620002f060808401826001600160a01b03169052565b5060a08301516200030c60a08401826001600160a01b03169052565b5060c08301516200032860c08401826001600160a01b03169052565b5060e083015160e0830152610100808401516200034782850182519052565b505061012083810151908301526101408084015151908301526101608084015151908301526101808084015151908301526101a0928301515192909101919091529056fe60806040523480156200001157600080fd5b506040516200596438038062005964833981016040819052620000349162000628565b8051602082015160408301516060840151608085015160e086015161010087015160a088015160c0890151600080546001600160a81b0319166001600160a01b0380851691909117600160a01b1790915560018054828a166001600160a01b031991821617909155600280549288169290911691909117905589989796959493929190868583620000c4620002ff565b600381905550620000e16001620003a460201b62002db71760201c565b5160045550620000f3915050620003e8565b620001066000805460ff60a01b19169055565b62000110620002ff565b89116200011c57600080fd5b6200012662000448565b6001600160a01b03166390978d1b856040518263ffffffff1660e01b81526004016200015491815260200190565b60206040518083038186803b1580156200016d57600080fd5b505afa15801562000182573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a8919062000738565b620001b257600080fd5b600b899055600c889055600980546001600160a01b038089166001600160a01b0319928316179092558451600d55600a869055600f8054928416929091169190911790556200020f6000805460ff60a01b1916600160a01b179055565b50505050505050505062000228620003e860201b60201c565b6200023b6000805460ff60a01b19169055565b6200025b6001826101400151620004e860201b62002dec1790919060201c565b6200026557600080fd5b620002a360016200028f836101a001518461018001516200050160201b62002e031790919060201c565b6200054660201b62002e361790919060201c565b620002ad57600080fd5b6101208101516012556101408101515160135561016081015151601455610180810151516015556101a081015151601655620002f76000805460ff60a01b1916600160a01b179055565b5050620007e7565b600080546001600160a01b0316156200039f5760008054906101000a90046001600160a01b03166001600160a01b03166329cb924d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200035f57600080fd5b505afa15801562000374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200039a91906200075c565b905090565b504290565b6040805160208101909152600081526040518060200160405280620003e0670de0b6b3a7640000856200055f60201b62002e4d1790919060201c565b905292915050565b600054600160a01b900460ff16620004465760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640160405180910390fd5b565b6002546040516302abf57960e61b81527f4964656e74696669657257686974656c6973740000000000000000000000000060048201526000916001600160a01b03169063aafd5e409060240160206040518083038186803b158015620004ad57600080fd5b505afa158015620004c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200039a919062000776565b6000620004f582620003a4565b51835111905092915050565b60408051602081019091526000815260405180602001604052806200053d846000015186600001516200057460201b62002e591790919060201c565b90529392505050565b60006200055382620003a4565b51835110905092915050565b60006200056d8284620007aa565b9392505050565b60006200056d8284620007cc565b6040516101c081016001600160401b0381118282101715620005b457634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b0381168114620005d257600080fd5b919050565b600060208284031215620005ea57600080fd5b604051602081016001600160401b03811182821017156200061b57634e487b7160e01b600052604160045260246000fd5b6040529151825250919050565b60006101c082840312156200063c57600080fd5b6200064662000582565b82518152602083015160208201526200066260408401620005ba565b60408201526200067560608401620005ba565b60608201526200068860808401620005ba565b60808201526200069b60a08401620005ba565b60a0820152620006ae60c08401620005ba565b60c082015260e083015160e0820152610100620006ce85828601620005d7565b908201526101208381015190820152610140620006ee85828601620005d7565b908201526101606200070385858301620005d7565b908201526101806200071885858301620005d7565b908201526101a06200072d85858301620005d7565b908201529392505050565b6000602082840312156200074b57600080fd5b815180151581146200056d57600080fd5b6000602082840312156200076f57600080fd5b5051919050565b6000602082840312156200078957600080fd5b6200056d82620005ba565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615620007c757620007c762000794565b500290565b60008219821115620007e257620007e262000794565b500190565b61516d80620007f76000396000f3fe608060405234801561001057600080fd5b50600436106103425760003560e01c80635f1af1ca116101b85780639b56d6c911610104578063b9a3c84c116100a2578063d1e92c111161007c578063d1e92c1114610780578063dd0eef3d14610793578063edfa9a9b1461079d578063fcccedc7146107a757600080fd5b8063b9a3c84c14610752578063bc12163014610765578063bda02e771461077857600080fd5b80639ff4dea8116100de5780639ff4dea81461070e578063a1c4d1e714610717578063a765fbea14610737578063b795f0d41461074a57600080fd5b80639b56d6c9146106c35780639e4efaa0146106d65780639f43ddd21461070557600080fd5b806381a10ae11161017157806392120aec1161014b57806392120aec146106955780639375f0e91461069f57806394909e62146106b257806397523661146106ba57600080fd5b806381a10ae11461066957806385209ee0146106715780638c382eb21461068b57600080fd5b80635f1af1ca1461060b57806362b5f7f51461061e5780636ba2f992146106315780637048594b1461064457806379599f96146106575780637e398c221461065f57600080fd5b806333a46ca21161029257806348e30c3f1161023057806350f498461161020a57806350f498461461055357806355f575101461055d5780635617151c146105e55780635aa266c9146105f857600080fd5b806348e30c3f146104fa5780634ead6e51146105045780634f8c48471461052957600080fd5b806336980f581161026c57806336980f58146104cf5780633cb6ce83146104d75780633ee7a5ce146104df57806343e4771b146104f257600080fd5b806333a46ca21461045a5780633403c2fc14610462578063360598e11461046a57600080fd5b80631c39c38d116102ff57806325ed4dd8116102d957806325ed4dd81461041157806329cb924d1461043f5780632d5436cf146104475780632e154f2e1461045057600080fd5b80631c39c38d146103e357806322611280146103f657806322f8e566146103fe57600080fd5b8063081b314e146103475780630c9229ca146103645780630de15fd91461036e5780630ff49b901461039957806318928a0c146103bb578063197f7848146103d0575b600080fd5b6015546103519081565b6040519081526020015b60405180910390f35b6007546103519081565b600154610381906001600160a01b031681565b6040516001600160a01b03909116815260200161035b565b6103ac6103a7366004614b1c565b6107af565b6040519051815260200161035b565b6103ce6103c9366004614b5c565b6107d9565b005b6103ac6103de366004614b92565b610892565b600054610381906001600160a01b031681565b6103ce6108b2565b6103ce61040c366004614bae565b610925565b61042461041f366004614bd9565b61099b565b6040805193845291516020840152519082015260600161035b565b610351610f95565b61035160125481565b6014546103519081565b6103ac611038565b6103ce611172565b61047d610478366004614c3a565b61122a565b60405161035b9190600060c0820190508251518252602083015151602083015260408301515160408301526060830151516060830152608083015151608083015260a08301515160a083015292915050565b6103ce6116a6565b6103ac611738565b6103ac6104ed366004614b92565b6118b6565b6103ac611977565b6013546103519081565b610517610512366004614c6a565b6119b0565b60405160ff909116815260200161035b565b61053c610537366004614c87565b611a27565b60405161035b9b9a99989796959493929190614ccf565b6011546103519081565b6105b861056b366004614c6a565b600660209081526000918252604091829020825180830184528154815260018201548451808501865260028401548152855194850190955260038301548452600490920154909391929085565b6040805195518652602086019490945291519284019290925290516060830152608082015260a00161035b565b6103ce6105f3366004614c6a565b611aee565b6103ce610606366004614b92565b611c9e565b6103ac610619366004614b92565b611e12565b61035161062c366004614bae565b612041565b6103ce61063f366004614d3f565b612054565b600954610381906001600160a01b031681565b6103ce612313565b6016546103519081565b6103ac612388565b60055461067e9060ff1681565b60405161035b9190614d5c565b6008546103519081565b600d546103519081565b600f54610381906001600160a01b031681565b6103ce6123a7565b610351600a5481565b6103ac6106d1366004614c6a565b6123c7565b6106e96106e4366004614bae565b612417565b604080519351845291516020840152519082015260600161035b565b610351600b5481565b610351600c5481565b61072a610725366004614c6a565b612594565b60405161035b9190614d76565b6103ac610745366004614c3a565b6126fe565b6103ce612889565b600254610381906001600160a01b031681565b6103ce610773366004614b92565b6128fb565b6103ce6129d1565b6103ce61078e366004614b92565b6129e9565b6004546103519081565b600e546103519081565b6103ac6129f6565b6040805160208101909152600081526107c6612e65565b6107d08383612ebe565b90505b92915050565b6107e1612f71565b816107eb81612fc9565b6107f3611738565b506107fc612e65565b610804613018565b61080f826000612dec565b61081857600080fd5b600061082384613027565b905061082f818461304f565b5082516040516001600160a01b038616907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c90600090a38251600154610884916001600160a01b039091169033903090613077565b5061088d6130e8565b505050565b6040805160208101909152600081526108a9612e65565b6107d3826130fd565b6108ba612e65565b6108c2613018565b60006108cd33613027565b90508060010154600014156108e157600080fd5b600281015460405133907f74d8a3658feb89d1a5c335229bbbfc3bbcfaf492769feb7aa4cd2d92efeaf69190600090a361091a816131c7565b506109236130e8565b565b6000546001600160a01b031661093a57600080fd5b60005460405163117c72b360e11b8152600481018390526001600160a01b03909116906322f8e56690602401600060405180830381600087803b15801561098057600080fd5b505af1158015610994573d6000803e3d6000fd5b5050505050565b60006109b36040518060200160405280600081525090565b6040805160208101909152600081526109ca611738565b506109d3612f71565b6109db612e65565b6109e3613018565b836109ec610f95565b1115610a365760405162461bcd60e51b81526020600482015260146024820152734d696e656420616674657220646561646c696e6560601b60448201526064015b60405180910390fd5b6000610a4189613027565b9050610a69610a5536889003880188614b92565b6040805160208101909152835481526131e1565b9250610a76836000612dec565b610a7f57600080fd5b604080516020810190915260038201548152600090610a9d90613206565b90506000610aab6000612db7565b6040805160208101909152600285015490819052835191925011610ae957604080516020810190915260028401548152610ae6908390613230565b90505b604080516020810190915283548152610b1e82610b1583610b0f368f90038f018f614b92565b9061325a565b90519051101590565b610b6a5760405162461bcd60e51b815260206004820152601e60248201527f4352206973206d6f7265207468616e206d6178206c69712e20707269636500006044820152606401610a2d565b610b8c82610b83838e803603810190610b0f9190614b92565b90519051111590565b610bd85760405162461bcd60e51b815260206004820152601e60248201527f4352206973206c657373207468616e206d696e206c69712e20707269636500006044820152606401610a2d565b50610be1613297565b9350610bf96040518060200160405280600081525090565b604080516020810190915260008152604080516020810190915285548152600090610c25908990613335565b9050610c31858261325a565b9250610c3d848261325a565b604080516020810190915260028801548152909250600090610c5f908361325a565b9050610c6d8f8a8684613371565b50610c8490506011610c7f8489612e03565b613478565b506001600160a01b038d1660008181526010602090815260409182902080548351610160810185529485523392850192909252909a509190810160018152602001610ccd610f95565b8152602001898152602001848152602001838152602001610cf6610cf16001612db7565b6134f5565b815260200160006001600160a01b03168152602001610d156000612db7565b815260209081018990528254600180820185556000948552938290208351600a9092020180546001600160a01b03199081166001600160a01b03938416178255928401519481018054938416959092169485178255604084015193949093926001600160a81b03191617600160a01b836004811115610d9657610d96614ca5565b021790555060608201516002820155608082015151600382015560a082015151600482015560c082015151600582015560e08201515160068201556101008201516007820180546001600160a01b0319166001600160a01b0390921691909117905561012082015151600882015561014090910151516009909101556040805160208101909152600d548152600186015415801590610e3f5750610e38610f95565b8660010154115b8015610e4d57508051885110155b15610e6c57610e66600c54610e60610f95565b90612e59565b60018701555b88336001600160a01b03168f6001600160a01b03167f39b4371645b4132767fd76a1aad3108ff95c20d7b687b24d171555f5459a75978b6000015187600001518760000151610eb9610f95565b60408051948552602085019390935291830152606082015260800160405180910390a48751600954610efa916001600160a01b039091169033903090613077565b6009548851604051630852cd8d60e31b81526001600160a01b03909216916342966c6891610f2e9160040190815260200190565b600060405180830381600087803b158015610f4857600080fd5b505af1158015610f5c573d6000803e3d6000fd5b50508851600154610f7c93506001600160a01b0316915033903090613077565b505050505050610f8a6130e8565b955095509592505050565b600080546001600160a01b0316156110305760008054906101000a90046001600160a01b03166001600160a01b03166329cb924d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ff357600080fd5b505afa158015611007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102b9190614e48565b905090565b504290565b90565b60408051602081019091526000815261104f612f71565b611057611738565b50611060612e65565b611068613018565b600061107333613027565b90508060010154600014158015611095575061108d610f95565b816001015411155b61109e57600080fd5b604080516020808201835260028401548252825190810190925260038301548252906110e7906110cd90613206565b604080516020810190915260028501548152905190511190565b1561110a5760408051602081019091526003830154815261110790613206565b90505b611114828261351f565b925061111f826131c7565b825160015461113b916001600160a01b03909116903390613547565b825160405133907fc86c3298cb79f486674dca87d9247e88b76146160e7d412cc59b26b14c358a6890600090a350506110356130e8565b61117a612f71565b611182613577565b61118a612e65565b611192613018565b61119a6135dd565b6001600160a01b0316336001600160a01b0316146111b757600080fd5b6005805460ff19166001179055600b546111cf610f95565b600b8190556111dd9061367a565b600b5460405133917fd39eeb7157d9c446579a0893ecf9ecd87d1f466cdb270c6a189cf38ca1e30f489161121991858252602082015260400190565b60405180910390a2506109236130e8565b611232614a5a565b828261123e8282613765565b611246611738565b5061124f612e65565b611257613018565b6000611263858761381b565b905061126f86866138f3565b60408051602081019091526006820154815260009061128d90613206565b6040805160208082018352600886015482528251908101909252600385015482529192506000906112c4908490610b0f908561325a565b6040805160208101909152600486015481529091506000906112e6908561325a565b60408051602081019091526016548152909150600090611306908461325a565b60408051602081019091526015548152909150600090611326908561325a565b6040805160208101909152601454815290915060009061134790859061325a565b604080516020810190915260098a01548152909150600090611369908961325a565b9050611373614a5a565b600360018b0154600160a01b900460ff16600481111561139557611395614ca5565b1415611493576113af826113a98786612e03565b90612e03565b60408201526113c86113c18789613230565b8590612e03565b81526113de856113d88987613230565b90613230565b602082018190526113f190601190613a4b565b6080820152805161140490601190613a4b565b6060820152604081015161141a90601190613a4b565b60a0820181905260078b01549051600154611443926001600160a01b0391821692911690613547565b6001808b0154608083015151915461146b926001600160a01b03918216929190911690613547565b895460608201515160015461148e926001600160a01b0391821692911690613547565b611572565b600460018b0154600160a01b900460ff1660048111156114b5576114b5614ca5565b1415611505576114c9826113a98886612e03565b602082018190526114dc90601190613a4b565b608082018190526001808c01549151905461148e926001600160a01b0391821692911690613547565b6001808b0154600160a01b900460ff16600481111561152657611526614ca5565b1415611572576115368683612e03565b6020820181905261154990601190613a4b565b608082018190526001808c015491519054611572926001600160a01b0391821692911690613547565b60018a0154600160a01b900460ff16600481111561159257611592614ca5565b6080828101515160a084015151606080860151518d516040805195865260208601949094529284015282015233917fb479588a37dc7f6bac1c91587fcfc539cac4949cf26bb536ad9c8d061f00f50d910160405180910390a3601060008f6001600160a01b03166001600160a01b031681526020019081526020016000208f8154811061162157611621614e61565b600091825260208220600a9091020180546001600160a01b031990811682556001820180546001600160a81b03191690556002820183905560038201839055600482018390556005820183905560068201839055600782018054909116905560088101829055600901559b5050505050505050505061169e6130e8565b505092915050565b6116ae612f71565b6116b6612e65565b6116be613018565b60006116c933613027565b905080600401546000146116dc57600080fd5b60006116ec600c54610e60610f95565b9050600b5481106116fc57600080fd5b6004820181905560405133907fbf457c80c8bf299d5c48272c4c1168bf87b33d83b13f0ab9aac332ce1161ed1e90600090a250506109236130e8565b60408051602081019091526000815261174f612e65565b611757613018565b6000611761610f95565b9050600061176d613ac4565b9050600080600061177d85612417565b600388905591945092509050611794816000613af8565b156117a55794506118ae9350505050565b815183516040517f19b92e73d08d517d71ec46136266e4f5d526a8cd4f8501d73713cebfe4f335ef90600090a36117dc8185613b0f565b6117e7836000612dec565b1561187b5760006117f6613b4d565b8451600154919250611813916001600160a01b0316908390613b86565b60015460405163432ce91960e11b81526001600160a01b0391821660048201528551602482015290821690638659d23290604401600060405180830381600087803b15801561186157600080fd5b505af1158015611875573d6000803e3d6000fd5b50505050505b611886826000612dec565b156118a75781516001546118a7916001600160a01b03909116903390613547565b9450505050505b6110356130e8565b6040805160208101909152600081526118cd612f71565b336118d781612fc9565b6118df611738565b506118e8612e65565b6118f0613018565b6118fb836000612dec565b61190457600080fd5b600061190f33613027565b905061191b8185613c47565b80516040519194509033907f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6590600090a38251600154611968916001600160a01b03909116903390613547565b506119716130e8565b50919050565b60408051602081019091526000815261198e612e65565b6040805160208101909152600854815261102b906119ab90613206565b613cb3565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156119eb57600080fd5b505afa925050508015611a1b575060408051601f3d908101601f19168201909252611a1891810190614e77565b60015b6107d357506012919050565b60106020528160005260406000208181548110611a4357600080fd5b6000918252602091829020600a919091020180546001820154600283015460408051808701825260038601548152815180880183526004870154815282518089018452600588015481528351808a0185526006890154815260078901548551808c01875260088b0154815286519b8c019096526009909901548a526001600160a01b039788169b508787169a50600160a01b90960460ff16989497929691959094909391909216918b565b611af6612f71565b33611b0081612fc9565b611b08612e65565b611b10613018565b611b5a611b1d6000612db7565b6001600160a01b03841660009081526006602090815260409182902082519182019092526003909101548152611b5290613206565b905190511490565b611b6357600080fd5b6000611b6e33613027565b90508060040154600014158015611b905750611b88610f95565b816004015411155b611b9957600080fd5b600060048083018281556001600160a01b038616808452600660205260408085208654815560018088015481830155600280890154818401556003808a01548185015595549287019290925533808852838820888155918201889055918101879055938401869055929093018490559151919290917ff1a2dcf23621f1a96185c79d39a5776b5ba3dadbea70c5aa86d84c17c7e9418e9190a36040516001600160a01b038416907ff60993fa76f94c9e0a803526ee6e1314814ed4d2b0d223febf1436b36897fb3790600090a260405133907fcad20625296d189a6fc6e5b39d0d544e5bd99dbda0c8f2f0ecffef3e0fbcc28290600090a250611c9a6130e8565b5050565b611ca6612f71565b33611cb081612fc9565b611cb8611738565b50611cc1612e65565b611cc9613018565b6000611cd433613027565b604080516020810190915281549081905284519192501015611cf557600080fd5b604080516020810190915281548152600090611d119085613230565b6040805160208101909152600d549081905281519192501115611d3357600080fd5b8051825560408051602081019091526007548152611d519085613230565b516007558051845160405133907f77c6871227e5d2dec8dadd5354f78453203e22e669cd0ec4c19d9a8c5edb31d090600090a48351600954611da2916001600160a01b039091169033903090613077565b6009548451604051630852cd8d60e31b81526001600160a01b03909216916342966c6891611dd69160040190815260200190565b600060405180830381600087803b158015611df057600080fd5b505af1158015611e04573d6000803e3d6000fd5b505050505050611c9a6130e8565b60408051602081019091526000815233611e2b81612fc9565b611e33611738565b50611e3c612e65565b611e44613018565b6000611e4f33613027565b604080516020810190915281549081905285519192501015611e7057600080fd5b604080516020810190915281548152600090611e8d908690613335565b604080516020810190915260038401548152909150600090611eb990611eb290613206565b839061325a565b604080516020810190915284549081905287519192501415611ee557611ede33613d29565b9450611f67565b611eef838261351f565b604080516020810190915284548152909550600090611f0e9088613230565b6040805160208101909152600d549081905281519192501115611f435760405162461bcd60e51b8152600401610a2d90614e9a565b8051845560408051602081019091526007548152611f619088613230565b51600755505b8551855160405133907fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a92990600090a48451600154611fb2916001600160a01b03909116903390613547565b8551600954611fd0916001600160a01b039091169033903090613077565b6009548651604051630852cd8d60e31b81526001600160a01b03909216916342966c68916120049160040190815260200190565b600060405180830381600087803b15801561201e57600080fd5b505af1158015612032573d6000803e3d6000fd5b505050505050506119716130e8565b600061204b612e65565b6107d382613e35565b61205c612f71565b612064611738565b5061206d612e65565b612075613018565b336000908152600660209081526040918290208251918201909252600382015481526120c8906120aa9085906113a990613206565b6040805160208101909152835481526120c39085612e03565b613ee1565b806120d857506120d88383613ee1565b6121245760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e7420636f6c6c61746572616c0000000000000000006044820152606401610a2d565b60018101541561216b5760405162461bcd60e51b815260206004820152601260248201527114195b991a5b99c81dda5d1a191c985dd85b60721b6044820152606401610a2d565b604080516020810190915281548152612185906000613af8565b156121e8576040805160208101909152600d5490819052825110156121bc5760405162461bcd60e51b8152600401610a2d90614e9a565b60405133907ff60993fa76f94c9e0a803526ee6e1314814ed4d2b0d223febf1436b36897fb3790600090a25b6121f2818461304f565b5060408051602081019091528154815261220c9083612e03565b518155604080516020810190915260075481526122299083612e03565b516007558151835160405133907f4b82aa16e071a61de1a6b9aeec9edab0356331f8122c78683b469ac8e685dabc90600090a4825160015461227a916001600160a01b039091169033903090613077565b60095482516040516340c10f1960e01b815233600482015260248101919091526001600160a01b03909116906340c10f1990604401602060405180830381600087803b1580156122c957600080fd5b505af11580156122dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123019190614ed1565b61230a57600080fd5b50611c9a6130e8565b61231b613f3e565b612323613577565b61232b611738565b50612334612e65565b61233c613018565b6005805460ff19166001179055600b546123559061367a565b60405133907f18600820405d6cf356e3556301762ca32395e72d8c81494fa344835c9da3633d90600090a26109236130e8565b60408051602081019091526000815261239f612e65565b61102b613ac4565b6123af612e65565b6123b7613018565b6123bf613f97565b6109236130e8565b6040805160208101909152600081526123de612e65565b6001600160a01b038216600090815260066020908152604091829020825191820190925260039091015481526107d3906119ab90613206565b604080516020810190915260008152604080516020810190915260008152604080516020810190915260008152600061244e613b4d565b9050600061245a613ac4565b9050612467816000613af8565b80612473575085600354145b1561247f57505061258d565b6003546040516374201feb60e01b8152600481019190915260248101879052815160448201526001600160a01b038316906374201feb90606401604080518083038186803b1580156124d057600080fd5b505afa1580156124e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125089190614f17565b90955093506125178585612e03565b9250612524836000613af8565b1561253057505061258d565b80518351111561258a5760006125468483613230565b9050600061255486836131e1565b90506125608682613230565b955061256c8282613230565b915061258261257b88846131e1565b8890613230565b965082945050505b50505b9193909250565b606061259e612e65565b6001600160a01b038216600090815260106020908152604080832080548251818502810185019093528083529193909284015b828210156126f35760008481526020908190206040805161016081018252600a860290920180546001600160a01b039081168452600182015490811694840194909452919290830190600160a01b900460ff16600481111561263557612635614ca5565b600481111561264657612646614ca5565b8152600282015460208083019190915260408051808301825260038501548152818401528051808301825260048501548152606084015280518083018252600585015481526080840152805180830182526006850154815260a084015260078401546001600160a01b031660c0840152805180830182526008850154815260e0840152805180830190915260099093015483526101009091019190915290825260019290920191016125d1565b505050509050919050565b60408051602081019091526000815282826127198282614056565b612721611738565b5061272a612e65565b612732613018565b600061273e858761381b565b60408051602081019091526006820154815290915060009061278c9061276390613206565b60408051602080820183526014548252825190810190925260048601548252610b0f919061325a565b9050612799601182613478565b5060018201805460ff60a01b1916600160a11b1790556007820180546001600160a01b0319163317905560028201546127d1906140ec565b60018201548151604080518a8152602081019290925233926001600160a01b0390811692908a16917fcaca181ccad7979cf36ed4fc921e496001ab5264608f0fac7007ae1b43d36102910160405180910390a4604080516020810190915260098301548152612841908290612e03565b60408051602081019091526009840154815290955061286190339061416d565b805160015461287f916001600160a01b039091169033903090613077565b505061169e6130e8565b612891612f71565b612899612e65565b6128a1613018565b60006128ac33613027565b90508060040154600014156128c057600080fd5b60405133907f2e5702420c76e041698ad7ba57a9ff5cadccf647ea8d96e6007a40b5b2662f5690600090a260006004909101556109236130e8565b612903612f71565b3361290d81612fc9565b612915612e65565b61291d613018565b600061292833613027565b9050612935836000612dec565b801561296357506040805160208101909152600382015481526129639061295b90613206565b518451111590565b61296c57600080fd5b600061297c600c54610e60610f95565b9050600b54811061298c57600080fd5b6001820181905583516002830181905560405133907fd33b726e11d2c5d38e6702b16613df0160a07f7ba5185455ee3c45d0494fab1190600090a35050611c9a6130e8565b6129d9612f71565b6129e1612e65565b6123bf613018565b6129f333826107d9565b50565b604080516020810190915260008152612a0d613f3e565b612a15611738565b50612a1e612e65565b612a26613018565b600060055460ff166002811115612a3f57612a3f614ca5565b1415612a825760405162461bcd60e51b81526020600482015260126024820152712ab732bc3834b932b2103837b9b4ba34b7b760711b6044820152606401610a2d565b600260055460ff166002811115612a9b57612a9b614ca5565b14612abd57612aab600b5461429e565b51600e556005805460ff191660021790555b6040805160208101918290526009546370a0823160e01b90925233602482015260009181906001600160a01b03166370a082316044830160206040518083038186803b158015612b0c57600080fd5b505afa158015612b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b449190614e48565b90526040805160208101909152600e548152909150600090612b6790839061325a565b336000908152600660209081526040808320815192830190915260038101548252929350612b9f9190612b9990613206565b90612dec565b15612c88576040805160208082018352600e548252825190810190925282548252600091612bcc9161325a565b604080516020810190915260038401548152909150600090612bed90613206565b90506000612bfd83835190511090565b612c165760405180602001604052806000815250612c20565b612c208284613230565b9050612c2c8582612e03565b336000818152600660205260408082208281556001810183905560028101839055600381018390556004018290555192975090917fcad20625296d189a6fc6e5b39d0d544e5bd99dbda0c8f2f0ecffef3e0fbcc2829190a25050505b60408051602081019091526008548152600090612cae90612ca890613206565b846131e1565b9050612cbb600882613a4b565b60408051602081019091526007548152909550612cd89085613230565b516007558351855160405133907f9d349c102bec959fb7f20f9a3621e015819d3ae4ed6e9afd1f56a69d5845600690600090a48451600154612d27916001600160a01b03909116903390613547565b8351600954612d45916001600160a01b039091169033903090613077565b6009548451604051630852cd8d60e31b81526001600160a01b03909216916342966c6891612d799160040190815260200190565b600060405180830381600087803b158015612d9357600080fd5b505af1158015612da7573d6000803e3d6000fd5b50505050505050506110356130e8565b604080516020810190915260008152604080516020810190915280612de484670de0b6b3a7640000612e4d565b905292915050565b6000612df782612db7565b51835111905092915050565b6040805160208101909152600081526040805160208101909152825184518291612e2d9190612e59565b90529392505050565b6000612e4182612db7565b51835110905092915050565b60006107d08284614f59565b60006107d08284614f78565b600054600160a01b900460ff166109235760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a2d565b604080516020810190915260008152600f546001600160a01b03163b612ee55750816107d3565b600f5460405162ff49b960e41b815284516004820152602481018490526001600160a01b0390911690630ff49b909060440160206040518083038186803b158015612f2f57600080fd5b505afa925050508015612f5f575060408051601f3d908101601f19168201909252612f5c91810190614f90565b60015b612f6a5750816107d3565b90506107d3565b600b54612f7c610f95565b106109235760405162461bcd60e51b815260206004820152601860248201527f4f6e6c792063616c6c61626c65207072652d65787069727900000000000000006044820152606401610a2d565b612fd281613027565b60010154156129f35760405162461bcd60e51b815260206004820152601260248201527114195b991a5b99c81dda5d1a191c985dd85b60721b6044820152606401610a2d565b6000805460ff60a01b19169055565b6000816130338161440d565b50506001600160a01b0316600090815260066020526040902090565b60408051602081019091526000815261306b8360030183613478565b506107d0600883613478565b6040516001600160a01b03808516602483015283166044820152606481018290526130e29085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614490565b50505050565b6000805460ff60a01b1916600160a01b179055565b604080516020810190915260008152600f546001600160a01b03163b6131325750506040805160208101909152601354815290565b600f54604051632a31263760e01b81528351600482015260135460248201526001600160a01b0390911690632a3126379060440160206040518083038186803b15801561317e57600080fd5b505afa9250505080156131ae575060408051601f3d908101601f191682019092526131ab91810190614f90565b60015b6107d35750506040805160208101909152601354815290565b6131d16000612db7565b5160028201556000600190910155565b60408051602081019091526000815281518351106131ff57816107d0565b5090919050565b604080516020810190915260008152604080516020810190915260045481526107d390839061325a565b6040805160208101909152600081526040805160208101909152825184518291612e2d9190614562565b6040805160208101909152600081526040805160208101909152825184518291670de0b6b3a76400009161328d91612e4d565b612e2d9190614fc2565b60408051602081019091526000815260006132b0613b4d565b600154604051635b97aadd60e01b81526001600160a01b039182166004820152919250821690635b97aadd9060240160206040518083038186803b1580156132f757600080fd5b505afa15801561330b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061332f9190614f90565b91505090565b6040805160208101909152600081526040805160208101909152825184518291612e2d9161336b90670de0b6b3a7640000612e4d565b9061456e565b600061337c85613027565b604080516020810190915281549081905285519192501480156133bb57506040805160208101909152600382015481526133bb908490611b5290613206565b156133d0576133c985613d29565b50506130e2565b6133da818461351f565b506040805160208101909152815481526000906133f79086613230565b6040805160208101909152600d54908190528151919250111561342c5760405162461bcd60e51b8152600401610a2d90614e9a565b8051825560408051602081019091526002830154815261344c9084613230565b5160028301556040805160208101909152600754815261346c9086613230565b51600755505050505050565b6040805160208101909152600081526040805160208101909152835481526000906134a290613206565b905060006134af846134f5565b6040805160208101909152865481529091506134cb9082612e03565b5180865560408051602081019091529081526134ec9083906113d890613206565b95945050505050565b604080516020810190915260008152604080516020810190915260045481526107d3908390613335565b60408051602081019091526000815261353b8360030183613a4b565b506107d0600883613a4b565b6040516001600160a01b03831660248201526044810182905261088d90849063a9059cbb60e01b906064016130ab565b600060055460ff16600281111561359057613590614ca5565b146109235760405162461bcd60e51b815260206004820152601a60248201527f436f6e7472616374207374617465206973206e6f74204f50454e0000000000006044820152606401610a2d565b6002546040516302abf57960e61b81527f46696e616e6369616c436f6e74726163747341646d696e00000000000000000060048201526000916001600160a01b03169063aafd5e40906024015b60206040518083038186803b15801561364257600080fd5b505afa158015613656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102b9190614fd6565b600061368461457a565b90506000613690613297565b80516001549192506136ad916001600160a01b0316908490613b86565b816001600160a01b03166311df92f16136c585613e35565b856136ce6145be565b60015486516040516001600160e01b031960e088901b168152613701959493926001600160a01b0316919060040161504b565b602060405180830381600087803b15801561371b57600080fd5b505af115801561372f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137539190614e48565b5061088d81613760613ac4565b613b0f565b6000613771828461381b565b600181810154919250600160a01b90910460ff169081600481111561379857613798614ca5565b11806137cf57506137a7610f95565b6137b0836145f4565b111580156137cf575060018160048111156137cd576137cd614ca5565b145b6130e25760405162461bcd60e51b815260206004820152601c60248201527f4c69717569646174696f6e206e6f7420776974686472617761626c65000000006044820152606401610a2d565b6001600160a01b03821660009081526010602052604081208054831080156138855750600081848154811061385257613852614e61565b90600052602060002090600a020160010160149054906101000a900460ff16600481111561388257613882614ca5565b14155b6138ca5760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081b1a5c5d5a59185d1a5bdb88125160521b6044820152606401610a2d565b8083815481106138dc576138dc614e61565b90600052602060002090600a020191505092915050565b60006138ff828461381b565b905060026001820154600160a01b900460ff16600481111561392357613923614ca5565b1461392d57505050565b61393a816002015461460f565b5160088201819055604080516020808201835292815281519283019091526003830154825260009161396b9161325a565b60408051602081019091526008840154815290915060009061399090611eb2906130fd565b604080516020810190915260058501549081905281519192501015806139b75760046139ba565b60035b60018501805460ff60a01b1916600160a01b8360048111156139de576139de614ca5565b021790555060018401546007850154604080516001600160a01b039283168152602081018a9052841515818301529051928216929188169133917f6c5582199868fabbe697f9ea10abe481bacf53ac78c02a965b34dff82fd20e3b919081900360600190a4505050505050565b604080516020810190915260008152604080516020810190915283548152600090613a7590613206565b90506000613a82846134f5565b604080516020810190915286548152909150613a9e9082613230565b5180865560408051602081019091529081526134ec90613abd90613206565b8390613230565b6040805160208101909152600081526040805160208101909152601154815261102b90613af090613206565b6113a9614772565b6000613b0382612db7565b51835114905092915050565b6000613b1b838361479a565b9050613b44613b2e826113d86001612db7565b604080516020810190915260045481529061325a565b51600455505050565b6002546040516302abf57960e61b81526453746f726560d81b60048201526000916001600160a01b03169063aafd5e409060240161362a565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b158015613bd257600080fd5b505afa158015613be6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c0a9190614e48565b613c149190614f78565b6040516001600160a01b0385166024820152604481018290529091506130e290859063095ea7b360e01b906064016130ab565b604080516020810190915260008152613c638360030183613a4b565b50613c6d83614829565b613ca85760405162461bcd60e51b815260206004820152600c60248201526b21a9103132b637bb9023a1a960a11b6044820152606401610a2d565b6107d0600883613a4b565b6040805160208101909152600081526000613ccf6106e4610f95565b92505050613ce7613ce06000612db7565b5182511490565b15613cf3575090919050565b6000613d07613d00613ac4565b839061479a565b9050613d21613d1a826113d86001612db7565b859061325a565b949350505050565b6040805160208101909152600081526000613d4383613027565b60408051602081019091526008548152909150600090613d6290613206565b60408051602080820183526003860154825282519081019092526008548252919250613d8e9082613230565b5160085560408051602080820183528554825282519081019092526007548252613db89190613230565b516007556001600160a01b038516600081815260066020526040808220828155600181018390556002810183905560038101839055600401829055517fcad20625296d189a6fc6e5b39d0d544e5bd99dbda0c8f2f0ecffef3e0fbcc2829190a2604080516020810190915260085481526134ec90613abd90613206565b600f546000906001600160a01b03163b613e51575050600a5490565b600f54600a5460405163f19371b760e01b81526001600160a01b039092169163f19371b791613e8d918690600401918252602082015260400190565b60206040518083038186803b158015613ea557600080fd5b505afa925050508015613ed5575060408051601f3d908101601f19168201909252613ed291810190614e48565b60015b6107d3575050600a5490565b604080516020810190915260085481526000908190613f1890613f0390613206565b6040805160208101909152600754815261485f565b90506000613f26858561485f565b9050613f3482825190511190565b1595945050505050565b600b54613f49610f95565b10156109235760405162461bcd60e51b815260206004820152601960248201527f4f6e6c792063616c6c61626c6520706f73742d657870697279000000000000006044820152606401610a2d565b6000613fa1613ac4565b6040805160208101918290526001546370a0823160e01b9092523060248201529192506000919081906001600160a01b03166370a082316044830160206040518083038186803b158015613ff457600080fd5b505afa158015614008573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061402c9190614e48565b9052905061403c82825190511090565b15611c9a5761404e613b2e8284613335565b516004555050565b6000614062828461381b565b905061406d816145f4565b614075610f95565b1080156140a05750600180820154600160a01b900460ff16600481111561409e5761409e614ca5565b145b61088d5760405162461bcd60e51b815260206004820152601a60248201527f4c69717569646174696f6e206e6f742064697370757461626c650000000000006044820152606401610a2d565b60006140f6614891565b9050806001600160a01b03166368ad8ae361411084613e35565b846040518363ffffffff1660e01b8152600401614137929190918252602082015260400190565b600060405180830381600087803b15801561415157600080fd5b505af1158015614165573d6000803e3d6000fd5b505050505050565b614178816000613af8565b15614181575050565b6001600160a01b03821630146141b45780516001546141af916001600160a01b039091169084903090613077565b6141e1565b60006141be613ac4565b90506141cc81835190511190565b6141d557600080fd5b6141df8282613b0f565b505b80516040517f4f9bf7e8cd0f2456f9c43d2597bedcf1446c9c64544053f1ece6423ae9a07e5290600090a26000614216613b4d565b8251600154919250614233916001600160a01b0316908390613b86565b60015460405163432ce91960e11b81526001600160a01b0391821660048201528351602482015290821690638659d23290604401600060405180830381600087803b15801561428157600080fd5b505af1158015614295573d6000803e3d6000fd5b50505050505050565b60408051602081019091526000815260006142b761457a565b9050806001600160a01b031663bc58ccaa306142d286613e35565b866142db6145be565b6040518563ffffffff1660e01b81526004016142fa9493929190615087565b60206040518083038186803b15801561431257600080fd5b505afa158015614326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061434a9190614ed1565b61435357600080fd5b6000816001600160a01b03166353b5923961436d86613e35565b866143766145be565b6040518463ffffffff1660e01b8152600401614394939291906150be565b602060405180830381600087803b1580156143ae57600080fd5b505af11580156143c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143e69190614e48565b905060008112156143f5575060005b613d2160405180602001604052808381525085612ebe565b6001600160a01b038116600090815260066020908152604080832081519283019091526003015481526144449190612b9990613206565b6129f35760405162461bcd60e51b815260206004820152601a60248201527f506f736974696f6e20686173206e6f20636f6c6c61746572616c0000000000006044820152606401610a2d565b60006144e5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166148cb9092919063ffffffff16565b80519091501561088d57808060200190518101906145039190614ed1565b61088d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a2d565b60006107d082846150dd565b60006107d08284614fc2565b6002546040516302abf57960e61b81526f4f7074696d69737469634f7261636c6560801b60048201526000916001600160a01b03169063aafd5e409060240161362a565b6009546040516bffffffffffffffffffffffff19606092831b166020820152603401604051602081830303815290604052905090565b60006107d36012548360020154612e5990919063ffffffff16565b6040805160208101909152600081526000614628614891565b9050806001600160a01b031663a03e881a61464285613e35565b856040518363ffffffff1660e01b8152600401614669929190918252602082015260400190565b60206040518083038186803b15801561468157600080fd5b505afa158015614695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146b99190614ed1565b6147055760405162461bcd60e51b815260206004820152601760248201527f556e7265736f6c766564206f7261636c652070726963650000000000000000006044820152606401610a2d565b6000816001600160a01b031663c9280f0661471f86613e35565b866040518363ffffffff1660e01b8152600401614746929190918252602082015260400190565b60206040518083038186803b15801561475e57600080fd5b505afa1580156143c2573d6000803e3d6000fd5b6040805160208101909152600081526040805160208101909152600854815261102b90613206565b6040805160208101909152600080825283516147be90670de0b6b3a7640000612e4d565b83519091506000906147d190839061456e565b84519091506000906147e49084906148e4565b9050801561481057604080516020810190915280614803846001612e59565b81525093505050506107d3565b60405180602001604052808381525093505050506107d3565b6040805160208101909152600382015481526000906107d39061484b90613206565b604080516020810190915284548152613ee1565b604080516020810190915260008152614879826000612dec565b61488757612f6a6000612db7565b612f6a8383613335565b6002546040516302abf57960e61b8152654f7261636c6560d01b60048201526000916001600160a01b03169063aafd5e409060240161362a565b60606148da84846000856148f0565b90505b9392505050565b60006107d082846150f4565b6060824710156149515760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a2d565b6001600160a01b0385163b6149a85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a2d565b600080866001600160a01b031685876040516149c49190615108565b60006040518083038185875af1925050503d8060008114614a01576040519150601f19603f3d011682016040523d82523d6000602084013e614a06565b606091505b5091509150614a16828286614a21565b979650505050505050565b60608315614a305750816148dd565b825115614a405782518084602001fd5b8160405162461bcd60e51b8152600401610a2d9190615124565b6040805160e081018252600060c082018181528252825160208082018552828252808401919091528351808201855282815283850152835180820185528281526060840152835180820185528281526080840152835190810190935282529060a082015290565b6040516020810167ffffffffffffffff81118282101715614af257634e487b7160e01b600052604160045260246000fd5b60405290565b600060208284031215614b0a57600080fd5b614b12614ac1565b9135825250919050565b60008060408385031215614b2f57600080fd5b614b398484614af8565b946020939093013593505050565b6001600160a01b03811681146129f357600080fd5b60008060408385031215614b6f57600080fd5b8235614b7a81614b47565b9150614b898460208501614af8565b90509250929050565b600060208284031215614ba457600080fd5b6107d08383614af8565b600060208284031215614bc057600080fd5b5035919050565b60006020828403121561197157600080fd5b600080600080600060a08688031215614bf157600080fd5b8535614bfc81614b47565b9450614c0b8760208801614bc7565b9350614c1a8760408801614bc7565b9250614c298760608801614bc7565b949793965091946080013592915050565b60008060408385031215614c4d57600080fd5b823591506020830135614c5f81614b47565b809150509250929050565b600060208284031215614c7c57600080fd5b81356148dd81614b47565b60008060408385031215614c9a57600080fd5b8235614b3981614b47565b634e487b7160e01b600052602160045260246000fd5b60058110614ccb57614ccb614ca5565b9052565b6001600160a01b038c811682528b81166020830152610160820190614cf7604084018d614cbb565b606083019a909a5297516080820152955160a0870152935160c0860152915160e085015290941661010083015292516101208201529151610140909201919091529392505050565b60008060408385031215614d5257600080fd5b614b7a8484614af8565b6020810160038310614d7057614d70614ca5565b91905290565b602080825282518282018190526000919060409081850190868401855b82811015614e3b57815180516001600160a01b03908116865287820151168786015285810151614dc587870182614cbb565b5060608181015190860152608080820151519086015260a080820151519086015260c080820151519086015260e0808201515190860152610100808201516001600160a01b0316908601526101208082015151908601526101409081015151908501526101609093019290850190600101614d93565b5091979650505050505050565b600060208284031215614e5a57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215614e8957600080fd5b815160ff811681146148dd57600080fd5b6020808252601e908201527f42656c6f77206d696e696d756d2073706f6e736f7220706f736974696f6e0000604082015260600190565b600060208284031215614ee357600080fd5b815180151581146148dd57600080fd5b600060208284031215614f0557600080fd5b614f0d614ac1565b9151825250919050565b60008060408385031215614f2a57600080fd5b614f348484614ef3565b9150614b898460208501614ef3565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615614f7357614f73614f43565b500290565b60008219821115614f8b57614f8b614f43565b500190565b600060208284031215614fa257600080fd5b6107d08383614ef3565b634e487b7160e01b600052601260045260246000fd5b600082614fd157614fd1614fac565b500490565b600060208284031215614fe857600080fd5b81516148dd81614b47565b60005b8381101561500e578181015183820152602001614ff6565b838111156130e25750506000910152565b60008151808452615037816020860160208601614ff3565b601f01601f19169290920160200192915050565b85815284602082015260a06040820152600061506a60a083018661501f565b6001600160a01b0394909416606083015250608001529392505050565b60018060a01b03851681528360208201528260408201526080606082015260006150b4608083018461501f565b9695505050505050565b8381528260208201526060604082015260006134ec606083018461501f565b6000828210156150ef576150ef614f43565b500390565b60008261510357615103614fac565b500690565b6000825161511a818460208701614ff3565b9190910192915050565b6020815260006107d0602083018461501f56fea2646970667358221220a5bc4e1cf8208fbe7f927395594eaf51f2c6e04d256218b250d5cc6466d35b2f64736f6c63430008090033a2646970667358221220b2f3cfab4e46078062dad146a138e88f51b146c1aa10b42117e349780c84081364736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Using this library to deploy EMP's allows calling contracts to avoid importing the full EMP bytecode.",
    "kind": "dev",
    "methods": {
      "deploy(Liquidatable.ConstructorParams)": {
        "details": "Caller will need to register new EMP with the Registry to begin requesting prices. Caller is also responsible for enforcing constraints on `params`.",
        "params": {
          "params": "is a `ConstructorParams` object from ExpiringMultiParty."
        },
        "returns": {
          "_0": "address of the deployed ExpiringMultiParty contract"
        }
      }
    },
    "title": "Provides convenient Expiring Multi Party contract utilities.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deploy(Liquidatable.ConstructorParams)": {
        "notice": "Returns address of new EMP deployed with given `params` configuration."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}