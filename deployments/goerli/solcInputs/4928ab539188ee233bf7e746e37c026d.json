{
  "language": "Solidity",
  "sources": {
    "contracts/AssetManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract AssetManager is Ownable {\n    uint256 public totalEmpAssets;\n    mapping(uint256 => Asset) public idToVerifiedEmps;\n\n    uint256 public totalSwapPairAssets;\n    mapping(uint256 => Asset) public idToVerifiedSwapPairs;\n\n    uint256 public totalStakingRewardAssets;\n    mapping(uint256 => Asset) public idToVerifiedStakingRewards;\n\n    enum Status {\n        Closed,\n        Paused,\n        Open\n    }\n\n    struct Asset {\n        address addr;\n        Status status;\n    }\n\n    // EMPs\n    function addEmp(address _asset) external onlyOwner {\n        require(_asset != address(0), \"Asset Manager: ZERO_ADDRESS\");\n        totalEmpAssets = totalEmpAssets + 1;\n        idToVerifiedEmps[totalEmpAssets] = Asset(_asset, Status.Open);\n    }\n\n    function pauseEmp(uint256 id) external onlyOwner {\n        require(\n            idToVerifiedEmps[id].status == Status.Open,\n            \"Asset Manager: ASSET_NOT_OPEN\"\n        );\n        idToVerifiedEmps[id].status = Status.Paused;\n    }\n\n    function unpauseEmp(uint256 id) external onlyOwner {\n        require(\n            idToVerifiedEmps[id].status == Status.Paused,\n            \"Asset Manager: ASSET_NOT_PAUSED\"\n        );\n        idToVerifiedEmps[id].status = Status.Open;\n    }\n\n    function closeEmp(uint256 id) external onlyOwner {\n        require(\n            idToVerifiedEmps[id].addr != address(0),\n            \"Asset Manager: ZERO_ADDRESS\"\n        );\n        require(\n            idToVerifiedEmps[id].status != Status.Closed,\n            \"Asset Manager: ASSET_ALREADY_CLOSED\"\n        );\n        idToVerifiedEmps[id].status = Status.Closed;\n    }\n\n    // Swap Pairs\n    function addSwapPair(address _asset) external onlyOwner {\n        require(_asset != address(0), \"Asset Manager: ZERO_ADDRESS\");\n        totalSwapPairAssets = totalSwapPairAssets + 1;\n        idToVerifiedSwapPairs[totalSwapPairAssets] = Asset(_asset, Status.Open);\n    }\n\n    function pauseSwapPair(uint256 id) external onlyOwner {\n        require(\n            idToVerifiedSwapPairs[id].status == Status.Open,\n            \"Asset Manager: ASSET_NOT_OPEN\"\n        );\n        idToVerifiedSwapPairs[id].status = Status.Paused;\n    }\n\n    function unpauseSwapPair(uint256 id) external onlyOwner {\n        require(\n            idToVerifiedSwapPairs[id].status == Status.Paused,\n            \"Asset Manager: ASSET_NOT_PAUSED\"\n        );\n        idToVerifiedSwapPairs[id].status = Status.Open;\n    }\n\n    function closeSwapPair(uint256 id) external onlyOwner {\n        require(\n            idToVerifiedSwapPairs[id].addr != address(0),\n            \"Asset Manager: ZERO_ADDRESS\"\n        );\n        require(\n            idToVerifiedSwapPairs[id].status != Status.Closed,\n            \"Asset Manager: ASSET_ALREADY_CLOSED\"\n        );\n        idToVerifiedSwapPairs[id].status = Status.Closed;\n    }\n\n    // Staking Rewards\n    function addStakingReward(address _asset) external onlyOwner {\n        require(_asset != address(0), \"Asset Manager: ZERO_ADDRESS\");\n        totalStakingRewardAssets = totalStakingRewardAssets + 1;\n        idToVerifiedStakingRewards[totalStakingRewardAssets] = Asset(\n            _asset,\n            Status.Open\n        );\n    }\n\n    function pauseStakingReward(uint256 id) external onlyOwner {\n        require(\n            idToVerifiedStakingRewards[id].status == Status.Open,\n            \"Asset Manager: ASSET_NOT_OPEN\"\n        );\n        idToVerifiedStakingRewards[id].status = Status.Paused;\n    }\n\n    function unpauseStakingReward(uint256 id) external onlyOwner {\n        require(\n            idToVerifiedStakingRewards[id].status == Status.Paused,\n            \"Asset Manager: ASSET_NOT_PAUSED\"\n        );\n        idToVerifiedStakingRewards[id].status = Status.Open;\n    }\n\n    function closeStakingReward(uint256 id) external onlyOwner {\n        require(\n            idToVerifiedStakingRewards[id].addr != address(0),\n            \"Asset Manager: ZERO_ADDRESS\"\n        );\n        require(\n            idToVerifiedStakingRewards[id].status != Status.Closed,\n            \"Asset Manager: ASSET_ALREADY_CLOSED\"\n        );\n        idToVerifiedStakingRewards[id].status = Status.Closed;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/VotingV2.sol": {
      "content": "// TODO: this whole /oracle/implementation directory should be restructured to separate the DVM and the OO.\n\n// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/AncillaryData.sol\";\nimport \"../../common/implementation/FixedPoint.sol\"; // TODO: remove this from this contract.\n\nimport \"../interfaces/FinderInterface.sol\";\nimport \"../interfaces/OracleInterface.sol\";\nimport \"../interfaces/OracleAncillaryInterface.sol\";\nimport \"../interfaces/OracleGovernanceInterface.sol\";\nimport \"../interfaces/VotingV2Interface.sol\";\nimport \"../interfaces/VotingAncillaryInterface.sol\"; // TODO: remove this and simplify down to one v2 interface.\nimport \"../interfaces/IdentifierWhitelistInterface.sol\";\nimport \"./Registry.sol\";\nimport \"./ResultComputation.sol\";\nimport \"./VoteTimingV2.sol\";\nimport \"./Staker.sol\";\nimport \"./Constants.sol\";\nimport \"./SlashingLibrary.sol\";\nimport \"./SpamGuardIdentifierLib.sol\";\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n/**\n * @title Voting system for Oracle.\n * @dev Handles receiving and resolving price requests via a commit-reveal voting scheme.\n */\n// TODO: right now there are multiple interfaces (OracleInterface & OracleAncillaryInterface). We should only have one\n// which should be done by removing the overloaded interfaces.\n\ncontract VotingV2 is\n    Staker,\n    OracleAncillaryInterface, // Interface to support ancillary data with price requests.\n    OracleGovernanceInterface, // Interface to support governance requests.\n    VotingV2Interface,\n    VotingAncillaryInterface // Interface to support ancillary data with voting rounds.\n{\n    using FixedPoint for FixedPoint.Unsigned;\n    using SafeMath for uint256;\n    using VoteTimingV2 for VoteTimingV2.Data;\n    using ResultComputation for ResultComputation.Data;\n\n    /****************************************\n     *        VOTING DATA STRUCTURES        *\n     ****************************************/\n\n    // Identifies a unique price request for which the Oracle will always return the same value.\n    // Tracks ongoing votes as well as the result of the vote.\n\n    struct PriceRequest {\n        bytes32 identifier;\n        uint256 time;\n        // A map containing all votes for this price in various rounds.\n        mapping(uint256 => VoteInstance) voteInstances;\n        // If in the past, this was the voting round where this price was resolved. If current or the upcoming round,\n        // this is the voting round where this price will be voted on, but not necessarily resolved.\n        uint256 lastVotingRound;\n        // The index in the `pendingPriceRequests` that references this PriceRequest. A value of UINT_MAX means that\n        // this PriceRequest is resolved and has been cleaned up from `pendingPriceRequests`.\n        uint256 index;\n        bool isGovernance;\n        bytes ancillaryData;\n    }\n\n    struct VoteInstance {\n        // Maps (voterAddress) to their submission.\n        mapping(address => VoteSubmission) voteSubmissions;\n        // The data structure containing the computed voting results.\n        ResultComputation.Data resultComputation;\n    }\n\n    struct VoteSubmission {\n        // A bytes32 of `0` indicates no commit or a commit that was already revealed.\n        bytes32 commit;\n        // The hash of the value that was revealed.\n        // Note: this is only used for computation of rewards.\n        bytes32 revealHash;\n    }\n\n    struct Round {\n        FixedPoint.Unsigned gatPercentage; // Gat rate set for this round.\n        uint256 cumulativeStakedAtRound; // Total staked tokens at the start of the round.\n    }\n\n    // Represents the status a price request has.\n    enum RequestStatus {\n        NotRequested, // Was never requested.\n        Active, // Is being voted on in the current round.\n        Resolved, // Was resolved in a previous round.\n        Future // Is scheduled to be voted on in a future round.\n    }\n\n    // Only used as a return value in view methods -- never stored in the contract.\n    struct RequestState {\n        RequestStatus status;\n        uint256 lastVotingRound;\n    }\n\n    /****************************************\n     *          INTERNAL TRACKING           *\n     ****************************************/\n\n    // Maps round numbers to the rounds.\n    mapping(uint256 => Round) public rounds;\n\n    // Maps price request IDs to the PriceRequest struct.\n    mapping(bytes32 => PriceRequest) internal priceRequests;\n\n    struct Request {\n        bytes32 requestId;\n        uint256 roundId;\n    }\n\n    // TODO: consider replacing this structure with a linked list.\n    Request[] public priceRequestIds;\n\n    mapping(uint256 => uint256) public deletedRequestJumpMapping;\n\n    // Price request ids for price requests that haven't yet been marked as resolved.\n    // These requests may be for future rounds.\n    bytes32[] internal pendingPriceRequests;\n\n    VoteTimingV2.Data public voteTiming;\n\n    // Percentage of the total token supply that must be used in a vote to\n    // create a valid price resolution. 1 == 100%.\n    FixedPoint.Unsigned public gatPercentage;\n\n    // Reference to the Finder.\n    FinderInterface private immutable finder;\n\n    // Reference to Slashing Library.\n    SlashingLibrary public slashingLibrary;\n\n    // If non-zero, this contract has been migrated to this address. All voters and\n    // financial contracts should query the new address only.\n    address public migratedAddress;\n\n    // Max value of an unsigned integer.\n    uint256 private constant UINT_MAX = ~uint256(0);\n\n    // Max length in bytes of ancillary data that can be appended to a price request.\n    // As of December 2020, the current Ethereum gas limit is 12.5 million. This requestPrice function's gas primarily\n    // comes from computing a Keccak-256 hash in _encodePriceRequest and writing a new PriceRequest to\n    // storage. We have empirically determined an ancillary data limit of 8192 bytes that keeps this function\n    // well within the gas limit at ~8 million gas. To learn more about the gas limit and EVM opcode costs go here:\n    // - https://etherscan.io/chart/gaslimit\n    // - https://github.com/djrtwo/evm-opcode-gas-costs\n    uint256 public constant ancillaryBytesLimit = 8192;\n\n    /****************************************\n     *          SLASHING TRACKERS           *\n     ****************************************/\n\n    uint256 public lastRequestIndexConsidered;\n\n    struct SlashingTracker {\n        uint256 wrongVoteSlashPerToken;\n        uint256 noVoteSlashPerToken;\n        uint256 totalSlashed;\n        uint256 totalCorrectVotes;\n    }\n\n    mapping(uint256 => SlashingTracker) public requestSlashingTrackers;\n\n    /****************************************\n     *        SPAM DELETION TRACKERS        *\n     ****************************************/\n\n    uint256 spamDeletionProposalBond;\n\n    struct SpamDeletionRequest {\n        uint256[2][] spamRequestIndices;\n        uint256 requestTime;\n        bool executed;\n        address proposer;\n    }\n\n    // Maps round numbers to the spam deletion request.\n    SpamDeletionRequest[] internal spamDeletionProposals;\n\n    /****************************************\n     *                EVENTS                *\n     ****************************************/\n\n    event VoteCommitted(\n        address indexed voter,\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        bytes ancillaryData\n    );\n\n    event EncryptedVote(\n        address indexed voter,\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        bytes ancillaryData,\n        bytes encryptedVote\n    );\n\n    event VoteRevealed(\n        address indexed voter,\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        int256 price,\n        bytes ancillaryData,\n        uint256 numTokens\n    );\n\n    event RewardsRetrieved(\n        address indexed voter,\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        bytes ancillaryData,\n        uint256 numTokens\n    );\n\n    event PriceRequestAdded(uint256 indexed roundId, bytes32 indexed identifier, uint256 time, bytes ancillaryData);\n\n    event PriceResolved(\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        int256 price,\n        bytes ancillaryData\n    );\n\n    // /**\n    //  * @notice Construct the Voting contract.\n    //  * @param _phaseLength length of the commit and reveal phases in seconds.\n    //  * @param _gatPercentage of the total token supply that must be used in a vote to create a valid price resolution.\n    //  * @param _votingToken address of the UMA token contract used to commit votes.\n    //  * @param _finder keeps track of all contracts within the system based on their interfaceName.\n    //  * @param _timerAddress Contract that stores the current time in a testing environment.\n    //  * Must be set to 0x0 for production environments that use live time.\n    //  */\n    constructor(\n        uint256 _emissionRate,\n        uint256 _unstakeCoolDown,\n        uint256 _phaseLength,\n        uint256 _minRollToNextRoundLength,\n        FixedPoint.Unsigned memory _gatPercentage,\n        address _votingToken,\n        address _finder,\n        address _timerAddress,\n        address _slashingLibrary\n    ) Staker(_emissionRate, _unstakeCoolDown, _votingToken, _timerAddress) {\n        voteTiming.init(_phaseLength, _minRollToNextRoundLength);\n        require(_gatPercentage.isLessThanOrEqual(1), \"GAT percentage must be <= 100%\");\n        gatPercentage = _gatPercentage;\n        finder = FinderInterface(_finder);\n        slashingLibrary = SlashingLibrary(_slashingLibrary);\n        setSpamDeletionProposalBond(10000e18); // Set the spam deletion proposal bond to 10,000 UMA. // TODO: make constructor param.\n    }\n\n    /***************************************\n                    MODIFIERS\n    ****************************************/\n\n    modifier onlyRegisteredContract() {\n        if (migratedAddress != address(0)) {\n            require(msg.sender == migratedAddress, \"Caller must be migrated address\");\n        } else {\n            Registry registry = Registry(finder.getImplementationAddress(OracleInterfaces.Registry));\n            require(registry.isContractRegistered(msg.sender), \"Called must be registered\");\n        }\n        _;\n    }\n\n    modifier onlyIfNotMigrated() {\n        require(migratedAddress == address(0), \"Only call this if not migrated\");\n        _;\n    }\n\n    /****************************************\n     *          STAKING FUNCTIONS           *\n     ****************************************/\n\n    function updateTrackers(address voterAddress) public {\n        _updateTrackers(voterAddress);\n    }\n\n    function _updateTrackers(address voterAddress) internal override {\n        _updateCumulativeSlashingTrackers();\n        _updateAccountSlashingTrackers(voterAddress);\n        _updateReward(voterAddress);\n    }\n\n    function _updateAccountSlashingTrackers(address voterAddress) internal {\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(getCurrentTime());\n        VoterStake storage voterStake = voterStakes[voterAddress];\n        // Note the method below can hit a gas limit of there are a LOT of requests from the last time this was run.\n        // A future version of this should bound how many requests to look at per call to avoid gas limit issues.\n        int256 slash = 0;\n\n        // Traverse all requests from the last considered request. For each request see if the voter voted correctly or\n        // not. Based on the outcome, attribute the associated slash to the voter.\n        uint256 priceRequestIdsLength = priceRequestIds.length;\n        for (uint256 i = voterStake.lastRequestIndexConsidered; i < priceRequestIdsLength; i = unsafe_inc(i)) {\n            if (deletedRequestJumpMapping[i] != 0) i = deletedRequestJumpMapping[i] + 1;\n            PriceRequest storage priceRequest = priceRequests[priceRequestIds[i].requestId];\n            VoteInstance storage voteInstance = priceRequest.voteInstances[priceRequest.lastVotingRound];\n            uint256 roundId = priceRequestIds[i].roundId;\n\n            // Cant slash this or any subsequent requests if the request is not settled. TODO: this has implications for\n            // rolled votes and should be considered closely.\n            if (_getRequestStatus(priceRequest, currentRoundId) != RequestStatus.Resolved) break;\n\n            bytes32 revealHash = voteInstance.voteSubmissions[voterAddress].revealHash;\n            // The voter did not reveal or did not commit. Slash at noVote rate.\n            if (revealHash == 0)\n                slash -= int256((voterStake.cumulativeStaked * requestSlashingTrackers[i].noVoteSlashPerToken) / 1e18);\n\n                // The voter did not vote with the majority. Slash at wrongVote rate.\n            else if (!voteInstance.resultComputation.wasVoteCorrect(revealHash))\n                slash -= int256(\n                    (voterStake.cumulativeStaked * requestSlashingTrackers[i].wrongVoteSlashPerToken) / 1e18\n                );\n\n                // The voter voted correctly. Receive a pro-rate share of the other voters slashed amounts as a reward.\n            else\n                slash += int256(\n                    (((voterStake.cumulativeStaked * requestSlashingTrackers[i].totalSlashed)) /\n                        requestSlashingTrackers[i].totalCorrectVotes)\n                );\n\n            // If this is not the last price request to apply and the next request in the batch is from a subsequent\n            // round then apply the slashing now. Else, do nothing and apply the slashing after the loop concludes.\n            // This acts to apply slashing within a round as independent actions: multiple votes within the same round\n            // should not impact each other but subsequent rounds should impact each other.\n            if (priceRequestIdsLength - i > 1 && roundId != priceRequestIds[i + 1].roundId) {\n                applySlashToVoter(slash, voterAddress);\n                slash = 0;\n            }\n            voterStake.lastRequestIndexConsidered = i + 1;\n        }\n\n        if (slash != 0) applySlashToVoter(slash, voterAddress);\n    }\n\n    function applySlashToVoter(int256 slash, address voterAddress) internal {\n        VoterStake storage voterStake = voterStakes[voterAddress];\n        if (slash + int256(voterStake.cumulativeStaked) > 0)\n            voterStake.cumulativeStaked = uint256(int256(voterStake.cumulativeStaked) + slash);\n        else voterStake.cumulativeStaked = 0;\n    }\n\n    function _updateCumulativeSlashingTrackers() internal {\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(getCurrentTime());\n        // Note the method below can hit a gas limit of there are a LOT of requests from the last time this was run.\n        // A future version of this should bound how many requests to look at per call to avoid gas limit issues.\n\n        // Traverse all price requests from the last time this method was called and for each request compute and store\n        // the associated slashing rates as a function of the total staked, total votes and total correct votes. Note\n        // that this method in almost all cases will only need to traverse one request as slashing trackers are updated\n        // on every commit and so it is not too computationally inefficient.\n        uint256 priceRequestIdsLength = priceRequestIds.length;\n        for (uint256 i = lastRequestIndexConsidered; i < priceRequestIdsLength; i = unsafe_inc(i)) {\n            if (deletedRequestJumpMapping[i] != 0) i = deletedRequestJumpMapping[i] + 1;\n            Request memory request = priceRequestIds[i];\n            PriceRequest storage priceRequest = priceRequests[request.requestId];\n            VoteInstance storage voteInstance = priceRequest.voteInstances[priceRequest.lastVotingRound];\n\n            // Cant slash this or any subsequent requests if the request is not settled. TODO: this has implications for\n            // rolled votes and should be considered closely.\n            if (_getRequestStatus(priceRequest, currentRoundId) != RequestStatus.Resolved) break;\n            uint256 stakedAtRound = rounds[request.roundId].cumulativeStakedAtRound;\n            uint256 totalVotes = voteInstance.resultComputation.totalVotes.rawValue;\n            uint256 totalCorrectVotes = voteInstance.resultComputation.getTotalCorrectlyVotedTokens().rawValue;\n            uint256 wrongVoteSlashPerToken =\n                priceRequest.isGovernance\n                    ? slashingLibrary.calcWrongVoteSlashPerTokenGovernance(stakedAtRound, totalVotes, totalCorrectVotes)\n                    : slashingLibrary.calcWrongVoteSlashPerToken(stakedAtRound, totalVotes, totalCorrectVotes);\n            uint256 noVoteSlashPerToken =\n                slashingLibrary.calcNoVoteSlashPerToken(stakedAtRound, totalVotes, totalCorrectVotes);\n\n            uint256 totalSlashed =\n                ((noVoteSlashPerToken * (stakedAtRound - totalVotes)) / 1e18) +\n                    ((wrongVoteSlashPerToken * (totalVotes - totalCorrectVotes)) / 1e18);\n\n            requestSlashingTrackers[i] = SlashingTracker(\n                wrongVoteSlashPerToken,\n                noVoteSlashPerToken,\n                totalSlashed,\n                totalCorrectVotes\n            );\n\n            lastRequestIndexConsidered = i + 1;\n        }\n    }\n\n    /****************************************\n     *       SPAM DELETION FUNCTIONS        *\n     ****************************************/\n\n    function signalRequestsAsSpamForDeletion(uint256[2][] calldata spamRequestIndices) public {\n        votingToken.transferFrom(msg.sender, address(this), spamDeletionProposalBond);\n        uint256 currentTime = getCurrentTime();\n        uint256 runningValidationIndex;\n        uint256 spamRequestIndicesLength = spamRequestIndices.length;\n        for (uint256 i = 0; i < spamRequestIndicesLength; i = unsafe_inc(i)) {\n            uint256[2] memory spamRequestIndex = spamRequestIndices[i];\n            // Check request end index is greater than start index.\n            require(spamRequestIndex[0] <= spamRequestIndex[1], \"Bad start index\");\n\n            // check the endIndex is less than the total number of requests.\n            require(spamRequestIndex[1] < priceRequestIds.length, \"Bad end index\");\n\n            // Validate index continuity. This checks that each sequential element within the spamRequestIndices\n            // array is sequently and increasing in size.\n            require(spamRequestIndex[1] > runningValidationIndex, \"Bad index continuity\");\n            runningValidationIndex = spamRequestIndex[1];\n        }\n        // todo: consider if we want to check if the most recent price request has been settled?\n\n        spamDeletionProposals.push(SpamDeletionRequest(spamRequestIndices, currentTime, false, msg.sender));\n        uint256 proposalId = spamDeletionProposals.length - 1;\n\n        bytes32 identifier = SpamGuardIdentifierLib._constructIdentifier(proposalId);\n\n        _requestPrice(identifier, currentTime, \"\", true);\n    }\n\n    function executeSpamDeletion(uint256 proposalId) public {\n        require(spamDeletionProposals[proposalId].executed == false, \"Already executed\");\n        spamDeletionProposals[proposalId].executed = true;\n        bytes32 identifier = SpamGuardIdentifierLib._constructIdentifier(proposalId);\n\n        (bool hasPrice, int256 resolutionPrice, ) =\n            _getPriceOrError(identifier, spamDeletionProposals[proposalId].requestTime, \"\");\n        require(hasPrice, \"Price not yet resolved\");\n\n        // If the price is 1e18 then the spam deletion request was correctly voted on to delete the requests.\n        if (resolutionPrice == 1e18) {\n            // Delete the price requests associated with the spam.\n            for (uint256 i = 0; i < spamDeletionProposals[proposalId].spamRequestIndices.length; i = unsafe_inc(i)) {\n                uint256 startIndex = spamDeletionProposals[proposalId].spamRequestIndices[uint256(i)][0];\n                uint256 endIndex = spamDeletionProposals[proposalId].spamRequestIndices[uint256(i)][1];\n                for (uint256 j = startIndex; j <= endIndex; j++) {\n                    bytes32 requestId = priceRequestIds[j].requestId;\n                    // Remove from pendingPriceRequests.\n                    uint256 lastIndex = pendingPriceRequests.length - 1;\n                    PriceRequest storage lastPriceRequest = priceRequests[pendingPriceRequests[lastIndex]];\n                    lastPriceRequest.index = priceRequests[requestId].index;\n                    pendingPriceRequests[priceRequests[requestId].index] = pendingPriceRequests[lastIndex];\n                    pendingPriceRequests.pop();\n\n                    // Remove the request from the priceRequests mapping.\n                    delete priceRequests[requestId];\n                }\n\n                // Set the deletion request jump mapping. This enables the for loops that iterate over requests to skip\n                // the deleted requests via a \"jump\" over the removed elements from the array.\n                deletedRequestJumpMapping[startIndex] = endIndex;\n            }\n\n            // Return the spamDeletionProposalBond.\n            votingToken.transfer(spamDeletionProposals[proposalId].proposer, spamDeletionProposalBond);\n        }\n        // Else, the spam deletion request was voted down. In this case we send the spamDeletionProposalBond to the store.\n        else {\n            votingToken.transfer(finder.getImplementationAddress(OracleInterfaces.Store), spamDeletionProposalBond);\n        }\n    }\n\n    function setSpamDeletionProposalBond(uint256 _spamDeletionProposalBond) public onlyOwner() {\n        spamDeletionProposalBond = _spamDeletionProposalBond;\n    }\n\n    function getSpamDeletionRequest(uint256 spamDeletionRequestId) public view returns (SpamDeletionRequest memory) {\n        return spamDeletionProposals[spamDeletionRequestId];\n    }\n\n    /****************************************\n     *  PRICE REQUEST AND ACCESS FUNCTIONS  *\n     ****************************************/\n\n    /**\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\n     * @dev Time must be in the past and the identifier must be supported. The length of the ancillary data\n     * is limited such that this method abides by the EVM transaction gas limit.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param time unix timestamp for the price request.\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\n     */\n    function requestPrice(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) public override onlyRegisteredContract() {\n        _requestPrice(identifier, time, ancillaryData, false);\n    }\n\n    /**\n     * @notice Enqueues a governance action request (if a request isn't already present) for the given `identifier`, `time` pair.\n     * @dev Time must be in the past and the identifier must be supported. The length of the ancillary data\n     * is limited such that this method abides by the EVM transaction gas limit.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param time unix timestamp for the price request.\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\n     */\n    function requestGovernanceAction(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) public override onlyOwner() {\n        _requestPrice(identifier, time, ancillaryData, true);\n    }\n\n    /**\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\n     * @dev Time must be in the past and the identifier must be supported. The length of the ancillary data\n     * is limited such that this method abides by the EVM transaction gas limit.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param time unix timestamp for the price request.\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\n     * @param isGovernance indicates whether the request is for a governance action.\n     */\n    function _requestPrice(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData,\n        bool isGovernance\n    ) internal {\n        uint256 blockTime = getCurrentTime();\n        require(time <= blockTime, \"Can only request in past\");\n        require(\n            isGovernance || _getIdentifierWhitelist().isIdentifierSupported(identifier),\n            \"Unsupported identifier request\"\n        );\n        require(ancillaryData.length <= ancillaryBytesLimit, \"Invalid ancillary data\");\n\n        bytes32 priceRequestId = _encodePriceRequest(identifier, time, ancillaryData);\n        PriceRequest storage priceRequest = priceRequests[priceRequestId];\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(blockTime);\n\n        RequestStatus requestStatus = _getRequestStatus(priceRequest, currentRoundId);\n\n        if (requestStatus == RequestStatus.NotRequested) {\n            // Price has never been requested.\n            // If the price request is a governance action then always place it in the following round. If the price\n            // request is a normal request then either place it in the next round or the following round based off\n            // the minRolllToNextRoundLength.\n            uint256 roundIdToVoteOnPriceRequest =\n                isGovernance ? currentRoundId + 1 : voteTiming.computeRoundToVoteOnPriceRequest(blockTime);\n\n            priceRequestIds.push(Request(priceRequestId, roundIdToVoteOnPriceRequest));\n\n            PriceRequest storage newPriceRequest = priceRequests[priceRequestId];\n            newPriceRequest.identifier = identifier;\n            newPriceRequest.time = time;\n            newPriceRequest.lastVotingRound = roundIdToVoteOnPriceRequest;\n            newPriceRequest.index = pendingPriceRequests.length;\n            newPriceRequest.ancillaryData = ancillaryData;\n            newPriceRequest.isGovernance = isGovernance;\n\n            pendingPriceRequests.push(priceRequestId);\n            emit PriceRequestAdded(roundIdToVoteOnPriceRequest, identifier, time, ancillaryData);\n        }\n    }\n\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\n    function requestPrice(bytes32 identifier, uint256 time) public override {\n        requestPrice(identifier, time, \"\");\n    }\n\n    /**\n     * @notice Whether the price for `identifier` and `time` is available.\n     * @dev Time must be in the past and the identifier must be supported.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param time unix timestamp of for the price request.\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\n     * @return _hasPrice bool if the DVM has resolved to a price for the given identifier and timestamp.\n     */\n    function hasPrice(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) public view override onlyRegisteredContract() returns (bool) {\n        (bool _hasPrice, , ) = _getPriceOrError(identifier, time, ancillaryData);\n        return _hasPrice;\n    }\n\n    // TODO: remove all overriden functions that miss ancillary data. DVM2.0 should only accept ancillary data requests.\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\n    function hasPrice(bytes32 identifier, uint256 time) public view override returns (bool) {\n        return hasPrice(identifier, time, \"\");\n    }\n\n    /**\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\n     * @dev If the price is not available, the method reverts.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param time unix timestamp of for the price request.\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\n     * @return int256 representing the resolved price for the given identifier and timestamp.\n     */\n    function getPrice(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) public view override onlyRegisteredContract() returns (int256) {\n        (bool _hasPrice, int256 price, string memory message) = _getPriceOrError(identifier, time, ancillaryData);\n\n        // If the price wasn't available, revert with the provided message.\n        require(_hasPrice, message);\n        return price;\n    }\n\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\n    function getPrice(bytes32 identifier, uint256 time) public view override returns (int256) {\n        return getPrice(identifier, time, \"\");\n    }\n\n    /**\n     * @notice Gets the status of a list of price requests, identified by their identifier and time.\n     * @dev If the status for a particular request is NotRequested, the lastVotingRound will always be 0.\n     * @param requests array of type PendingRequest which includes an identifier and timestamp for each request.\n     * @return requestStates a list, in the same order as the input list, giving the status of each of the specified price requests.\n     */\n    function getPriceRequestStatuses(PendingRequestAncillary[] memory requests)\n        public\n        view\n        returns (RequestState[] memory)\n    {\n        RequestState[] memory requestStates = new RequestState[](requests.length);\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(getCurrentTime());\n        for (uint256 i = 0; i < requests.length; i = unsafe_inc(i)) {\n            PriceRequest storage priceRequest =\n                _getPriceRequest(requests[i].identifier, requests[i].time, requests[i].ancillaryData);\n\n            RequestStatus status = _getRequestStatus(priceRequest, currentRoundId);\n\n            // If it's an active request, its true lastVotingRound is the current one, even if it hasn't been updated.\n            if (status == RequestStatus.Active) {\n                requestStates[i].lastVotingRound = currentRoundId;\n            } else {\n                requestStates[i].lastVotingRound = priceRequest.lastVotingRound;\n            }\n            requestStates[i].status = status;\n        }\n        return requestStates;\n    }\n\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\n    function getPriceRequestStatuses(PendingRequest[] memory requests) public view returns (RequestState[] memory) {\n        PendingRequestAncillary[] memory requestsAncillary = new PendingRequestAncillary[](requests.length);\n\n        for (uint256 i = 0; i < requests.length; i = unsafe_inc(i)) {\n            requestsAncillary[i].identifier = requests[i].identifier;\n            requestsAncillary[i].time = requests[i].time;\n            requestsAncillary[i].ancillaryData = \"\";\n        }\n        return getPriceRequestStatuses(requestsAncillary);\n    }\n\n    /****************************************\n     *            VOTING FUNCTIONS          *\n     ****************************************/\n\n    /**\n     * @notice Commit a vote for a price request for `identifier` at `time`.\n     * @dev `identifier`, `time` must correspond to a price request that's currently in the commit phase.\n     * Commits can be changed.\n     * @dev Since transaction data is public, the salt will be revealed with the vote. While this is the system’s\n     * expected behavior, voters should never reuse salts. If someone else is able to guess the voted price and knows\n     * that a salt will be reused, then they can determine the vote pre-reveal.\n     * @param identifier uniquely identifies the committed vote. EG BTC/USD price pair.\n     * @param time unix timestamp of the price being voted on.\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\n     * @param hash keccak256 hash of the `price`, `salt`, voter `address`, `time`, current `roundId`, and `identifier`.\n     */\n    function commitVote(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData,\n        bytes32 hash\n    ) public override onlyIfNotMigrated() {\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(getCurrentTime());\n        _freezeRoundVariables(currentRoundId);\n        _updateTrackers(msg.sender);\n        // At this point, the computed and last updated round ID should be equal.\n        uint256 blockTime = getCurrentTime();\n        require(hash != bytes32(0), \"Invalid provided hash\");\n        // Current time is required for all vote timing queries.\n        require(\n            voteTiming.computeCurrentPhase(blockTime) == VotingAncillaryInterface.Phase.Commit,\n            \"Cannot commit in reveal phase\"\n        );\n\n        PriceRequest storage priceRequest = _getPriceRequest(identifier, time, ancillaryData);\n        require(\n            _getRequestStatus(priceRequest, currentRoundId) == RequestStatus.Active,\n            \"Cannot commit inactive request\"\n        );\n\n        priceRequest.lastVotingRound = currentRoundId;\n        VoteInstance storage voteInstance = priceRequest.voteInstances[currentRoundId];\n        voteInstance.voteSubmissions[msg.sender].commit = hash;\n\n        emit VoteCommitted(msg.sender, currentRoundId, identifier, time, ancillaryData);\n    }\n\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\n    function commitVote(\n        bytes32 identifier,\n        uint256 time,\n        bytes32 hash\n    ) public override onlyIfNotMigrated() {\n        commitVote(identifier, time, \"\", hash);\n    }\n\n    // TODO: only here for ABI support until removed.\n    function snapshotCurrentRound(bytes calldata signature)\n        external\n        override(VotingV2Interface, VotingAncillaryInterface)\n        onlyIfNotMigrated()\n    {}\n\n    /**\n     * @notice Reveal a previously committed vote for `identifier` at `time`.\n     * @dev The revealed `price`, `salt`, `address`, `time`, `roundId`, and `identifier`, must hash to the latest `hash`\n     * that `commitVote()` was called with. Only the committer can reveal their vote.\n     * @param identifier voted on in the commit phase. EG BTC/USD price pair.\n     * @param time specifies the unix timestamp of the price being voted on.\n     * @param price voted on during the commit phase.\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\n     * @param salt value used to hide the commitment price during the commit phase.\n     */\n    function revealVote(\n        bytes32 identifier,\n        uint256 time,\n        int256 price,\n        bytes memory ancillaryData,\n        int256 salt\n    ) public override onlyIfNotMigrated() {\n        require(voteTiming.computeCurrentPhase(getCurrentTime()) == Phase.Reveal, \"Cannot reveal in commit phase\");\n        // Note: computing the current round is required to disallow people from revealing an old commit after the round is over.\n        uint256 roundId = voteTiming.computeCurrentRoundId(getCurrentTime());\n\n        PriceRequest storage priceRequest = _getPriceRequest(identifier, time, ancillaryData);\n        VoteInstance storage voteInstance = priceRequest.voteInstances[roundId];\n        VoteSubmission storage voteSubmission = voteInstance.voteSubmissions[msg.sender];\n\n        // Scoping to get rid of a stack too deep error.\n        {\n            // 0 hashes are disallowed in the commit phase, so they indicate a different error.\n            // Cannot reveal an uncommitted or previously revealed hash\n            require(voteSubmission.commit != bytes32(0), \"Invalid hash reveal\");\n            require(\n                keccak256(abi.encodePacked(price, salt, msg.sender, time, ancillaryData, roundId, identifier)) ==\n                    voteSubmission.commit,\n                \"Revealed data != commit hash\"\n            );\n        }\n\n        delete voteSubmission.commit;\n\n        // Get the voter's snapshotted balance. Since balances are returned pre-scaled by 10**18, we can directly\n        // initialize the Unsigned value with the returned uint.\n        FixedPoint.Unsigned memory balance = FixedPoint.Unsigned(voterStakes[msg.sender].cumulativeStaked);\n\n        // Set the voter's submission.\n        voteSubmission.revealHash = keccak256(abi.encode(price));\n\n        // Add vote to the results.\n        voteInstance.resultComputation.addVote(price, balance);\n\n        emit VoteRevealed(msg.sender, roundId, identifier, time, price, ancillaryData, balance.rawValue);\n    }\n\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\n    function revealVote(\n        bytes32 identifier,\n        uint256 time,\n        int256 price,\n        int256 salt\n    ) public override {\n        revealVote(identifier, time, price, \"\", salt);\n    }\n\n    /**\n     * @notice commits a vote and logs an event with a data blob, typically an encrypted version of the vote\n     * @dev An encrypted version of the vote is emitted in an event `EncryptedVote` to allow off-chain infrastructure to\n     * retrieve the commit. The contents of `encryptedVote` are never used on chain: it is purely for convenience.\n     * @param identifier unique price pair identifier. Eg: BTC/USD price pair.\n     * @param time unix timestamp of for the price request.\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\n     * @param hash keccak256 hash of the price you want to vote for and a `int256 salt`.\n     * @param encryptedVote offchain encrypted blob containing the voters amount, time and salt.\n     */\n    function commitAndEmitEncryptedVote(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData,\n        bytes32 hash,\n        bytes memory encryptedVote\n    ) public override {\n        commitVote(identifier, time, ancillaryData, hash);\n\n        uint256 roundId = voteTiming.computeCurrentRoundId(getCurrentTime());\n        emit EncryptedVote(msg.sender, roundId, identifier, time, ancillaryData, encryptedVote);\n    }\n\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\n    function commitAndEmitEncryptedVote(\n        bytes32 identifier,\n        uint256 time,\n        bytes32 hash,\n        bytes memory encryptedVote\n    ) public override {\n        commitVote(identifier, time, \"\", hash);\n\n        commitAndEmitEncryptedVote(identifier, time, \"\", hash, encryptedVote);\n    }\n\n    /**\n     * @notice Submit a batch of commits in a single transaction.\n     * @dev Using `encryptedVote` is optional. If included then commitment is emitted in an event.\n     * Look at `project-root/common/Constants.js` for the tested maximum number of\n     * commitments that can fit in one transaction.\n     * @param commits struct to encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`.\n     */\n    function batchCommit(CommitmentAncillary[] memory commits) public override {\n        for (uint256 i = 0; i < commits.length; i = unsafe_inc(i)) {\n            if (commits[i].encryptedVote.length == 0) {\n                commitVote(commits[i].identifier, commits[i].time, commits[i].ancillaryData, commits[i].hash);\n            } else {\n                commitAndEmitEncryptedVote(\n                    commits[i].identifier,\n                    commits[i].time,\n                    commits[i].ancillaryData,\n                    commits[i].hash,\n                    commits[i].encryptedVote\n                );\n            }\n        }\n    }\n\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\n    function batchCommit(Commitment[] memory commits) public override {\n        CommitmentAncillary[] memory commitsAncillary = new CommitmentAncillary[](commits.length);\n\n        for (uint256 i = 0; i < commits.length; i = unsafe_inc(i)) {\n            commitsAncillary[i].identifier = commits[i].identifier;\n            commitsAncillary[i].time = commits[i].time;\n            commitsAncillary[i].ancillaryData = \"\";\n            commitsAncillary[i].hash = commits[i].hash;\n            commitsAncillary[i].encryptedVote = commits[i].encryptedVote;\n        }\n        batchCommit(commitsAncillary);\n    }\n\n    /**\n     * @notice Reveal multiple votes in a single transaction.\n     * Look at `project-root/common/Constants.js` for the tested maximum number of reveals.\n     * that can fit in one transaction.\n     * @dev For more info on reveals, review the comment for `revealVote`.\n     * @param reveals array of the Reveal struct which contains an identifier, time, price and salt.\n     */\n    function batchReveal(RevealAncillary[] memory reveals) public override {\n        for (uint256 i = 0; i < reveals.length; i = unsafe_inc(i)) {\n            revealVote(\n                reveals[i].identifier,\n                reveals[i].time,\n                reveals[i].price,\n                reveals[i].ancillaryData,\n                reveals[i].salt\n            );\n        }\n    }\n\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\n    function batchReveal(Reveal[] memory reveals) public override {\n        RevealAncillary[] memory revealsAncillary = new RevealAncillary[](reveals.length);\n\n        for (uint256 i = 0; i < reveals.length; i = unsafe_inc(i)) {\n            revealsAncillary[i].identifier = reveals[i].identifier;\n            revealsAncillary[i].time = reveals[i].time;\n            revealsAncillary[i].price = reveals[i].price;\n            revealsAncillary[i].ancillaryData = \"\";\n            revealsAncillary[i].salt = reveals[i].salt;\n        }\n        batchReveal(revealsAncillary);\n    }\n\n    /****************************************\n     *        VOTING GETTER FUNCTIONS       *\n     ****************************************/\n\n    /**\n     * @notice Gets the queries that are being voted on this round.\n     * @return pendingRequests array containing identifiers of type `PendingRequest`.\n     * and timestamps for all pending requests.\n     */\n    function getPendingRequests()\n        external\n        view\n        override(VotingV2Interface, VotingAncillaryInterface)\n        returns (PendingRequestAncillary[] memory)\n    {\n        uint256 blockTime = getCurrentTime();\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(blockTime);\n\n        // Solidity memory arrays aren't resizable (and reading storage is expensive). Hence this hackery to filter\n        // `pendingPriceRequests` only to those requests that have an Active RequestStatus.\n        PendingRequestAncillary[] memory unresolved = new PendingRequestAncillary[](pendingPriceRequests.length);\n        uint256 numUnresolved = 0;\n\n        for (uint256 i = 0; i < pendingPriceRequests.length; i = unsafe_inc(i)) {\n            PriceRequest storage priceRequest = priceRequests[pendingPriceRequests[i]];\n            if (_getRequestStatus(priceRequest, currentRoundId) == RequestStatus.Active) {\n                unresolved[numUnresolved] = PendingRequestAncillary({\n                    identifier: priceRequest.identifier,\n                    time: priceRequest.time,\n                    ancillaryData: priceRequest.ancillaryData\n                });\n                numUnresolved++;\n            }\n        }\n\n        PendingRequestAncillary[] memory pendingRequests = new PendingRequestAncillary[](numUnresolved);\n        for (uint256 i = 0; i < numUnresolved; i = unsafe_inc(i)) {\n            pendingRequests[i] = unresolved[i];\n        }\n        return pendingRequests;\n    }\n\n    /**\n     * @notice Returns the current voting phase, as a function of the current time.\n     * @return Phase to indicate the current phase. Either { Commit, Reveal, NUM_PHASES_PLACEHOLDER }.\n     */\n    function getVotePhase() public view override(VotingV2Interface, VotingAncillaryInterface) returns (Phase) {\n        return voteTiming.computeCurrentPhase(getCurrentTime());\n    }\n\n    /**\n     * @notice Returns the current round ID, as a function of the current time.\n     * @return uint256 representing the unique round ID.\n     */\n    function getCurrentRoundId() public view override(VotingV2Interface, VotingAncillaryInterface) returns (uint256) {\n        return voteTiming.computeCurrentRoundId(getCurrentTime());\n    }\n\n    function getRoundEndTime(uint256 roundId) public view returns (uint256) {\n        return voteTiming.computeRoundEndTime(roundId);\n    }\n\n    function getNumberOfPriceRequests() public view returns (uint256) {\n        return priceRequestIds.length;\n    }\n\n    // TODO: remove this function. it's just here to make the contract compile given the interfaces.\n    function retrieveRewards(\n        address voterAddress,\n        uint256 roundId,\n        PendingRequestAncillary[] memory toRetrieve\n    ) public override returns (FixedPoint.Unsigned memory) {}\n\n    /****************************************\n     *        OWNER ADMIN FUNCTIONS         *\n     ****************************************/\n\n    /**\n     * @notice Disables this Voting contract in favor of the migrated one.\n     * @dev Can only be called by the contract owner.\n     * @param newVotingAddress the newly migrated contract address.\n     */\n    function setMigrated(address newVotingAddress)\n        external\n        override(VotingV2Interface, VotingAncillaryInterface)\n        onlyOwner\n    {\n        migratedAddress = newVotingAddress;\n    }\n\n    // here for abi compatibility. remove\n    function setInflationRate(FixedPoint.Unsigned memory newInflationRate)\n        public\n        override(VotingV2Interface, VotingAncillaryInterface)\n        onlyOwner\n    {}\n\n    /**\n     * @notice Resets the Gat percentage. Note: this change only applies to rounds that have not yet begun.\n     * @dev This method is public because calldata structs are not currently supported by solidity.\n     * @param newGatPercentage sets the next round's Gat percentage.\n     */\n    function setGatPercentage(FixedPoint.Unsigned memory newGatPercentage)\n        public\n        override(VotingV2Interface, VotingAncillaryInterface)\n        onlyOwner\n    {\n        require(newGatPercentage.isLessThan(1), \"GAT percentage must be < 100%\");\n        gatPercentage = newGatPercentage;\n    }\n\n    // Here for abi compatibility. to be removed.\n    function setRewardsExpirationTimeout(uint256 NewRewardsExpirationTimeout)\n        public\n        override(VotingV2Interface, VotingAncillaryInterface)\n        onlyOwner\n    {}\n\n    /**\n     * @notice Changes the slashing library used by this contract.\n     * @param _newSlashingLibrary new slashing library address.\n     */\n    function setSlashingLibrary(address _newSlashingLibrary) public override(VotingV2Interface) onlyOwner {\n        slashingLibrary = SlashingLibrary(_newSlashingLibrary);\n    }\n\n    /****************************************\n     *    PRIVATE AND INTERNAL FUNCTIONS    *\n     ****************************************/\n\n    // Returns the price for a given identifer. Three params are returns: bool if there was an error, int to represent\n    // the resolved price and a string which is filled with an error message, if there was an error or \"\".\n    function _getPriceOrError(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    )\n        internal\n        view\n        returns (\n            bool,\n            int256,\n            string memory\n        )\n    {\n        PriceRequest storage priceRequest = _getPriceRequest(identifier, time, ancillaryData);\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(getCurrentTime());\n\n        RequestStatus requestStatus = _getRequestStatus(priceRequest, currentRoundId);\n        if (requestStatus == RequestStatus.Active) {\n            return (false, 0, \"Current voting round not ended\");\n        } else if (requestStatus == RequestStatus.Resolved) {\n            VoteInstance storage voteInstance = priceRequest.voteInstances[priceRequest.lastVotingRound];\n            (, int256 resolvedPrice) =\n                voteInstance.resultComputation.getResolvedPrice(_computeGat(priceRequest.lastVotingRound));\n            return (true, resolvedPrice, \"\");\n        } else if (requestStatus == RequestStatus.Future) {\n            return (false, 0, \"Price is still to be voted on\");\n        } else {\n            return (false, 0, \"Price was never requested\");\n        }\n    }\n\n    function _getPriceRequest(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) private view returns (PriceRequest storage) {\n        return priceRequests[_encodePriceRequest(identifier, time, ancillaryData)];\n    }\n\n    function _encodePriceRequest(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) private pure returns (bytes32) {\n        return keccak256(abi.encode(identifier, time, ancillaryData));\n    }\n\n    function _freezeRoundVariables(uint256 roundId) private {\n        // Only freeze the round if this is the first request in the round.\n        if (rounds[roundId].gatPercentage.rawValue == 0) {\n            // Set the round gat percentage to the current global gat rate.\n            rounds[roundId].gatPercentage = gatPercentage;\n\n            // Store the cumulativeStaked at this roundId to work out slashing and voting trackers.\n            rounds[roundId].cumulativeStakedAtRound = cumulativeStaked;\n        }\n    }\n\n    function _resolvePriceRequest(PriceRequest storage priceRequest, VoteInstance storage voteInstance) private {\n        if (priceRequest.index == UINT_MAX) {\n            return;\n        }\n        (bool isResolved, int256 resolvedPrice) =\n            voteInstance.resultComputation.getResolvedPrice(_computeGat(priceRequest.lastVotingRound));\n        require(isResolved, \"Can't resolve unresolved request\");\n\n        // Delete the resolved price request from pendingPriceRequests.\n        uint256 lastIndex = pendingPriceRequests.length - 1;\n        PriceRequest storage lastPriceRequest = priceRequests[pendingPriceRequests[lastIndex]];\n        lastPriceRequest.index = priceRequest.index;\n        pendingPriceRequests[priceRequest.index] = pendingPriceRequests[lastIndex];\n        pendingPriceRequests.pop();\n\n        priceRequest.index = UINT_MAX;\n        emit PriceResolved(\n            priceRequest.lastVotingRound,\n            priceRequest.identifier,\n            priceRequest.time,\n            resolvedPrice,\n            priceRequest.ancillaryData\n        );\n    }\n\n    function _computeGat(uint256 roundId) internal view returns (FixedPoint.Unsigned memory) {\n        // Nothing staked at the round  - return max value to err on the side of caution.\n        if (rounds[roundId].cumulativeStakedAtRound == 0) return FixedPoint.Unsigned(UINT_MAX);\n\n        // Grab the cumulative staked at the voting round.\n        FixedPoint.Unsigned memory stakedAtRound = FixedPoint.Unsigned(rounds[roundId].cumulativeStakedAtRound);\n\n        // Multiply the total supply at the cumulative staked by the gatPercentage to get the GAT in number of tokens.\n        return stakedAtRound.mul(rounds[roundId].gatPercentage);\n    }\n\n    function _getRequestStatus(PriceRequest storage priceRequest, uint256 currentRoundId)\n        private\n        view\n        returns (RequestStatus)\n    {\n        if (priceRequest.lastVotingRound == 0) {\n            return RequestStatus.NotRequested;\n        } else if (priceRequest.lastVotingRound < currentRoundId) {\n            VoteInstance storage voteInstance = priceRequest.voteInstances[priceRequest.lastVotingRound];\n            (bool isResolved, ) =\n                voteInstance.resultComputation.getResolvedPrice(_computeGat(priceRequest.lastVotingRound));\n\n            return isResolved ? RequestStatus.Resolved : RequestStatus.Active;\n        } else if (priceRequest.lastVotingRound == currentRoundId) {\n            return RequestStatus.Active;\n        } else {\n            // Means than priceRequest.lastVotingRound > currentRoundId\n            return RequestStatus.Future;\n        }\n    }\n\n    function unsafe_inc(uint256 x) internal pure returns (uint256) {\n        unchecked { return x + 1; }\n    }\n\n    function _getIdentifierWhitelist() private view returns (IdentifierWhitelistInterface supportedIdentifiers) {\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\n    }\n}\n"
    },
    "contracts/UMA/common/implementation/AncillaryData.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @title Library for encoding and decoding ancillary data for DVM price requests.\n * @notice  We assume that on-chain ancillary data can be formatted directly from bytes to utf8 encoding via\n * web3.utils.hexToUtf8, and that clients will parse the utf8-encoded ancillary data as a comma-delimitted key-value\n * dictionary. Therefore, this library provides internal methods that aid appending to ancillary data from Solidity\n * smart contracts. More details on UMA's ancillary data guidelines below:\n * https://docs.google.com/document/d/1zhKKjgY1BupBGPPrY_WOJvui0B6DMcd-xDR8-9-SPDw/edit\n */\nlibrary AncillaryData {\n    // This converts the bottom half of a bytes32 input to hex in a highly gas-optimized way.\n    // Source: the brilliant implementation at https://gitter.im/ethereum/solidity?at=5840d23416207f7b0ed08c9b.\n    function toUtf8Bytes32Bottom(bytes32 bytesIn) private pure returns (bytes32) {\n        unchecked {\n            uint256 x = uint256(bytesIn);\n\n            // Nibble interleave\n            x = x & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\n            x = (x | (x * 2**64)) & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff;\n            x = (x | (x * 2**32)) & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff;\n            x = (x | (x * 2**16)) & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff;\n            x = (x | (x * 2**8)) & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff;\n            x = (x | (x * 2**4)) & 0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f;\n\n            // Hex encode\n            uint256 h = (x & 0x0808080808080808080808080808080808080808080808080808080808080808) / 8;\n            uint256 i = (x & 0x0404040404040404040404040404040404040404040404040404040404040404) / 4;\n            uint256 j = (x & 0x0202020202020202020202020202020202020202020202020202020202020202) / 2;\n            x = x + (h & (i | j)) * 0x27 + 0x3030303030303030303030303030303030303030303030303030303030303030;\n\n            // Return the result.\n            return bytes32(x);\n        }\n    }\n\n    /**\n     * @notice Returns utf8-encoded bytes32 string that can be read via web3.utils.hexToUtf8.\n     * @dev Will return bytes32 in all lower case hex characters and without the leading 0x.\n     * This has minor changes from the toUtf8BytesAddress to control for the size of the input.\n     * @param bytesIn bytes32 to encode.\n     * @return utf8 encoded bytes32.\n     */\n    function toUtf8Bytes(bytes32 bytesIn) internal pure returns (bytes memory) {\n        return abi.encodePacked(toUtf8Bytes32Bottom(bytesIn >> 128), toUtf8Bytes32Bottom(bytesIn));\n    }\n\n    /**\n     * @notice Returns utf8-encoded address that can be read via web3.utils.hexToUtf8.\n     * Source: https://ethereum.stackexchange.com/questions/8346/convert-address-to-string/8447#8447\n     * @dev Will return address in all lower case characters and without the leading 0x.\n     * @param x address to encode.\n     * @return utf8 encoded address bytes.\n     */\n    function toUtf8BytesAddress(address x) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(toUtf8Bytes32Bottom(bytes32(bytes20(x)) >> 128), bytes8(toUtf8Bytes32Bottom(bytes20(x))));\n    }\n\n    /**\n     * @notice Converts a uint into a base-10, UTF-8 representation stored in a `string` type.\n     * @dev This method is based off of this code: https://stackoverflow.com/a/65707309.\n     */\n    function toUtf8BytesUint(uint256 x) internal pure returns (bytes memory) {\n        if (x == 0) {\n            return \"0\";\n        }\n        uint256 j = x;\n        uint256 len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint256 k = len;\n        while (x != 0) {\n            k = k - 1;\n            uint8 temp = (48 + uint8(x - (x / 10) * 10));\n            bytes1 b1 = bytes1(temp);\n            bstr[k] = b1;\n            x /= 10;\n        }\n        return bstr;\n    }\n\n    function appendKeyValueBytes32(\n        bytes memory currentAncillaryData,\n        bytes memory key,\n        bytes32 value\n    ) internal pure returns (bytes memory) {\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8Bytes(value));\n    }\n\n    /**\n     * @notice Adds \"key:value\" to `currentAncillaryData` where `value` is an address that first needs to be converted\n     * to utf8 bytes. For example, if `utf8(currentAncillaryData)=\"k1:v1\"`, then this function will return\n     * `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\n     * @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\n     * @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\n     * @param value An address to set as the value in the key:value pair to append to `currentAncillaryData`.\n     * @return Newly appended ancillary data.\n     */\n    function appendKeyValueAddress(\n        bytes memory currentAncillaryData,\n        bytes memory key,\n        address value\n    ) internal pure returns (bytes memory) {\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8BytesAddress(value));\n    }\n\n    /**\n     * @notice Adds \"key:value\" to `currentAncillaryData` where `value` is a uint that first needs to be converted\n     * to utf8 bytes. For example, if `utf8(currentAncillaryData)=\"k1:v1\"`, then this function will return\n     * `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\n     * @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\n     * @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\n     * @param value A uint to set as the value in the key:value pair to append to `currentAncillaryData`.\n     * @return Newly appended ancillary data.\n     */\n    function appendKeyValueUint(\n        bytes memory currentAncillaryData,\n        bytes memory key,\n        uint256 value\n    ) internal pure returns (bytes memory) {\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8BytesUint(value));\n    }\n\n    /**\n     * @notice Helper method that returns the left hand side of a \"key:value\" pair plus the colon \":\" and a leading\n     * comma \",\" if the `currentAncillaryData` is not empty. The return value is intended to be prepended as a prefix to\n     * some utf8 value that is ultimately added to a comma-delimited, key-value dictionary.\n     */\n    function constructPrefix(bytes memory currentAncillaryData, bytes memory key) internal pure returns (bytes memory) {\n        if (currentAncillaryData.length > 0) {\n            return abi.encodePacked(\",\", key, \":\");\n        } else {\n            return abi.encodePacked(key, \":\");\n        }\n    }\n}\n"
    },
    "contracts/UMA/common/implementation/FixedPoint.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\";\n\n/**\n * @title Library for fixed point arithmetic on uints\n */\nlibrary FixedPoint {\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n\n    // Supports 18 decimals. E.g., 1e18 represents \"1\", 5e17 represents \"0.5\".\n    // For unsigned values:\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\n\n    // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\n    struct Unsigned {\n        uint256 rawValue;\n    }\n\n    /**\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\n     * @param a uint to convert into a FixedPoint.\n     * @return the converted FixedPoint.\n     */\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\n    }\n\n    /**\n     * @notice Whether `a` is equal to `b`.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return True if equal, or False.\n     */\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\n        return a.rawValue == fromUnscaledUint(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is equal to `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return True if equal, or False.\n     */\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\n        return a.rawValue == b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return True if `a > b`, or False.\n     */\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\n        return a.rawValue > b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than `b`.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return True if `a > b`, or False.\n     */\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\n        return a.rawValue > fromUnscaledUint(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than `b`.\n     * @param a a uint256.\n     * @param b a FixedPoint.\n     * @return True if `a > b`, or False.\n     */\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\n        return fromUnscaledUint(a).rawValue > b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than or equal to `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return True if `a >= b`, or False.\n     */\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\n        return a.rawValue >= b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than or equal to `b`.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return True if `a >= b`, or False.\n     */\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than or equal to `b`.\n     * @param a a uint256.\n     * @param b a FixedPoint.\n     * @return True if `a >= b`, or False.\n     */\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return True if `a < b`, or False.\n     */\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\n        return a.rawValue < b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than `b`.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return True if `a < b`, or False.\n     */\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\n        return a.rawValue < fromUnscaledUint(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than `b`.\n     * @param a a uint256.\n     * @param b a FixedPoint.\n     * @return True if `a < b`, or False.\n     */\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\n        return fromUnscaledUint(a).rawValue < b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than or equal to `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return True if `a <= b`, or False.\n     */\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\n        return a.rawValue <= b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than or equal to `b`.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return True if `a <= b`, or False.\n     */\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than or equal to `b`.\n     * @param a a uint256.\n     * @param b a FixedPoint.\n     * @return True if `a <= b`, or False.\n     */\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\n    }\n\n    /**\n     * @notice The minimum of `a` and `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the minimum of `a` and `b`.\n     */\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        return a.rawValue < b.rawValue ? a : b;\n    }\n\n    /**\n     * @notice The maximum of `a` and `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the maximum of `a` and `b`.\n     */\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        return a.rawValue > b.rawValue ? a : b;\n    }\n\n    /**\n     * @notice Adds two `Unsigned`s, reverting on overflow.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the sum of `a` and `b`.\n     */\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        return Unsigned(a.rawValue.add(b.rawValue));\n    }\n\n    /**\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return the sum of `a` and `b`.\n     */\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\n        return add(a, fromUnscaledUint(b));\n    }\n\n    /**\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the difference of `a` and `b`.\n     */\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        return Unsigned(a.rawValue.sub(b.rawValue));\n    }\n\n    /**\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return the difference of `a` and `b`.\n     */\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\n        return sub(a, fromUnscaledUint(b));\n    }\n\n    /**\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\n     * @param a a uint256.\n     * @param b a FixedPoint.\n     * @return the difference of `a` and `b`.\n     */\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        return sub(fromUnscaledUint(a), b);\n    }\n\n    /**\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\n     * @dev This will \"floor\" the product.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the product of `a` and `b`.\n     */\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        // There are two caveats with this computation:\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\n        // stored internally as a uint256 ~10^59.\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\n        // would round to 3, but this computation produces the result 2.\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\n    }\n\n    /**\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\n     * @dev This will \"floor\" the product.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return the product of `a` and `b`.\n     */\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\n        return Unsigned(a.rawValue.mul(b));\n    }\n\n    /**\n     * @notice Multiplies two `Unsigned`s and \"ceil's\" the product, reverting on overflow.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the product of `a` and `b`.\n     */\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\n        if (mod != 0) {\n            return Unsigned(mulFloor.add(1));\n        } else {\n            return Unsigned(mulFloor);\n        }\n    }\n\n    /**\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \"ceil's\" the product, reverting on overflow.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the product of `a` and `b`.\n     */\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\n        // Since b is an uint, there is no risk of truncation and we can just mul it normally\n        return Unsigned(a.rawValue.mul(b));\n    }\n\n    /**\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\n     * @dev This will \"floor\" the quotient.\n     * @param a a FixedPoint numerator.\n     * @param b a FixedPoint denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        // There are two caveats with this computation:\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\n        // 10^41 is stored internally as a uint256 10^59.\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\n    }\n\n    /**\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\n     * @dev This will \"floor\" the quotient.\n     * @param a a FixedPoint numerator.\n     * @param b a uint256 denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\n        return Unsigned(a.rawValue.div(b));\n    }\n\n    /**\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\n     * @dev This will \"floor\" the quotient.\n     * @param a a uint256 numerator.\n     * @param b a FixedPoint denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        return div(fromUnscaledUint(a), b);\n    }\n\n    /**\n     * @notice Divides one `Unsigned` by an `Unsigned` and \"ceil's\" the quotient, reverting on overflow or division by 0.\n     * @param a a FixedPoint numerator.\n     * @param b a FixedPoint denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\n        uint256 divFloor = aScaled.div(b.rawValue);\n        uint256 mod = aScaled.mod(b.rawValue);\n        if (mod != 0) {\n            return Unsigned(divFloor.add(1));\n        } else {\n            return Unsigned(divFloor);\n        }\n    }\n\n    /**\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \"ceil's\" the quotient, reverting on overflow or division by 0.\n     * @param a a FixedPoint numerator.\n     * @param b a uint256 denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\n        // Because it is possible that a quotient gets truncated, we can't just call \"Unsigned(a.rawValue.div(b))\"\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\n        // This creates the possibility of overflow if b is very large.\n        return divCeil(a, fromUnscaledUint(b));\n    }\n\n    /**\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\n     * @dev This will \"floor\" the result.\n     * @param a a FixedPoint numerator.\n     * @param b a uint256 denominator.\n     * @return output is `a` to the power of `b`.\n     */\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\n        output = fromUnscaledUint(1);\n        for (uint256 i = 0; i < b; i = i.add(1)) {\n            output = mul(output, a);\n        }\n    }\n\n    // ------------------------------------------------- SIGNED -------------------------------------------------------------\n    // Supports 18 decimals. E.g., 1e18 represents \"1\", 5e17 represents \"0.5\".\n    // For signed values:\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\n\n    struct Signed {\n        int256 rawValue;\n    }\n\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\n        require(a.rawValue >= 0, \"Negative value provided\");\n        return Unsigned(uint256(a.rawValue));\n    }\n\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\n        require(a.rawValue <= uint256(type(int256).max), \"Unsigned too large\");\n        return Signed(int256(a.rawValue));\n    }\n\n    /**\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\n     * @param a int to convert into a FixedPoint.Signed.\n     * @return the converted FixedPoint.Signed.\n     */\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\n        return Signed(a.mul(SFP_SCALING_FACTOR));\n    }\n\n    /**\n     * @notice Whether `a` is equal to `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b a int256.\n     * @return True if equal, or False.\n     */\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\n        return a.rawValue == fromUnscaledInt(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is equal to `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return True if equal, or False.\n     */\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\n        return a.rawValue == b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return True if `a > b`, or False.\n     */\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\n        return a.rawValue > b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b an int256.\n     * @return True if `a > b`, or False.\n     */\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\n        return a.rawValue > fromUnscaledInt(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than `b`.\n     * @param a an int256.\n     * @param b a FixedPoint.Signed.\n     * @return True if `a > b`, or False.\n     */\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\n        return fromUnscaledInt(a).rawValue > b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than or equal to `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return True if `a >= b`, or False.\n     */\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\n        return a.rawValue >= b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than or equal to `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b an int256.\n     * @return True if `a >= b`, or False.\n     */\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than or equal to `b`.\n     * @param a an int256.\n     * @param b a FixedPoint.Signed.\n     * @return True if `a >= b`, or False.\n     */\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return True if `a < b`, or False.\n     */\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\n        return a.rawValue < b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b an int256.\n     * @return True if `a < b`, or False.\n     */\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\n        return a.rawValue < fromUnscaledInt(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than `b`.\n     * @param a an int256.\n     * @param b a FixedPoint.Signed.\n     * @return True if `a < b`, or False.\n     */\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\n        return fromUnscaledInt(a).rawValue < b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than or equal to `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return True if `a <= b`, or False.\n     */\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\n        return a.rawValue <= b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than or equal to `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b an int256.\n     * @return True if `a <= b`, or False.\n     */\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than or equal to `b`.\n     * @param a an int256.\n     * @param b a FixedPoint.Signed.\n     * @return True if `a <= b`, or False.\n     */\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\n    }\n\n    /**\n     * @notice The minimum of `a` and `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return the minimum of `a` and `b`.\n     */\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\n        return a.rawValue < b.rawValue ? a : b;\n    }\n\n    /**\n     * @notice The maximum of `a` and `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return the maximum of `a` and `b`.\n     */\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\n        return a.rawValue > b.rawValue ? a : b;\n    }\n\n    /**\n     * @notice Adds two `Signed`s, reverting on overflow.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return the sum of `a` and `b`.\n     */\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\n        return Signed(a.rawValue.add(b.rawValue));\n    }\n\n    /**\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\n     * @param a a FixedPoint.Signed.\n     * @param b an int256.\n     * @return the sum of `a` and `b`.\n     */\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\n        return add(a, fromUnscaledInt(b));\n    }\n\n    /**\n     * @notice Subtracts two `Signed`s, reverting on overflow.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return the difference of `a` and `b`.\n     */\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\n        return Signed(a.rawValue.sub(b.rawValue));\n    }\n\n    /**\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\n     * @param a a FixedPoint.Signed.\n     * @param b an int256.\n     * @return the difference of `a` and `b`.\n     */\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\n        return sub(a, fromUnscaledInt(b));\n    }\n\n    /**\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\n     * @param a an int256.\n     * @param b a FixedPoint.Signed.\n     * @return the difference of `a` and `b`.\n     */\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\n        return sub(fromUnscaledInt(a), b);\n    }\n\n    /**\n     * @notice Multiplies two `Signed`s, reverting on overflow.\n     * @dev This will \"floor\" the product.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return the product of `a` and `b`.\n     */\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\n        // There are two caveats with this computation:\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\n        // stored internally as an int256 ~10^59.\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\n        // would round to 3, but this computation produces the result 2.\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\n    }\n\n    /**\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\n     * @dev This will \"floor\" the product.\n     * @param a a FixedPoint.Signed.\n     * @param b an int256.\n     * @return the product of `a` and `b`.\n     */\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\n        return Signed(a.rawValue.mul(b));\n    }\n\n    /**\n     * @notice Multiplies two `Signed`s and \"ceil's\" the product, reverting on overflow.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return the product of `a` and `b`.\n     */\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\n        // Manual mod because SignedSafeMath doesn't support it.\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\n        if (mod != 0) {\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\n            return Signed(mulTowardsZero.add(valueToAdd));\n        } else {\n            return Signed(mulTowardsZero);\n        }\n    }\n\n    /**\n     * @notice Multiplies an `Signed` and an unscaled int256 and \"ceil's\" the product, reverting on overflow.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return the product of `a` and `b`.\n     */\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\n        return Signed(a.rawValue.mul(b));\n    }\n\n    /**\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\n     * @dev This will \"floor\" the quotient.\n     * @param a a FixedPoint numerator.\n     * @param b a FixedPoint denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\n        // There are two caveats with this computation:\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\n        // 10^41 is stored internally as an int256 10^59.\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\n    }\n\n    /**\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\n     * @dev This will \"floor\" the quotient.\n     * @param a a FixedPoint numerator.\n     * @param b an int256 denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\n        return Signed(a.rawValue.div(b));\n    }\n\n    /**\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\n     * @dev This will \"floor\" the quotient.\n     * @param a an int256 numerator.\n     * @param b a FixedPoint denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\n        return div(fromUnscaledInt(a), b);\n    }\n\n    /**\n     * @notice Divides one `Signed` by an `Signed` and \"ceil's\" the quotient, reverting on overflow or division by 0.\n     * @param a a FixedPoint numerator.\n     * @param b a FixedPoint denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\n        int256 divTowardsZero = aScaled.div(b.rawValue);\n        // Manual mod because SignedSafeMath doesn't support it.\n        int256 mod = aScaled % b.rawValue;\n        if (mod != 0) {\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\n            return Signed(divTowardsZero.add(valueToAdd));\n        } else {\n            return Signed(divTowardsZero);\n        }\n    }\n\n    /**\n     * @notice Divides one `Signed` by an unscaled int256 and \"ceil's\" the quotient, reverting on overflow or division by 0.\n     * @param a a FixedPoint numerator.\n     * @param b an int256 denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\n        // Because it is possible that a quotient gets truncated, we can't just call \"Signed(a.rawValue.div(b))\"\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\n        // This creates the possibility of overflow if b is very large.\n        return divAwayFromZero(a, fromUnscaledInt(b));\n    }\n\n    /**\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\n     * @dev This will \"floor\" the result.\n     * @param a a FixedPoint.Signed.\n     * @param b a uint256 (negative exponents are not allowed).\n     * @return output is `a` to the power of `b`.\n     */\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\n        output = fromUnscaledInt(1);\n        for (uint256 i = 0; i < b; i = i.add(1)) {\n            output = mul(output, a);\n        }\n    }\n}\n"
    },
    "contracts/UMA/oracle/interfaces/FinderInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @title Provides addresses of the live contracts implementing certain interfaces.\n * @dev Examples are the Oracle or Store interfaces.\n */\ninterface FinderInterface {\n    /**\n     * @notice Updates the address of the contract that implements `interfaceName`.\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\n     * @param implementationAddress address of the deployed contract that implements the interface.\n     */\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\n\n    /**\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\n     * @param interfaceName queried interface.\n     * @return implementationAddress address of the deployed contract that implements the interface.\n     */\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\n}\n"
    },
    "contracts/UMA/oracle/interfaces/OracleInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @title Financial contract facing Oracle interface.\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\n */\nabstract contract OracleInterface {\n    /**\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\n     * @dev Time must be in the past and the identifier must be supported.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param time unix timestamp for the price request.\n     */\n    function requestPrice(bytes32 identifier, uint256 time) public virtual;\n\n    /**\n     * @notice Whether the price for `identifier` and `time` is available.\n     * @dev Time must be in the past and the identifier must be supported.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param time unix timestamp for the price request.\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\n     */\n    function hasPrice(bytes32 identifier, uint256 time) public view virtual returns (bool);\n\n    /**\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\n     * @dev If the price is not available, the method reverts.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param time unix timestamp for the price request.\n     * @return int256 representing the resolved price for the given identifier and timestamp.\n     */\n    function getPrice(bytes32 identifier, uint256 time) public view virtual returns (int256);\n}\n"
    },
    "contracts/UMA/oracle/interfaces/OracleAncillaryInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @title Financial contract facing Oracle interface.\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\n */\nabstract contract OracleAncillaryInterface {\n    /**\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\n     * @dev Time must be in the past and the identifier must be supported.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\n     * @param time unix timestamp for the price request.\n     */\n\n    function requestPrice(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) public virtual;\n\n    /**\n     * @notice Whether the price for `identifier` and `time` is available.\n     * @dev Time must be in the past and the identifier must be supported.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param time unix timestamp for the price request.\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\n     */\n    function hasPrice(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) public view virtual returns (bool);\n\n    /**\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\n     * @dev If the price is not available, the method reverts.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param time unix timestamp for the price request.\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\n     * @return int256 representing the resolved price for the given identifier and timestamp.\n     */\n\n    function getPrice(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) public view virtual returns (int256);\n}\n"
    },
    "contracts/UMA/oracle/interfaces/OracleGovernanceInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./OracleInterface.sol\";\nimport \"./OracleAncillaryInterface.sol\";\n\n/**\n * @title Financial contract facing extending the Oracle interface with governance actions.\n * @dev Interface used by financial contracts to interact with the Oracle extending governance actions. Voters will use a different interface.\n */\nabstract contract OracleGovernanceInterface is OracleInterface, OracleAncillaryInterface {\n    /**\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\n     * @dev Time must be in the past and the identifier must be supported.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\n     * @param time unix timestamp for the price request.\n     */\n    function requestGovernanceAction(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) public virtual;\n}\n"
    },
    "contracts/UMA/oracle/interfaces/VotingV2Interface.sol": {
      "content": "// TODO: add staking/snapshot interfaces to this interface file.\n\n// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/FixedPoint.sol\";\nimport \"./VotingAncillaryInterface.sol\";\n\n/**\n * @title Interface that voters must use to Vote on price request resolutions.\n */\nabstract contract VotingV2Interface {\n    struct PendingRequest {\n        bytes32 identifier;\n        uint256 time;\n    }\n\n    // Captures the necessary data for making a commitment.\n    // Used as a parameter when making batch commitments.\n    // Not used as a data structure for storage.\n    struct Commitment {\n        bytes32 identifier;\n        uint256 time;\n        bytes32 hash;\n        bytes encryptedVote;\n    }\n\n    // Captures the necessary data for revealing a vote.\n    // Used as a parameter when making batch reveals.\n    // Not used as a data structure for storage.\n    struct Reveal {\n        bytes32 identifier;\n        uint256 time;\n        int256 price;\n        int256 salt;\n    }\n\n    /**\n     * @notice Commit a vote for a price request for `identifier` at `time`.\n     * @dev `identifier`, `time` must correspond to a price request that's currently in the commit phase.\n     * Commits can be changed.\n     * @dev Since transaction data is public, the salt will be revealed with the vote. While this is the system’s expected behavior,\n     * voters should never reuse salts. If someone else is able to guess the voted price and knows that a salt will be reused, then\n     * they can determine the vote pre-reveal.\n     * @param identifier uniquely identifies the committed vote. EG BTC/USD price pair.\n     * @param time unix timestamp of the price being voted on.\n     * @param hash keccak256 hash of the `price`, `salt`, voter `address`, `time`, current `roundId`, and `identifier`.\n     */\n    function commitVote(\n        bytes32 identifier,\n        uint256 time,\n        bytes32 hash\n    ) external virtual;\n\n    /**\n     * @notice Submit a batch of commits in a single transaction.\n     * @dev Using `encryptedVote` is optional. If included then commitment is stored on chain.\n     * Look at `project-root/common/Constants.js` for the tested maximum number of\n     * commitments that can fit in one transaction.\n     * @param commits array of structs that encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`.\n     */\n    function batchCommit(Commitment[] memory commits) public virtual;\n\n    /**\n     * @notice commits a vote and logs an event with a data blob, typically an encrypted version of the vote\n     * @dev An encrypted version of the vote is emitted in an event `EncryptedVote` to allow off-chain infrastructure to\n     * retrieve the commit. The contents of `encryptedVote` are never used on chain: it is purely for convenience.\n     * @param identifier unique price pair identifier. Eg: BTC/USD price pair.\n     * @param time unix timestamp of for the price request.\n     * @param hash keccak256 hash of the price you want to vote for and a `int256 salt`.\n     * @param encryptedVote offchain encrypted blob containing the voters amount, time and salt.\n     */\n    function commitAndEmitEncryptedVote(\n        bytes32 identifier,\n        uint256 time,\n        bytes32 hash,\n        bytes memory encryptedVote\n    ) public virtual;\n\n    /**\n     * @notice snapshot the current round's token balances and lock in the inflation rate and GAT.\n     * @dev This function can be called multiple times but each round will only every have one snapshot at the\n     * time of calling `_freezeRoundVariables`.\n     * @param signature  signature required to prove caller is an EOA to prevent flash loans from being included in the\n     * snapshot.\n     */\n    function snapshotCurrentRound(bytes calldata signature) external virtual;\n\n    /**\n     * @notice Reveal a previously committed vote for `identifier` at `time`.\n     * @dev The revealed `price`, `salt`, `address`, `time`, `roundId`, and `identifier`, must hash to the latest `hash`\n     * that `commitVote()` was called with. Only the committer can reveal their vote.\n     * @param identifier voted on in the commit phase. EG BTC/USD price pair.\n     * @param time specifies the unix timestamp of the price is being voted on.\n     * @param price voted on during the commit phase.\n     * @param salt value used to hide the commitment price during the commit phase.\n     */\n    function revealVote(\n        bytes32 identifier,\n        uint256 time,\n        int256 price,\n        int256 salt\n    ) public virtual;\n\n    /**\n     * @notice Reveal multiple votes in a single transaction.\n     * Look at `project-root/common/Constants.js` for the tested maximum number of reveals.\n     * that can fit in one transaction.\n     * @dev For more information on reveals, review the comment for `revealVote`.\n     * @param reveals array of the Reveal struct which contains an identifier, time, price and salt.\n     */\n    function batchReveal(Reveal[] memory reveals) public virtual;\n\n    /**\n     * @notice Gets the queries that are being voted on this round.\n     * @return pendingRequests `PendingRequest` array containing identifiers\n     * and timestamps for all pending requests.\n     */\n    function getPendingRequests()\n        external\n        view\n        virtual\n        returns (VotingAncillaryInterface.PendingRequestAncillary[] memory);\n\n    /**\n     * @notice Returns the current voting phase, as a function of the current time.\n     * @return Phase to indicate the current phase. Either { Commit, Reveal, NUM_PHASES_PLACEHOLDER }.\n     */\n    function getVotePhase() external view virtual returns (VotingAncillaryInterface.Phase);\n\n    /**\n     * @notice Returns the current round ID, as a function of the current time.\n     * @return uint256 representing the unique round ID.\n     */\n    function getCurrentRoundId() external view virtual returns (uint256);\n\n    // Voting Owner functions.\n\n    /**\n     * @notice Disables this Voting contract in favor of the migrated one.\n     * @dev Can only be called by the contract owner.\n     * @param newVotingAddress the newly migrated contract address.\n     */\n    function setMigrated(address newVotingAddress) external virtual;\n\n    /**\n     * @notice Resets the inflation rate. Note: this change only applies to rounds that have not yet begun.\n     * @dev This method is public because calldata structs are not currently supported by solidity.\n     * @param newInflationRate sets the next round's inflation rate.\n     */\n    function setInflationRate(FixedPoint.Unsigned memory newInflationRate) public virtual;\n\n    /**\n     * @notice Resets the Gat percentage. Note: this change only applies to rounds that have not yet begun.\n     * @dev This method is public because calldata structs are not currently supported by solidity.\n     * @param newGatPercentage sets the next round's Gat percentage.\n     */\n    function setGatPercentage(FixedPoint.Unsigned memory newGatPercentage) public virtual;\n\n    /**\n     * @notice Resets the rewards expiration timeout.\n     * @dev This change only applies to rounds that have not yet begun.\n     * @param NewRewardsExpirationTimeout how long a caller can wait before choosing to withdraw their rewards.\n     */\n    function setRewardsExpirationTimeout(uint256 NewRewardsExpirationTimeout) public virtual;\n\n    /**\n     * @notice Changes the slashing library used by this contract.\n     * @param _newSlashingLibrary new slashing library address.\n     */\n    function setSlashingLibrary(address _newSlashingLibrary) public virtual;\n}\n"
    },
    "contracts/UMA/oracle/interfaces/VotingAncillaryInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/FixedPoint.sol\";\n\n/**\n * @title Interface that voters must use to Vote on price request resolutions.\n */\nabstract contract VotingAncillaryInterface {\n    struct PendingRequestAncillary {\n        bytes32 identifier;\n        uint256 time;\n        bytes ancillaryData;\n    }\n\n    // Captures the necessary data for making a commitment.\n    // Used as a parameter when making batch commitments.\n    // Not used as a data structure for storage.\n    struct CommitmentAncillary {\n        bytes32 identifier;\n        uint256 time;\n        bytes ancillaryData;\n        bytes32 hash;\n        bytes encryptedVote;\n    }\n\n    // Captures the necessary data for revealing a vote.\n    // Used as a parameter when making batch reveals.\n    // Not used as a data structure for storage.\n    struct RevealAncillary {\n        bytes32 identifier;\n        uint256 time;\n        int256 price;\n        bytes ancillaryData;\n        int256 salt;\n    }\n\n    // Note: the phases must be in order. Meaning the first enum value must be the first phase, etc.\n    // `NUM_PHASES_PLACEHOLDER` is to get the number of phases. It isn't an actual phase, and it should always be last.\n    enum Phase { Commit, Reveal, NUM_PHASES_PLACEHOLDER }\n\n    /**\n     * @notice Commit a vote for a price request for `identifier` at `time`.\n     * @dev `identifier`, `time` must correspond to a price request that's currently in the commit phase.\n     * Commits can be changed.\n     * @dev Since transaction data is public, the salt will be revealed with the vote. While this is the system’s expected behavior,\n     * voters should never reuse salts. If someone else is able to guess the voted price and knows that a salt will be reused, then\n     * they can determine the vote pre-reveal.\n     * @param identifier uniquely identifies the committed vote. EG BTC/USD price pair.\n     * @param time unix timestamp of the price being voted on.\n     * @param hash keccak256 hash of the `price`, `salt`, voter `address`, `time`, current `roundId`, and `identifier`.\n     */\n    function commitVote(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData,\n        bytes32 hash\n    ) public virtual;\n\n    /**\n     * @notice Submit a batch of commits in a single transaction.\n     * @dev Using `encryptedVote` is optional. If included then commitment is stored on chain.\n     * Look at `project-root/common/Constants.js` for the tested maximum number of\n     * commitments that can fit in one transaction.\n     * @param commits array of structs that encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`.\n     */\n    function batchCommit(CommitmentAncillary[] memory commits) public virtual;\n\n    /**\n     * @notice commits a vote and logs an event with a data blob, typically an encrypted version of the vote\n     * @dev An encrypted version of the vote is emitted in an event `EncryptedVote` to allow off-chain infrastructure to\n     * retrieve the commit. The contents of `encryptedVote` are never used on chain: it is purely for convenience.\n     * @param identifier unique price pair identifier. Eg: BTC/USD price pair.\n     * @param time unix timestamp of for the price request.\n     * @param hash keccak256 hash of the price you want to vote for and a `int256 salt`.\n     * @param encryptedVote offchain encrypted blob containing the voters amount, time and salt.\n     */\n    function commitAndEmitEncryptedVote(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData,\n        bytes32 hash,\n        bytes memory encryptedVote\n    ) public virtual;\n\n    /**\n     * @notice snapshot the current round's token balances and lock in the inflation rate and GAT.\n     * @dev This function can be called multiple times but each round will only every have one snapshot at the\n     * time of calling `_freezeRoundVariables`.\n     * @param signature  signature required to prove caller is an EOA to prevent flash loans from being included in the\n     * snapshot.\n     */\n    function snapshotCurrentRound(bytes calldata signature) external virtual;\n\n    /**\n     * @notice Reveal a previously committed vote for `identifier` at `time`.\n     * @dev The revealed `price`, `salt`, `address`, `time`, `roundId`, and `identifier`, must hash to the latest `hash`\n     * that `commitVote()` was called with. Only the committer can reveal their vote.\n     * @param identifier voted on in the commit phase. EG BTC/USD price pair.\n     * @param time specifies the unix timestamp of the price is being voted on.\n     * @param price voted on during the commit phase.\n     * @param salt value used to hide the commitment price during the commit phase.\n     */\n    function revealVote(\n        bytes32 identifier,\n        uint256 time,\n        int256 price,\n        bytes memory ancillaryData,\n        int256 salt\n    ) public virtual;\n\n    /**\n     * @notice Reveal multiple votes in a single transaction.\n     * Look at `project-root/common/Constants.js` for the tested maximum number of reveals.\n     * that can fit in one transaction.\n     * @dev For more information on reveals, review the comment for `revealVote`.\n     * @param reveals array of the Reveal struct which contains an identifier, time, price and salt.\n     */\n    function batchReveal(RevealAncillary[] memory reveals) public virtual;\n\n    /**\n     * @notice Gets the queries that are being voted on this round.\n     * @return pendingRequests `PendingRequest` array containing identifiers\n     * and timestamps for all pending requests.\n     */\n    function getPendingRequests() external view virtual returns (PendingRequestAncillary[] memory);\n\n    /**\n     * @notice Returns the current voting phase, as a function of the current time.\n     * @return Phase to indicate the current phase. Either { Commit, Reveal, NUM_PHASES_PLACEHOLDER }.\n     */\n    function getVotePhase() external view virtual returns (Phase);\n\n    /**\n     * @notice Returns the current round ID, as a function of the current time.\n     * @return uint256 representing the unique round ID.\n     */\n    function getCurrentRoundId() external view virtual returns (uint256);\n\n    /**\n     * @notice Retrieves rewards owed for a set of resolved price requests.\n     * @dev Can only retrieve rewards if calling for a valid round and if the\n     * call is done within the timeout threshold (not expired).\n     * @param voterAddress voter for which rewards will be retrieved. Does not have to be the caller.\n     * @param roundId the round from which voting rewards will be retrieved from.\n     * @param toRetrieve array of PendingRequests which rewards are retrieved from.\n     * @return total amount of rewards returned to the voter.\n     */\n    function retrieveRewards(\n        address voterAddress,\n        uint256 roundId,\n        PendingRequestAncillary[] memory toRetrieve\n    ) public virtual returns (FixedPoint.Unsigned memory);\n\n    // Voting Owner functions.\n\n    /**\n     * @notice Disables this Voting contract in favor of the migrated one.\n     * @dev Can only be called by the contract owner.\n     * @param newVotingAddress the newly migrated contract address.\n     */\n    function setMigrated(address newVotingAddress) external virtual;\n\n    /**\n     * @notice Resets the inflation rate. Note: this change only applies to rounds that have not yet begun.\n     * @dev This method is public because calldata structs are not currently supported by solidity.\n     * @param newInflationRate sets the next round's inflation rate.\n     */\n    function setInflationRate(FixedPoint.Unsigned memory newInflationRate) public virtual;\n\n    /**\n     * @notice Resets the Gat percentage. Note: this change only applies to rounds that have not yet begun.\n     * @dev This method is public because calldata structs are not currently supported by solidity.\n     * @param newGatPercentage sets the next round's Gat percentage.\n     */\n    function setGatPercentage(FixedPoint.Unsigned memory newGatPercentage) public virtual;\n\n    /**\n     * @notice Resets the rewards expiration timeout.\n     * @dev This change only applies to rounds that have not yet begun.\n     * @param NewRewardsExpirationTimeout how long a caller can wait before choosing to withdraw their rewards.\n     */\n    function setRewardsExpirationTimeout(uint256 NewRewardsExpirationTimeout) public virtual;\n}\n"
    },
    "contracts/UMA/oracle/interfaces/IdentifierWhitelistInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @title Interface for whitelists of supported identifiers that the oracle can provide prices for.\n */\ninterface IdentifierWhitelistInterface {\n    /**\n     * @notice Adds the provided identifier as a supported identifier.\n     * @dev Price requests using this identifier will succeed after this call.\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\n     */\n    function addSupportedIdentifier(bytes32 identifier) external;\n\n    /**\n     * @notice Removes the identifier from the whitelist.\n     * @dev Price requests using this identifier will no longer succeed after this call.\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\n     */\n    function removeSupportedIdentifier(bytes32 identifier) external;\n\n    /**\n     * @notice Checks whether an identifier is on the whitelist.\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\n     * @return bool if the identifier is supported (or not).\n     */\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool);\n}\n"
    },
    "contracts/UMA/oracle/implementation/Registry.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/MultiRole.sol\";\nimport \"../interfaces/RegistryInterface.sol\";\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/**\n * @title Registry for financial contracts and approved financial contract creators.\n * @dev Maintains a whitelist of financial contract creators that are allowed\n * to register new financial contracts and stores party members of a financial contract.\n */\ncontract Registry is RegistryInterface, MultiRole {\n    using SafeMath for uint256;\n\n    /****************************************\n     *    INTERNAL VARIABLES AND STORAGE    *\n     ****************************************/\n\n    enum Roles {\n        Owner, // The owner manages the set of ContractCreators.\n        ContractCreator // Can register financial contracts.\n    }\n\n    // This enum is required because a `WasValid` state is required\n    // to ensure that financial contracts cannot be re-registered.\n    enum Validity { Invalid, Valid }\n\n    // Local information about a contract.\n    struct FinancialContract {\n        Validity valid;\n        uint128 index;\n    }\n\n    struct Party {\n        address[] contracts; // Each financial contract address is stored in this array.\n        // The address of each financial contract is mapped to its index for constant time look up and deletion.\n        mapping(address => uint256) contractIndex;\n    }\n\n    // Array of all contracts that are approved to use the UMA Oracle.\n    address[] public registeredContracts;\n\n    // Map of financial contract contracts to the associated FinancialContract struct.\n    mapping(address => FinancialContract) public contractMap;\n\n    // Map each party member to their their associated Party struct.\n    mapping(address => Party) private partyMap;\n\n    /****************************************\n     *                EVENTS                *\n     ****************************************/\n\n    event NewContractRegistered(address indexed contractAddress, address indexed creator, address[] parties);\n    event PartyAdded(address indexed contractAddress, address indexed party);\n    event PartyRemoved(address indexed contractAddress, address indexed party);\n\n    /**\n     * @notice Construct the Registry contract.\n     */\n    constructor() {\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\n        // Start with no contract creators registered.\n        _createSharedRole(uint256(Roles.ContractCreator), uint256(Roles.Owner), new address[](0));\n    }\n\n    /****************************************\n     *        REGISTRATION FUNCTIONS        *\n     ****************************************/\n\n    /**\n     * @notice Registers a new financial contract.\n     * @dev Only authorized contract creators can call this method.\n     * @param parties array of addresses who become parties in the contract.\n     * @param contractAddress address of the contract against which the parties are registered.\n     */\n    function registerContract(address[] calldata parties, address contractAddress)\n        external\n        override\n        onlyRoleHolder(uint256(Roles.ContractCreator))\n    {\n        FinancialContract storage financialContract = contractMap[contractAddress];\n        require(contractMap[contractAddress].valid == Validity.Invalid, \"Can only register once\");\n\n        // Store contract address as a registered contract.\n        registeredContracts.push(contractAddress);\n\n        // No length check necessary because we should never hit (2^127 - 1) contracts.\n        financialContract.index = uint128(registeredContracts.length.sub(1));\n\n        // For all parties in the array add them to the contract's parties.\n        financialContract.valid = Validity.Valid;\n        for (uint256 i = 0; i < parties.length; i = i.add(1)) {\n            _addPartyToContract(parties[i], contractAddress);\n        }\n\n        emit NewContractRegistered(contractAddress, msg.sender, parties);\n    }\n\n    /**\n     * @notice Adds a party member to the calling contract.\n     * @dev msg.sender will be used to determine the contract that this party is added to.\n     * @param party new party for the calling contract.\n     */\n    function addPartyToContract(address party) external override {\n        address contractAddress = msg.sender;\n        require(contractMap[contractAddress].valid == Validity.Valid, \"Can only add to valid contract\");\n\n        _addPartyToContract(party, contractAddress);\n    }\n\n    /**\n     * @notice Removes a party member from the calling contract.\n     * @dev msg.sender will be used to determine the contract that this party is removed from.\n     * @param partyAddress address to be removed from the calling contract.\n     */\n    function removePartyFromContract(address partyAddress) external override {\n        address contractAddress = msg.sender;\n        Party storage party = partyMap[partyAddress];\n        uint256 numberOfContracts = party.contracts.length;\n\n        require(numberOfContracts != 0, \"Party has no contracts\");\n        require(contractMap[contractAddress].valid == Validity.Valid, \"Remove only from valid contract\");\n        require(isPartyMemberOfContract(partyAddress, contractAddress), \"Can only remove existing party\");\n\n        // Index of the current location of the contract to remove.\n        uint256 deleteIndex = party.contractIndex[contractAddress];\n\n        // Store the last contract's address to update the lookup map.\n        address lastContractAddress = party.contracts[numberOfContracts - 1];\n\n        // Swap the contract to be removed with the last contract.\n        party.contracts[deleteIndex] = lastContractAddress;\n\n        // Update the lookup index with the new location.\n        party.contractIndex[lastContractAddress] = deleteIndex;\n\n        // Pop the last contract from the array and update the lookup map.\n        party.contracts.pop();\n        delete party.contractIndex[contractAddress];\n\n        emit PartyRemoved(contractAddress, partyAddress);\n    }\n\n    /****************************************\n     *         REGISTRY STATE GETTERS       *\n     ****************************************/\n\n    /**\n     * @notice Returns whether the contract has been registered with the registry.\n     * @dev If it is registered, it is an authorized participant in the UMA system.\n     * @param contractAddress address of the financial contract.\n     * @return bool indicates whether the contract is registered.\n     */\n    function isContractRegistered(address contractAddress) external view override returns (bool) {\n        return contractMap[contractAddress].valid == Validity.Valid;\n    }\n\n    /**\n     * @notice Returns a list of all contracts that are associated with a particular party.\n     * @param party address of the party.\n     * @return an array of the contracts the party is registered to.\n     */\n    function getRegisteredContracts(address party) external view override returns (address[] memory) {\n        return partyMap[party].contracts;\n    }\n\n    /**\n     * @notice Returns all registered contracts.\n     * @return all registered contract addresses within the system.\n     */\n    function getAllRegisteredContracts() external view override returns (address[] memory) {\n        return registeredContracts;\n    }\n\n    /**\n     * @notice checks if an address is a party of a contract.\n     * @param party party to check.\n     * @param contractAddress address to check against the party.\n     * @return bool indicating if the address is a party of the contract.\n     */\n    function isPartyMemberOfContract(address party, address contractAddress) public view override returns (bool) {\n        uint256 index = partyMap[party].contractIndex[contractAddress];\n        return partyMap[party].contracts.length > index && partyMap[party].contracts[index] == contractAddress;\n    }\n\n    /****************************************\n     *           INTERNAL FUNCTIONS         *\n     ****************************************/\n\n    function _addPartyToContract(address party, address contractAddress) internal {\n        require(!isPartyMemberOfContract(party, contractAddress), \"Can only register a party once\");\n        uint256 contractIndex = partyMap[party].contracts.length;\n        partyMap[party].contracts.push(contractAddress);\n        partyMap[party].contractIndex[contractAddress] = contractIndex;\n\n        emit PartyAdded(contractAddress, party);\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/ResultComputation.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/FixedPoint.sol\";\n\n/**\n * @title Computes vote results.\n * @dev The result is the mode of the added votes. Otherwise, the vote is unresolved.\n */\nlibrary ResultComputation {\n    using FixedPoint for FixedPoint.Unsigned;\n\n    /****************************************\n     *   INTERNAL LIBRARY DATA STRUCTURE    *\n     ****************************************/\n\n    struct Data {\n        // Maps price to number of tokens that voted for that price.\n        mapping(int256 => FixedPoint.Unsigned) voteFrequency;\n        // The total votes that have been added.\n        FixedPoint.Unsigned totalVotes;\n        // The price that is the current mode, i.e., the price with the highest frequency in `voteFrequency`.\n        int256 currentMode;\n    }\n\n    /****************************************\n     *            VOTING FUNCTIONS          *\n     ****************************************/\n\n    /**\n     * @notice Adds a new vote to be used when computing the result.\n     * @param data contains information to which the vote is applied.\n     * @param votePrice value specified in the vote for the given `numberTokens`.\n     * @param numberTokens number of tokens that voted on the `votePrice`.\n     */\n    function addVote(\n        Data storage data,\n        int256 votePrice,\n        FixedPoint.Unsigned memory numberTokens\n    ) internal {\n        data.totalVotes = data.totalVotes.add(numberTokens);\n        data.voteFrequency[votePrice] = data.voteFrequency[votePrice].add(numberTokens);\n        if (\n            votePrice != data.currentMode &&\n            data.voteFrequency[votePrice].isGreaterThan(data.voteFrequency[data.currentMode])\n        ) data.currentMode = votePrice;\n    }\n\n    /****************************************\n     *        VOTING STATE GETTERS          *\n     ****************************************/\n\n    /**\n     * @notice Returns whether the result is resolved, and if so, what value it resolved to.\n     * @dev `price` should be ignored if `isResolved` is false.\n     * @param data contains information against which the `minVoteThreshold` is applied.\n     * @param minVoteThreshold min (exclusive) number of tokens that must have voted for the result to be valid. Can be\n     * used to enforce a minimum voter participation rate, regardless of how the votes are distributed.\n     * @return isResolved indicates if the price has been resolved correctly.\n     * @return price the price that the dvm resolved to.\n     */\n    function getResolvedPrice(Data storage data, FixedPoint.Unsigned memory minVoteThreshold)\n        internal\n        view\n        returns (bool isResolved, int256 price)\n    {\n        FixedPoint.Unsigned memory modeThreshold = FixedPoint.fromUnscaledUint(50).div(100);\n\n        if (\n            data.totalVotes.isGreaterThan(minVoteThreshold) &&\n            data.voteFrequency[data.currentMode].div(data.totalVotes).isGreaterThan(modeThreshold)\n        ) {\n            // `modeThreshold` and `minVoteThreshold` are exceeded, so the current mode is the resolved price.\n            isResolved = true;\n            price = data.currentMode;\n        } else isResolved = false;\n    }\n\n    /**\n     * @notice Checks whether a `voteHash` is considered correct.\n     * @dev Should only be called after a vote is resolved, i.e., via `getResolvedPrice`.\n     * @param data contains information against which the `voteHash` is checked.\n     * @param voteHash committed hash submitted by the voter.\n     * @return bool true if the vote was correct.\n     */\n    function wasVoteCorrect(Data storage data, bytes32 voteHash) internal view returns (bool) {\n        return voteHash == keccak256(abi.encode(data.currentMode));\n    }\n\n    /**\n     * @notice Gets the total number of tokens whose votes are considered correct.\n     * @dev Should only be called after a vote is resolved, i.e., via `getResolvedPrice`.\n     * @param data contains all votes against which the correctly voted tokens are counted.\n     * @return FixedPoint.Unsigned which indicates the frequency of the correctly voted tokens.\n     */\n    function getTotalCorrectlyVotedTokens(Data storage data) internal view returns (FixedPoint.Unsigned memory) {\n        return data.voteFrequency[data.currentMode];\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/VoteTimingV2.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"../interfaces/VotingInterface.sol\";\n\nimport \"hardhat/console.sol\";\n\n/**\n * @title Library to compute rounds and phases for an equal length commit-reveal voting cycle.\n */\nlibrary VoteTimingV2 {\n    using SafeMath for uint256;\n\n    struct Data {\n        uint256 phaseLength;\n        uint256 minRollToNextRoundLength;\n    }\n\n    /**\n     * @notice Initializes the data object. Sets the phase length based on the input.\n     */\n    function init(\n        Data storage data,\n        uint256 phaseLength,\n        uint256 minRollToNextRoundLength\n    ) internal {\n        // This should have a require message but this results in an internal Solidity error.\n        require(phaseLength > 0);\n        require(minRollToNextRoundLength <= phaseLength);\n        data.phaseLength = phaseLength;\n        data.minRollToNextRoundLength = minRollToNextRoundLength;\n    }\n\n    /**\n     * @notice Computes the roundID based off the current time as floor(timestamp/roundLength).\n     * @dev The round ID depends on the global timestamp but not on the lifetime of the system.\n     * The consequence is that the initial round ID starts at an arbitrary number (that increments, as expected, for subsequent rounds) instead of zero or one.\n     * @param data input data object.\n     * @param currentTime input unix timestamp used to compute the current roundId.\n     * @return roundId defined as a function of the currentTime and `phaseLength` from `data`.\n     */\n    function computeCurrentRoundId(Data storage data, uint256 currentTime) internal view returns (uint256) {\n        uint256 roundLength = data.phaseLength.mul(uint256(VotingAncillaryInterface.Phase.NUM_PHASES_PLACEHOLDER));\n        return currentTime.div(roundLength);\n    }\n\n    /**\n     * @notice compute the round end time as a function of the round Id.\n     * @param data input data object.\n     * @param roundId uniquely identifies the current round.\n     * @return timestamp unix time of when the current round will end.\n     */\n    function computeRoundEndTime(Data storage data, uint256 roundId) internal view returns (uint256) {\n        uint256 roundLength = data.phaseLength.mul(uint256(VotingAncillaryInterface.Phase.NUM_PHASES_PLACEHOLDER));\n        return roundLength.mul(roundId.add(1));\n    }\n\n    /**\n     * @notice Computes the current phase based only on the current time.\n     * @param data input data object.\n     * @param currentTime input unix timestamp used to compute the current roundId.\n     * @return current voting phase based on current time and vote phases configuration.\n     */\n    function computeCurrentPhase(Data storage data, uint256 currentTime)\n        internal\n        view\n        returns (VotingAncillaryInterface.Phase)\n    {\n        // This employs some hacky casting. We could make this an if-statement if we're worried about type safety.\n        return\n            VotingAncillaryInterface.Phase(\n                currentTime.div(data.phaseLength).mod(uint256(VotingAncillaryInterface.Phase.NUM_PHASES_PLACEHOLDER))\n            );\n    }\n\n    function computeRoundToVoteOnPriceRequest(Data storage data, uint256 currentTime) internal view returns (uint256) {\n        uint256 currentRoundId = computeCurrentRoundId(data, currentTime);\n        uint256 roundEndTime = computeRoundEndTime(data, currentRoundId);\n        if (currentTime >= roundEndTime - data.minRollToNextRoundLength) return currentRoundId.add(2);\n        else return currentRoundId.add(1);\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/Staker.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interfaces/StakerInterface.sol\";\n\nimport \"./VotingToken.sol\";\nimport \"../../common/implementation/Testable.sol\";\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"hardhat/console.sol\";\n\ncontract Staker is StakerInterface, Ownable, Testable {\n    /****************************************\n     *           STAKING TRACKERS           *\n     ****************************************/\n\n    uint256 public emissionRate;\n    uint256 public cumulativeStaked;\n    uint256 public rewardPerTokenStored;\n    uint256 public lastUpdateTime;\n\n    uint256 unstakeCoolDown;\n\n    struct VoterStake {\n        uint256 cumulativeStaked;\n        uint256 rewardsPaidPerToken;\n        uint256 outstandingRewards;\n        uint256 unstakeTime;\n        uint256 requestUnstake;\n        uint256 lastRequestIndexConsidered;\n    }\n\n    mapping(address => VoterStake) public voterStakes;\n\n    // Reference to the voting token.\n    VotingToken public override votingToken;\n\n    constructor(\n        uint256 _emissionRate,\n        uint256 _unstakeCoolDown,\n        address _votingToken,\n        address _timerAddress\n    ) Testable(_timerAddress) {\n        emissionRate = _emissionRate;\n        unstakeCoolDown = _unstakeCoolDown;\n        votingToken = VotingToken(_votingToken);\n    }\n\n    // Pulls tokens from users wallet and stakes them.\n    function stake(uint256 amount) public override {\n        _updateTrackers(msg.sender);\n        voterStakes[msg.sender].cumulativeStaked += amount;\n        cumulativeStaked += amount;\n\n        votingToken.transferFrom(msg.sender, address(this), amount);\n    }\n\n    function requestUnstake(uint256 amount) public override {\n        _updateTrackers(msg.sender);\n        // Staker signals that they want to unstake. After signalling, their total voting balance is decreased by the\n        // signaled amount. This amount is not vulnerable to being slashed but also does not accumulate rewards.\n\n        require(voterStakes[msg.sender].cumulativeStaked >= amount, \"Bad request amount\");\n\n        voterStakes[msg.sender].requestUnstake = amount;\n        voterStakes[msg.sender].unstakeTime = getCurrentTime() + unstakeCoolDown;\n    }\n\n    // Note there is no way to cancel your unstake; you must wait until after unstakeTime and re-stake.\n\n    // If: a staker requested an unstake and time > unstakeTime then send funds to staker. Note that this method assumes\n    // that the `updateTrackers()\n    function executeUnstake() public override {\n        _updateTrackers(msg.sender);\n        VoterStake storage voterStake = voterStakes[msg.sender];\n        require(voterStake.unstakeTime != 0 && getCurrentTime() >= voterStake.unstakeTime, \"Unstake time not passed\");\n        uint256 tokensToSend = voterStake.requestUnstake;\n        if (tokensToSend > voterStake.cumulativeStaked) tokensToSend = voterStake.cumulativeStaked;\n\n        if (tokensToSend > 0) {\n            voterStake.cumulativeStaked -= tokensToSend;\n            cumulativeStaked -= voterStake.requestUnstake;\n            voterStake.requestUnstake = 0;\n            voterStake.unstakeTime = 0;\n            votingToken.transfer(msg.sender, tokensToSend);\n        }\n    }\n\n    // Send accumulated rewards to the voter. If the voter has gained rewards from others slashing then this is included\n    // here. If the total slashing is larger than the outstanding rewards then this method does nothing.\n    function withdrawRewards() public override returns (uint256) {\n        _updateTrackers(msg.sender);\n        VoterStake storage voterStake = voterStakes[msg.sender];\n\n        uint256 tokensToMint = voterStake.outstandingRewards;\n        if (tokensToMint > 0) {\n            voterStake.outstandingRewards = 0;\n            require(votingToken.mint(msg.sender, tokensToMint), \"Voting token issuance failed\");\n        }\n        return (tokensToMint);\n    }\n\n    function exit() public {\n        executeUnstake();\n        withdrawRewards();\n    }\n\n    function _updateTrackers(address voterAddress) internal virtual {\n        _updateReward(voterAddress);\n    }\n\n    // Calculate the reward per token based on last time the reward was updated.\n    function _updateReward(address voterAddress) internal {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = getCurrentTime();\n        if (voterAddress != address(0)) {\n            VoterStake storage voterStake = voterStakes[voterAddress];\n            voterStake.outstandingRewards = outstandingRewards(voterAddress);\n            voterStake.rewardsPaidPerToken = rewardPerTokenStored;\n        }\n    }\n\n    function outstandingRewards(address voterAddress) public view returns (uint256) {\n        VoterStake storage voterStake = voterStakes[voterAddress];\n\n        return\n            ((voterStake.cumulativeStaked * (rewardPerToken() - voterStake.rewardsPaidPerToken)) / 1e18) +\n            voterStake.outstandingRewards;\n    }\n\n    function rewardPerToken() public view returns (uint256) {\n        if (cumulativeStaked == 0) return rewardPerTokenStored;\n        return rewardPerTokenStored + ((getCurrentTime() - lastUpdateTime) * emissionRate * 1e18) / cumulativeStaked;\n    }\n\n    // Owner methods\n    function setEmissionRate(uint256 _emissionRate) public onlyOwner {\n        _updateReward(address(0));\n        emissionRate = _emissionRate;\n    }\n\n    function setUnstakeCoolDown(uint256 _unstakeCoolDown) public onlyOwner {\n        unstakeCoolDown = _unstakeCoolDown;\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/Constants.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\n */\nlibrary OracleInterfaces {\n    bytes32 public constant Oracle = \"Oracle\";\n    bytes32 public constant IdentifierWhitelist = \"IdentifierWhitelist\";\n    bytes32 public constant Store = \"Store\";\n    bytes32 public constant FinancialContractsAdmin = \"FinancialContractsAdmin\";\n    bytes32 public constant Registry = \"Registry\";\n    bytes32 public constant CollateralWhitelist = \"CollateralWhitelist\";\n    bytes32 public constant OptimisticOracle = \"OptimisticOracle\";\n    bytes32 public constant Bridge = \"Bridge\";\n    bytes32 public constant GenericHandler = \"GenericHandler\";\n    bytes32 public constant SkinnyOptimisticOracle = \"SkinnyOptimisticOracle\";\n    bytes32 public constant ChildMessenger = \"ChildMessenger\";\n    bytes32 public constant OracleHub = \"OracleHub\";\n    bytes32 public constant OracleSpoke = \"OracleSpoke\";\n}\n\n/**\n * @title Commonly re-used values for contracts associated with the OptimisticOracle.\n */\nlibrary OptimisticOracleConstraints {\n    // Any price request submitted to the OptimisticOracle must contain ancillary data no larger than this value.\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` constant value otherwise it is possible\n    // that a price can be requested to the OptimisticOracle successfully, but cannot be resolved by the DVM which\n    // refuses to accept a price request made with ancillary data length over a certain size.\n    uint256 public constant ancillaryBytesLimit = 8192;\n}\n"
    },
    "contracts/UMA/oracle/implementation/SlashingLibrary.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\ncontract SlashingLibrary {\n    /**\n     * @notice Calculates the wrong vote slash per token.\n     * @param totalStaked The total amount of tokens staked.\n     * @param totalVotes The total amount of votes.\n     * @param totalCorrectVotes The total amount of correct votes.\n     * @return uint256 The amount of tokens to slash.\n     */\n    function calcWrongVoteSlashPerToken(\n        uint256 totalStaked,\n        uint256 totalVotes,\n        uint256 totalCorrectVotes\n    ) public pure returns (uint256) {\n        // This number is equal to the slash amount needed to cancel an APY of 20%\n        // if 10 votes are cast each month for a year. 0.2/(10*12)= ~0.0016\n        return 1600000000000000;\n    }\n\n    /**\n     * @notice Calculates the wrong vote slash per token for governance requests.\n     * @param totalStaked The total amount of tokens staked.\n     * @param totalVotes The total amount of votes.\n     * @param totalCorrectVotes The total amount of correct votes.\n     * @return uint256 The amount of tokens to slash.\n     */\n    function calcWrongVoteSlashPerTokenGovernance(\n        uint256 totalStaked,\n        uint256 totalVotes,\n        uint256 totalCorrectVotes\n    ) public pure returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @notice Calculates the no vote slash per token.\n     * @param totalStaked The total amount of tokens staked.\n     * @param totalVotes The total amount of votes.\n     * @param totalCorrectVotes The total amount of correct votes.\n     * @return uint256 The amount of tokens to slash.\n     */\n    function calcNoVoteSlashPerToken(\n        uint256 totalStaked,\n        uint256 totalVotes,\n        uint256 totalCorrectVotes\n    ) public pure returns (uint256) {\n        // This number is equal to the slash amount needed to cancel an APY of 20%\n        // if 10 votes are cast each month for a year. 0.2/(10*12)= ~0.0016\n        return 1600000000000000;\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/SpamGuardIdentifierLib.sol": {
      "content": "import \"./AdminIdentifierLib.sol\";\n\nlibrary SpamGuardIdentifierLib {\n    // Returns a UTF-8 identifier representing a particular spam deletion proposal.\n    // The identifier is of the form \"SpamDeletionProposal n\", where n is the proposal id provided.\n    function _constructIdentifier(uint256 id) internal pure returns (bytes32) {\n        bytes32 bytesId = AdminIdentifierLib._uintToUtf8(id);\n        return AdminIdentifierLib._addPrefix(bytesId, \"SpamDeletionProposal \", 21);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedSafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SignedSafeMath {\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        return a + b;\n    }\n}\n"
    },
    "contracts/UMA/common/implementation/MultiRole.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nlibrary Exclusive {\n    struct RoleMembership {\n        address member;\n    }\n\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\n        return roleMembership.member == memberToCheck;\n    }\n\n    function resetMember(RoleMembership storage roleMembership, address newMember) internal {\n        require(newMember != address(0x0), \"Cannot set an exclusive role to 0x0\");\n        roleMembership.member = newMember;\n    }\n\n    function getMember(RoleMembership storage roleMembership) internal view returns (address) {\n        return roleMembership.member;\n    }\n\n    function init(RoleMembership storage roleMembership, address initialMember) internal {\n        resetMember(roleMembership, initialMember);\n    }\n}\n\nlibrary Shared {\n    struct RoleMembership {\n        mapping(address => bool) members;\n    }\n\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\n        return roleMembership.members[memberToCheck];\n    }\n\n    function addMember(RoleMembership storage roleMembership, address memberToAdd) internal {\n        require(memberToAdd != address(0x0), \"Cannot add 0x0 to a shared role\");\n        roleMembership.members[memberToAdd] = true;\n    }\n\n    function removeMember(RoleMembership storage roleMembership, address memberToRemove) internal {\n        roleMembership.members[memberToRemove] = false;\n    }\n\n    function init(RoleMembership storage roleMembership, address[] memory initialMembers) internal {\n        for (uint256 i = 0; i < initialMembers.length; i++) {\n            addMember(roleMembership, initialMembers[i]);\n        }\n    }\n}\n\n/**\n * @title Base class to manage permissions for the derived class.\n */\nabstract contract MultiRole {\n    using Exclusive for Exclusive.RoleMembership;\n    using Shared for Shared.RoleMembership;\n\n    enum RoleType { Invalid, Exclusive, Shared }\n\n    struct Role {\n        uint256 managingRole;\n        RoleType roleType;\n        Exclusive.RoleMembership exclusiveRoleMembership;\n        Shared.RoleMembership sharedRoleMembership;\n    }\n\n    mapping(uint256 => Role) private roles;\n\n    event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\n    event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\n    event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager);\n\n    /**\n     * @notice Reverts unless the caller is a member of the specified roleId.\n     */\n    modifier onlyRoleHolder(uint256 roleId) {\n        require(holdsRole(roleId, msg.sender), \"Sender does not hold required role\");\n        _;\n    }\n\n    /**\n     * @notice Reverts unless the caller is a member of the manager role for the specified roleId.\n     */\n    modifier onlyRoleManager(uint256 roleId) {\n        require(holdsRole(roles[roleId].managingRole, msg.sender), \"Can only be called by a role manager\");\n        _;\n    }\n\n    /**\n     * @notice Reverts unless the roleId represents an initialized, exclusive roleId.\n     */\n    modifier onlyExclusive(uint256 roleId) {\n        require(roles[roleId].roleType == RoleType.Exclusive, \"Must be called on an initialized Exclusive role\");\n        _;\n    }\n\n    /**\n     * @notice Reverts unless the roleId represents an initialized, shared roleId.\n     */\n    modifier onlyShared(uint256 roleId) {\n        require(roles[roleId].roleType == RoleType.Shared, \"Must be called on an initialized Shared role\");\n        _;\n    }\n\n    /**\n     * @notice Whether `memberToCheck` is a member of roleId.\n     * @dev Reverts if roleId does not correspond to an initialized role.\n     * @param roleId the Role to check.\n     * @param memberToCheck the address to check.\n     * @return True if `memberToCheck` is a member of `roleId`.\n     */\n    function holdsRole(uint256 roleId, address memberToCheck) public view returns (bool) {\n        Role storage role = roles[roleId];\n        if (role.roleType == RoleType.Exclusive) {\n            return role.exclusiveRoleMembership.isMember(memberToCheck);\n        } else if (role.roleType == RoleType.Shared) {\n            return role.sharedRoleMembership.isMember(memberToCheck);\n        }\n        revert(\"Invalid roleId\");\n    }\n\n    /**\n     * @notice Changes the exclusive role holder of `roleId` to `newMember`.\n     * @dev Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an\n     * initialized, ExclusiveRole.\n     * @param roleId the ExclusiveRole membership to modify.\n     * @param newMember the new ExclusiveRole member.\n     */\n    function resetMember(uint256 roleId, address newMember) public onlyExclusive(roleId) onlyRoleManager(roleId) {\n        roles[roleId].exclusiveRoleMembership.resetMember(newMember);\n        emit ResetExclusiveMember(roleId, newMember, msg.sender);\n    }\n\n    /**\n     * @notice Gets the current holder of the exclusive role, `roleId`.\n     * @dev Reverts if `roleId` does not represent an initialized, exclusive role.\n     * @param roleId the ExclusiveRole membership to check.\n     * @return the address of the current ExclusiveRole member.\n     */\n    function getMember(uint256 roleId) public view onlyExclusive(roleId) returns (address) {\n        return roles[roleId].exclusiveRoleMembership.getMember();\n    }\n\n    /**\n     * @notice Adds `newMember` to the shared role, `roleId`.\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\n     * managing role for `roleId`.\n     * @param roleId the SharedRole membership to modify.\n     * @param newMember the new SharedRole member.\n     */\n    function addMember(uint256 roleId, address newMember) public onlyShared(roleId) onlyRoleManager(roleId) {\n        roles[roleId].sharedRoleMembership.addMember(newMember);\n        emit AddedSharedMember(roleId, newMember, msg.sender);\n    }\n\n    /**\n     * @notice Removes `memberToRemove` from the shared role, `roleId`.\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\n     * managing role for `roleId`.\n     * @param roleId the SharedRole membership to modify.\n     * @param memberToRemove the current SharedRole member to remove.\n     */\n    function removeMember(uint256 roleId, address memberToRemove) public onlyShared(roleId) onlyRoleManager(roleId) {\n        roles[roleId].sharedRoleMembership.removeMember(memberToRemove);\n        emit RemovedSharedMember(roleId, memberToRemove, msg.sender);\n    }\n\n    /**\n     * @notice Removes caller from the role, `roleId`.\n     * @dev Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an\n     * initialized, SharedRole.\n     * @param roleId the SharedRole membership to modify.\n     */\n    function renounceMembership(uint256 roleId) public onlyShared(roleId) onlyRoleHolder(roleId) {\n        roles[roleId].sharedRoleMembership.removeMember(msg.sender);\n        emit RemovedSharedMember(roleId, msg.sender, msg.sender);\n    }\n\n    /**\n     * @notice Reverts if `roleId` is not initialized.\n     */\n    modifier onlyValidRole(uint256 roleId) {\n        require(roles[roleId].roleType != RoleType.Invalid, \"Attempted to use an invalid roleId\");\n        _;\n    }\n\n    /**\n     * @notice Reverts if `roleId` is initialized.\n     */\n    modifier onlyInvalidRole(uint256 roleId) {\n        require(roles[roleId].roleType == RoleType.Invalid, \"Cannot use a pre-existing role\");\n        _;\n    }\n\n    /**\n     * @notice Internal method to initialize a shared role, `roleId`, which will be managed by `managingRoleId`.\n     * `initialMembers` will be immediately added to the role.\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\n     * initialized.\n     */\n    function _createSharedRole(\n        uint256 roleId,\n        uint256 managingRoleId,\n        address[] memory initialMembers\n    ) internal onlyInvalidRole(roleId) {\n        Role storage role = roles[roleId];\n        role.roleType = RoleType.Shared;\n        role.managingRole = managingRoleId;\n        role.sharedRoleMembership.init(initialMembers);\n        require(\n            roles[managingRoleId].roleType != RoleType.Invalid,\n            \"Attempted to use an invalid role to manage a shared role\"\n        );\n    }\n\n    /**\n     * @notice Internal method to initialize an exclusive role, `roleId`, which will be managed by `managingRoleId`.\n     * `initialMember` will be immediately added to the role.\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\n     * initialized.\n     */\n    function _createExclusiveRole(\n        uint256 roleId,\n        uint256 managingRoleId,\n        address initialMember\n    ) internal onlyInvalidRole(roleId) {\n        Role storage role = roles[roleId];\n        role.roleType = RoleType.Exclusive;\n        role.managingRole = managingRoleId;\n        role.exclusiveRoleMembership.init(initialMember);\n        require(\n            roles[managingRoleId].roleType != RoleType.Invalid,\n            \"Attempted to use an invalid role to manage an exclusive role\"\n        );\n    }\n}\n"
    },
    "contracts/UMA/oracle/interfaces/RegistryInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @title Interface for a registry of contracts and contract creators.\n */\ninterface RegistryInterface {\n    /**\n     * @notice Registers a new contract.\n     * @dev Only authorized contract creators can call this method.\n     * @param parties an array of addresses who become parties in the contract.\n     * @param contractAddress defines the address of the deployed contract.\n     */\n    function registerContract(address[] calldata parties, address contractAddress) external;\n\n    /**\n     * @notice Returns whether the contract has been registered with the registry.\n     * @dev If it is registered, it is an authorized participant in the UMA system.\n     * @param contractAddress address of the contract.\n     * @return bool indicates whether the contract is registered.\n     */\n    function isContractRegistered(address contractAddress) external view returns (bool);\n\n    /**\n     * @notice Returns a list of all contracts that are associated with a particular party.\n     * @param party address of the party.\n     * @return an array of the contracts the party is registered to.\n     */\n    function getRegisteredContracts(address party) external view returns (address[] memory);\n\n    /**\n     * @notice Returns all registered contracts.\n     * @return all registered contract addresses within the system.\n     */\n    function getAllRegisteredContracts() external view returns (address[] memory);\n\n    /**\n     * @notice Adds a party to the calling contract.\n     * @dev msg.sender must be the contract to which the party member is added.\n     * @param party address to be added to the contract.\n     */\n    function addPartyToContract(address party) external;\n\n    /**\n     * @notice Removes a party member to the calling contract.\n     * @dev msg.sender must be the contract to which the party member is added.\n     * @param party address to be removed from the contract.\n     */\n    function removePartyFromContract(address party) external;\n\n    /**\n     * @notice checks if an address is a party in a contract.\n     * @param party party to check.\n     * @param contractAddress address to check against the party.\n     * @return bool indicating if the address is a party of the contract.\n     */\n    function isPartyMemberOfContract(address party, address contractAddress) external view returns (bool);\n}\n"
    },
    "contracts/UMA/oracle/interfaces/VotingInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/FixedPoint.sol\";\nimport \"./VotingAncillaryInterface.sol\";\n\n/**\n * @title Interface that voters must use to Vote on price request resolutions.\n */\nabstract contract VotingInterface {\n    struct PendingRequest {\n        bytes32 identifier;\n        uint256 time;\n    }\n\n    // Captures the necessary data for making a commitment.\n    // Used as a parameter when making batch commitments.\n    // Not used as a data structure for storage.\n    struct Commitment {\n        bytes32 identifier;\n        uint256 time;\n        bytes32 hash;\n        bytes encryptedVote;\n    }\n\n    // Captures the necessary data for revealing a vote.\n    // Used as a parameter when making batch reveals.\n    // Not used as a data structure for storage.\n    struct Reveal {\n        bytes32 identifier;\n        uint256 time;\n        int256 price;\n        int256 salt;\n    }\n\n    /**\n     * @notice Commit a vote for a price request for `identifier` at `time`.\n     * @dev `identifier`, `time` must correspond to a price request that's currently in the commit phase.\n     * Commits can be changed.\n     * @dev Since transaction data is public, the salt will be revealed with the vote. While this is the system’s expected behavior,\n     * voters should never reuse salts. If someone else is able to guess the voted price and knows that a salt will be reused, then\n     * they can determine the vote pre-reveal.\n     * @param identifier uniquely identifies the committed vote. EG BTC/USD price pair.\n     * @param time unix timestamp of the price being voted on.\n     * @param hash keccak256 hash of the `price`, `salt`, voter `address`, `time`, current `roundId`, and `identifier`.\n     */\n    function commitVote(\n        bytes32 identifier,\n        uint256 time,\n        bytes32 hash\n    ) external virtual;\n\n    /**\n     * @notice Submit a batch of commits in a single transaction.\n     * @dev Using `encryptedVote` is optional. If included then commitment is stored on chain.\n     * Look at `project-root/common/Constants.js` for the tested maximum number of\n     * commitments that can fit in one transaction.\n     * @param commits array of structs that encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`.\n     */\n    function batchCommit(Commitment[] memory commits) public virtual;\n\n    /**\n     * @notice commits a vote and logs an event with a data blob, typically an encrypted version of the vote\n     * @dev An encrypted version of the vote is emitted in an event `EncryptedVote` to allow off-chain infrastructure to\n     * retrieve the commit. The contents of `encryptedVote` are never used on chain: it is purely for convenience.\n     * @param identifier unique price pair identifier. Eg: BTC/USD price pair.\n     * @param time unix timestamp of for the price request.\n     * @param hash keccak256 hash of the price you want to vote for and a `int256 salt`.\n     * @param encryptedVote offchain encrypted blob containing the voters amount, time and salt.\n     */\n    function commitAndEmitEncryptedVote(\n        bytes32 identifier,\n        uint256 time,\n        bytes32 hash,\n        bytes memory encryptedVote\n    ) public virtual;\n\n    /**\n     * @notice snapshot the current round's token balances and lock in the inflation rate and GAT.\n     * @dev This function can be called multiple times but each round will only every have one snapshot at the\n     * time of calling `_freezeRoundVariables`.\n     * @param signature  signature required to prove caller is an EOA to prevent flash loans from being included in the\n     * snapshot.\n     */\n    function snapshotCurrentRound(bytes calldata signature) external virtual;\n\n    /**\n     * @notice Reveal a previously committed vote for `identifier` at `time`.\n     * @dev The revealed `price`, `salt`, `address`, `time`, `roundId`, and `identifier`, must hash to the latest `hash`\n     * that `commitVote()` was called with. Only the committer can reveal their vote.\n     * @param identifier voted on in the commit phase. EG BTC/USD price pair.\n     * @param time specifies the unix timestamp of the price is being voted on.\n     * @param price voted on during the commit phase.\n     * @param salt value used to hide the commitment price during the commit phase.\n     */\n    function revealVote(\n        bytes32 identifier,\n        uint256 time,\n        int256 price,\n        int256 salt\n    ) public virtual;\n\n    /**\n     * @notice Reveal multiple votes in a single transaction.\n     * Look at `project-root/common/Constants.js` for the tested maximum number of reveals.\n     * that can fit in one transaction.\n     * @dev For more information on reveals, review the comment for `revealVote`.\n     * @param reveals array of the Reveal struct which contains an identifier, time, price and salt.\n     */\n    function batchReveal(Reveal[] memory reveals) public virtual;\n\n    /**\n     * @notice Gets the queries that are being voted on this round.\n     * @return pendingRequests `PendingRequest` array containing identifiers\n     * and timestamps for all pending requests.\n     */\n    function getPendingRequests()\n        external\n        view\n        virtual\n        returns (VotingAncillaryInterface.PendingRequestAncillary[] memory);\n\n    /**\n     * @notice Returns the current voting phase, as a function of the current time.\n     * @return Phase to indicate the current phase. Either { Commit, Reveal, NUM_PHASES_PLACEHOLDER }.\n     */\n    function getVotePhase() external view virtual returns (VotingAncillaryInterface.Phase);\n\n    /**\n     * @notice Returns the current round ID, as a function of the current time.\n     * @return uint256 representing the unique round ID.\n     */\n    function getCurrentRoundId() external view virtual returns (uint256);\n\n    /**\n     * @notice Retrieves rewards owed for a set of resolved price requests.\n     * @dev Can only retrieve rewards if calling for a valid round and if the\n     * call is done within the timeout threshold (not expired).\n     * @param voterAddress voter for which rewards will be retrieved. Does not have to be the caller.\n     * @param roundId the round from which voting rewards will be retrieved from.\n     * @param toRetrieve array of PendingRequests which rewards are retrieved from.\n     * @return total amount of rewards returned to the voter.\n     */\n    function retrieveRewards(\n        address voterAddress,\n        uint256 roundId,\n        PendingRequest[] memory toRetrieve\n    ) public virtual returns (FixedPoint.Unsigned memory);\n\n    // Voting Owner functions.\n\n    /**\n     * @notice Disables this Voting contract in favor of the migrated one.\n     * @dev Can only be called by the contract owner.\n     * @param newVotingAddress the newly migrated contract address.\n     */\n    function setMigrated(address newVotingAddress) external virtual;\n\n    /**\n     * @notice Resets the inflation rate. Note: this change only applies to rounds that have not yet begun.\n     * @dev This method is public because calldata structs are not currently supported by solidity.\n     * @param newInflationRate sets the next round's inflation rate.\n     */\n    function setInflationRate(FixedPoint.Unsigned memory newInflationRate) public virtual;\n\n    /**\n     * @notice Resets the Gat percentage. Note: this change only applies to rounds that have not yet begun.\n     * @dev This method is public because calldata structs are not currently supported by solidity.\n     * @param newGatPercentage sets the next round's Gat percentage.\n     */\n    function setGatPercentage(FixedPoint.Unsigned memory newGatPercentage) public virtual;\n\n    /**\n     * @notice Resets the rewards expiration timeout.\n     * @dev This change only applies to rounds that have not yet begun.\n     * @param NewRewardsExpirationTimeout how long a caller can wait before choosing to withdraw their rewards.\n     */\n    function setRewardsExpirationTimeout(uint256 NewRewardsExpirationTimeout) public virtual;\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/UMA/oracle/interfaces/StakerInterface.sol": {
      "content": "import \"../implementation/VotingToken.sol\";\n\n// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\ninterface StakerInterface {\n    function votingToken() external returns (VotingToken);\n\n    function stake(uint256 amount) external;\n\n    function requestUnstake(uint256 amount) external;\n\n    function executeUnstake() external;\n\n    function withdrawRewards() external returns (uint256);\n}\n"
    },
    "contracts/UMA/oracle/implementation/VotingToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/ExpandedERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol\";\n\n/**\n * @title Ownership of this token allows a voter to respond to price requests.\n * @dev Supports snapshotting and allows the Oracle to mint new tokens as rewards.\n */\ncontract VotingToken is ExpandedERC20, ERC20Snapshot {\n    /**\n     * @notice Constructs the VotingToken.\n     */\n    constructor() ExpandedERC20(\"UMA Voting Token v1\", \"UMA\", 18) ERC20Snapshot() {}\n\n    function decimals() public view virtual override(ERC20, ExpandedERC20) returns (uint8) {\n        return super.decimals();\n    }\n\n    /**\n     * @notice Creates a new snapshot ID.\n     * @return uint256 Thew new snapshot ID.\n     */\n    function snapshot() external returns (uint256) {\n        return _snapshot();\n    }\n\n    // _transfer, _mint and _burn are ERC20 internal methods that are overridden by ERC20Snapshot,\n    // therefore the compiler will complain that VotingToken must override these methods\n    // because the two base classes (ERC20 and ERC20Snapshot) both define the same functions\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 value\n    ) internal override(ERC20) {\n        super._transfer(from, to, value);\n    }\n\n    function _mint(address account, uint256 value) internal virtual override(ERC20) {\n        super._mint(account, value);\n    }\n\n    function _burn(address account, uint256 value) internal virtual override(ERC20) {\n        super._burn(account, value);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Snapshot) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "contracts/UMA/common/implementation/Testable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./Timer.sol\";\n\n/**\n * @title Base class that provides time overrides, but only if being run in test mode.\n */\nabstract contract Testable {\n    // If the contract is being run in production, then `timerAddress` will be the 0x0 address.\n    // Note: this variable should be set on construction and never modified.\n    address public timerAddress;\n\n    /**\n     * @notice Constructs the Testable contract. Called by child contracts.\n     * @param _timerAddress Contract that stores the current time in a testing environment.\n     * Must be set to 0x0 for production environments that use live time.\n     */\n    constructor(address _timerAddress) {\n        timerAddress = _timerAddress;\n    }\n\n    /**\n     * @notice Reverts if not running in test mode.\n     */\n    modifier onlyIfTest {\n        require(timerAddress != address(0x0));\n        _;\n    }\n\n    /**\n     * @notice Sets the current time.\n     * @dev Will revert if not running in test mode.\n     * @param time timestamp to set current Testable time to.\n     */\n    function setCurrentTime(uint256 time) external onlyIfTest {\n        Timer(timerAddress).setCurrentTime(time);\n    }\n\n    /**\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\n     * Otherwise, it will return the block timestamp.\n     * @return uint for the current Testable timestamp.\n     */\n    function getCurrentTime() public view virtual returns (uint256) {\n        if (timerAddress != address(0x0)) {\n            return Timer(timerAddress).getCurrentTime();\n        } else {\n            return block.timestamp; // solhint-disable-line not-rely-on-time\n        }\n    }\n}\n"
    },
    "contracts/UMA/common/implementation/ExpandedERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./MultiRole.sol\";\nimport \"../interfaces/ExpandedIERC20.sol\";\n\n/**\n * @title An ERC20 with permissioned burning and minting. The contract deployer will initially\n * be the owner who is capable of adding new roles.\n */\ncontract ExpandedERC20 is ExpandedIERC20, ERC20, MultiRole {\n    enum Roles {\n        // Can set the minter and burner.\n        Owner,\n        // Addresses that can mint new tokens.\n        Minter,\n        // Addresses that can burn tokens that address owns.\n        Burner\n    }\n\n    uint8 _decimals;\n\n    /**\n     * @notice Constructs the ExpandedERC20.\n     * @param _tokenName The name which describes the new token.\n     * @param _tokenSymbol The ticker abbreviation of the name. Ideally < 5 chars.\n     * @param _tokenDecimals The number of decimals to define token precision.\n     */\n    constructor(\n        string memory _tokenName,\n        string memory _tokenSymbol,\n        uint8 _tokenDecimals\n    ) ERC20(_tokenName, _tokenSymbol) {\n        _decimals = _tokenDecimals;\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\n        _createSharedRole(uint256(Roles.Minter), uint256(Roles.Owner), new address[](0));\n        _createSharedRole(uint256(Roles.Burner), uint256(Roles.Owner), new address[](0));\n    }\n\n    function decimals() public view virtual override(ERC20) returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev Mints `value` tokens to `recipient`, returning true on success.\n     * @param recipient address to mint to.\n     * @param value amount of tokens to mint.\n     * @return True if the mint succeeded, or False.\n     */\n    function mint(address recipient, uint256 value)\n        external\n        override\n        onlyRoleHolder(uint256(Roles.Minter))\n        returns (bool)\n    {\n        _mint(recipient, value);\n        return true;\n    }\n\n    /**\n     * @dev Burns `value` tokens owned by `msg.sender`.\n     * @param value amount of tokens to burn.\n     */\n    function burn(uint256 value) external override onlyRoleHolder(uint256(Roles.Burner)) {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns `value` tokens owned by `recipient`.\n     * @param recipient address to burn tokens from.\n     * @param value amount of tokens to burn.\n     * @return True if the burn succeeded, or False.\n     */\n    function burnFrom(address recipient, uint256 value)\n        external\n        override\n        onlyRoleHolder(uint256(Roles.Burner))\n        returns (bool)\n    {\n        _burn(recipient, value);\n        return true;\n    }\n\n    /**\n     * @notice Add Minter role to account.\n     * @dev The caller must have the Owner role.\n     * @param account The address to which the Minter role is added.\n     */\n    function addMinter(address account) external virtual override {\n        addMember(uint256(Roles.Minter), account);\n    }\n\n    /**\n     * @notice Add Burner role to account.\n     * @dev The caller must have the Owner role.\n     * @param account The address to which the Burner role is added.\n     */\n    function addBurner(address account) external virtual override {\n        addMember(uint256(Roles.Burner), account);\n    }\n\n    /**\n     * @notice Reset Owner role to account.\n     * @dev The caller must have the Owner role.\n     * @param account The new holder of the Owner role.\n     */\n    function resetOwner(address account) external virtual override {\n        resetMember(uint256(Roles.Owner), account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/extensions/ERC20Snapshot.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Arrays.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\n * total supply at the time are recorded for later access.\n *\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\n * In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\n * used to create an efficient ERC20 forking mechanism.\n *\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\n * and the account address.\n *\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\n * return `block.number` will trigger the creation of snapshot at the beginning of each new block. When overriding this\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\n *\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\n * alternative consider {ERC20Votes}.\n *\n * ==== Gas Costs\n *\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\n *\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\n * transfers will have normal cost until the next snapshot, and so on.\n */\n\nabstract contract ERC20Snapshot is ERC20 {\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\n    // https://github.com/Giveth/minime/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\n\n    using Arrays for uint256[];\n    using Counters for Counters.Counter;\n\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\n    // Snapshot struct, but that would impede usage of functions that work on an array.\n    struct Snapshots {\n        uint256[] ids;\n        uint256[] values;\n    }\n\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\n    Snapshots private _totalSupplySnapshots;\n\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\n    Counters.Counter private _currentSnapshotId;\n\n    /**\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\n     */\n    event Snapshot(uint256 id);\n\n    /**\n     * @dev Creates a new snapshot and returns its snapshot id.\n     *\n     * Emits a {Snapshot} event that contains the same id.\n     *\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\n     *\n     * [WARNING]\n     * ====\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\n     * you must consider that it can potentially be used by attackers in two ways.\n     *\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\n     * section above.\n     *\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\n     * ====\n     */\n    function _snapshot() internal virtual returns (uint256) {\n        _currentSnapshotId.increment();\n\n        uint256 currentId = _getCurrentSnapshotId();\n        emit Snapshot(currentId);\n        return currentId;\n    }\n\n    /**\n     * @dev Get the current snapshotId\n     */\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\n        return _currentSnapshotId.current();\n    }\n\n    /**\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\n     */\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\n\n        return snapshotted ? value : balanceOf(account);\n    }\n\n    /**\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\n     */\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\n\n        return snapshotted ? value : totalSupply();\n    }\n\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        if (from == address(0)) {\n            // mint\n            _updateAccountSnapshot(to);\n            _updateTotalSupplySnapshot();\n        } else if (to == address(0)) {\n            // burn\n            _updateAccountSnapshot(from);\n            _updateTotalSupplySnapshot();\n        } else {\n            // transfer\n            _updateAccountSnapshot(from);\n            _updateAccountSnapshot(to);\n        }\n    }\n\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\n        require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\n        require(snapshotId <= _getCurrentSnapshotId(), \"ERC20Snapshot: nonexistent id\");\n\n        // When a valid snapshot is queried, there are three possibilities:\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\n        //  to this id is the current one.\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\n        //  requested id, and its value is the one to return.\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\n        //  larger than the requested one.\n        //\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\n        // exactly this.\n\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\n\n        if (index == snapshots.ids.length) {\n            return (false, 0);\n        } else {\n            return (true, snapshots.values[index]);\n        }\n    }\n\n    function _updateAccountSnapshot(address account) private {\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\n    }\n\n    function _updateTotalSupplySnapshot() private {\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\n    }\n\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\n        uint256 currentId = _getCurrentSnapshotId();\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\n            snapshots.ids.push(currentId);\n            snapshots.values.push(currentValue);\n        }\n    }\n\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\n        if (ids.length == 0) {\n            return 0;\n        } else {\n            return ids[ids.length - 1];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/UMA/common/interfaces/ExpandedIERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title ERC20 interface that includes burn and mint methods.\n */\nabstract contract ExpandedIERC20 is IERC20 {\n    /**\n     * @notice Burns a specific amount of the caller's tokens.\n     * @dev Only burns the caller's tokens, so it is safe to leave this method permissionless.\n     */\n    function burn(uint256 value) external virtual;\n\n    /**\n     * @dev Burns `value` tokens owned by `recipient`.\n     * @param recipient address to burn tokens from.\n     * @param value amount of tokens to burn.\n     */\n    function burnFrom(address recipient, uint256 value) external virtual returns (bool);\n\n    /**\n     * @notice Mints tokens and adds them to the balance of the `to` address.\n     * @dev This method should be permissioned to only allow designated parties to mint tokens.\n     */\n    function mint(address to, uint256 value) external virtual returns (bool);\n\n    function addMinter(address account) external virtual;\n\n    function addBurner(address account) external virtual;\n\n    function resetOwner(address account) external virtual;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Arrays.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Arrays.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        if (array.length == 0) {\n            return 0;\n        }\n\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds down (it does integer division with truncation).\n            if (array[mid] > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && array[low - 1] == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"
    },
    "contracts/UMA/common/implementation/Timer.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @title Universal store of current contract time for testing environments.\n */\ncontract Timer {\n    uint256 private currentTime;\n\n    constructor() {\n        currentTime = block.timestamp; // solhint-disable-line not-rely-on-time\n    }\n\n    /**\n     * @notice Sets the current time.\n     * @dev Will revert if not running in test mode.\n     * @param time timestamp to set `currentTime` to.\n     */\n    function setCurrentTime(uint256 time) external {\n        currentTime = time;\n    }\n\n    /**\n     * @notice Gets the currentTime variable set in the Timer.\n     * @return uint256 for the current Testable timestamp.\n     */\n    function getCurrentTime() public view returns (uint256) {\n        return currentTime;\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/AdminIdentifierLib.sol": {
      "content": "/**\n * @title Library to construct admin identifiers.\n */\nlibrary AdminIdentifierLib {\n    // Returns a UTF-8 identifier representing a particular admin proposal.\n    // The identifier is of the form \"Admin n\", where n is the proposal id provided.\n    function _constructIdentifier(uint256 id) internal pure returns (bytes32) {\n        bytes32 bytesId = _uintToUtf8(id);\n        return _addPrefix(bytesId, \"Admin \", 6);\n    }\n\n    // This method converts the integer `v` into a base-10, UTF-8 representation stored in a `bytes32` type.\n    // If the input cannot be represented by 32 base-10 digits, it returns only the highest 32 digits.\n    // This method is based off of this code: https://ethereum.stackexchange.com/a/6613/47801.\n    function _uintToUtf8(uint256 v) internal pure returns (bytes32) {\n        bytes32 ret;\n        if (v == 0) {\n            // Handle 0 case explicitly.\n            ret = \"0\";\n        } else {\n            // Constants.\n            uint256 bitsPerByte = 8;\n            uint256 base = 10; // Note: the output should be base-10. The below implementation will not work for bases > 10.\n            uint256 utf8NumberOffset = 48;\n            while (v > 0) {\n                // Downshift the entire bytes32 to allow the new digit to be added at the \"front\" of the bytes32, which\n                // translates to the beginning of the UTF-8 representation.\n                ret = ret >> bitsPerByte;\n\n                // Separate the last digit that remains in v by modding by the base of desired output representation.\n                uint256 leastSignificantDigit = v % base;\n\n                // Digits 0-9 are represented by 48-57 in UTF-8, so an offset must be added to create the character.\n                bytes32 utf8Digit = bytes32(leastSignificantDigit + utf8NumberOffset);\n\n                // The top byte of ret has already been cleared to make room for the new digit.\n                // Upshift by 31 bytes to put it in position, and OR it with ret to leave the other characters untouched.\n                ret |= utf8Digit << (31 * bitsPerByte);\n\n                // Divide v by the base to remove the digit that was just added.\n                v /= base;\n            }\n        }\n        return ret;\n    }\n\n    // This method takes two UTF-8 strings represented as bytes32 and outputs one as a prefixed by the other.\n    // `input` is the UTF-8 that should have the prefix prepended.\n    // `prefix` is the UTF-8 that should be prepended onto input.\n    // `prefixLength` is number of UTF-8 characters represented by `prefix`.\n    // Notes:\n    // 1. If the resulting UTF-8 is larger than 32 characters, then only the first 32 characters will be represented\n    //    by the bytes32 output.\n    // 2. If `prefix` has more characters than `prefixLength`, the function will produce an invalid result.\n    function _addPrefix(\n        bytes32 input,\n        bytes32 prefix,\n        uint256 prefixLength\n    ) internal pure returns (bytes32) {\n        // Downshift `input` to open space at the \"front\" of the bytes32\n        bytes32 shiftedInput = input >> (prefixLength * 8);\n        return shiftedInput | prefix;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/ClayStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IClayToken.sol\";\n\n/**\n    User can stake Sumero LP Tokens (received by providing liquidity to a Liquidity Pool on Sumero) to earn CLAY rewards.\n    User can unstake the Sumero LP tokens and claim rewards at any point in time.\n    Rewards would depend on your\n    - time period of stake  \n    - percentage of your staked tokens with respect to total staked tokens\n\n    Owner of this contract can perform following actions:\n    - pause / unpause this contract in case of closure of Staking Rewards scheme or other unforseen circumstances\n    - change reward rate\n */\ncontract ClayStakingRewards is Ownable, ReentrancyGuard, Pausable {\n    IClayToken public clayToken;\n    // Staking token would be Sumero LP tokens\n    IERC20 public stakingToken;\n\n    // Reward Rate per day\n    // 10 gwei CLAY per second\n    // 10 gwei * (24 * 60 * 60)\n    // 10 gwei * 86400\n    // 864000 gwei => 0.000864 CLAY per day per token\n    // Make this a max deterministic reward so that we can control outflow of CLAY?\n\n    // reward rate i.e. reward in wei rewarded per second for staking a whole token\n    uint256 public rewardRate = 10 gwei;\n    uint256 public lastUpdateTime;\n    uint256 public rewardPerTokenStored;\n\n    mapping(address => uint256) public userRewardPerTokenPaid;\n    mapping(address => uint256) public rewards;\n\n    uint256 private _totalSupply;\n    mapping(address => uint256) private _balances;\n\n    constructor(address _stakedToken, address _clayToken) {\n        stakingToken = IERC20(_stakedToken);\n        clayToken = IClayToken(_clayToken);\n    }\n\n    /* ========== VIEWS ========== */\n\n    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) external view returns (uint256) {\n        return _balances[account];\n    }\n\n    function rewardPerToken() public view returns (uint256) {\n        if (_totalSupply == 0) {\n            return rewardPerTokenStored;\n        }\n        return\n            rewardPerTokenStored +\n            ((rewardRate * (block.timestamp - lastUpdateTime) * 1e18) /\n                _totalSupply);\n    }\n\n    function earned(address _account) public view returns (uint256) {\n        return\n            ((_balances[_account] *\n                (rewardPerToken() - userRewardPerTokenPaid[_account])) / 1e18) +\n            rewards[_account];\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier updateReward(address _account) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = block.timestamp;\n\n        rewards[_account] = earned(_account);\n        userRewardPerTokenPaid[_account] = rewardPerTokenStored;\n        _;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function stake(uint256 _amount)\n        external\n        nonReentrant\n        whenNotPaused\n        updateReward(msg.sender)\n    {\n        _totalSupply += _amount;\n        _balances[msg.sender] += _amount;\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\n        emit Staked(msg.sender, _amount);\n    }\n\n    function withdraw(uint256 _amount)\n        public\n        nonReentrant\n        updateReward(msg.sender)\n    {\n        _totalSupply -= _amount;\n        _balances[msg.sender] -= _amount;\n        stakingToken.transfer(msg.sender, _amount);\n        emit Withdrawn(msg.sender, _amount);\n    }\n\n    function exit() external {\n        withdraw(_balances[msg.sender]);\n        getReward();\n    }\n\n    function getReward() public nonReentrant updateReward(msg.sender) {\n        uint256 reward = rewards[msg.sender];\n        rewards[msg.sender] = 0;\n        // Sumero Owner needs to grant MINTER_ROLE for CLAY to StakingRewards\n        clayToken.mint(msg.sender, reward);\n        emit RewardPaid(msg.sender, reward);\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function updateRewardRate(uint256 _rewardRate) external onlyOwner {\n        rewardRate = _rewardRate;\n        emit RewardRateUpdated(_rewardRate);\n    }\n\n    /* ========== EVENTS ========== */\n\n    event RewardAdded(uint256 reward);\n    event Staked(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n    event RewardPaid(address indexed user, uint256 reward);\n    event RewardRateUpdated(uint256 rewardRate);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/IClayToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the Clay Token.\n */\ninterface IClayToken {\n    function mint(address account, uint256 amount) external;\n\n    function burn(address account, uint256 amount) external;\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n}\n"
    },
    "contracts/ClayBonds.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IClayToken.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n\n/**\n    You can deposit CLAY (ERC20 token native to Sumero) to get zCLAY Bonds (a new ERC20 representing the bond).\n\n    These zCLAY Bonds can be minted upto a year from depositStartDate.\n    The bonds will mature after a period of 3 years from the depositStartDate.\n\n    There is a \"Fixed APY\" (Annual Percentage Yield) of 40% on the zCLAY Bonds and a \"Bonus APY\" of additional 20% that is constantly decreasing as the deposit close date is nearing (i.e. from a maximum of 20% to 0%).\n    In total giving a maximum of 60% APY if a user creates bonds at Day 1 of bond start date.\n\n    - FIXED_APY = 40%\n    - BONUS_APY = 20% (decreases as deposit close date nears)\n\n    Example:\n\n    - User deposits 1 Clay and issues a zCLAY Bond on Day 1 of bond start date\n    - [(deposit close timestamp - block timestamp) / (1 year in seconds) * Bonus_APY]\n    - Total APY = APY + Bonus APY = 60%\n    - User get 2.8 zCLAY Bond (Total APY (60%) for next 3 years i.e 180% total interest)\n    - 1 + (180% of 1) => 1 + 1.8 => 2.8\n    \n    The user can claim the zCLAY Bonds for equivalent value of CLAY after the maturation date.\n    The user has to lock his CLAY in to zCLAY bonds for atleast 3 years. They are open to trade these bonds on a secondary market (i.e. via LP pools on Sumero)\n */\ncontract ClayBonds is ERC20(\"zClay Token\", \"zCLAY\"), Ownable{\n    IClayToken public clay;\n\n    // the maximum upper limit of bond rewards that this contract will give over it's lifetime\n    uint256 public maximumBondRewards;\n    // total zCLAY bonds locked into the contract\n    uint256 public totalBondDeposits;\n\n    uint256 public depositStartDate;\n    uint256 public depositCloseDate;\n    uint256 public maturationDate;\n\n    uint256 public dailyYieldPercent;\n\n    uint256 public constant APY_PERCENT = 40;\n    uint256 public constant BONUS_APY_PERCENT = 20;\n    uint256 public constant BONDS_ISSUANCE_PERIOD = 1 days * 365;\n\n    event Issue(\n        uint256 amount,\n        uint256 daysLeftToMaturationDate,\n        uint256 rewardPercent,\n        uint256 reward\n    );\n\n    constructor(IClayToken _clay, uint256 _maximumBondRewards) {\n        clay = _clay;\n        maximumBondRewards = _maximumBondRewards;\n        depositStartDate = block.timestamp;\n\n        // TODO: take into consideration leap year?\n\n        // deposit close date is 1 year in future\n        depositCloseDate = depositStartDate + BONDS_ISSUANCE_PERIOD;\n        // maturation date of bond is 3 years in future\n        maturationDate = depositStartDate + (BONDS_ISSUANCE_PERIOD * 3);\n\n        // calculate daily yield\n        // APY details can be taken as constructor argument\n        dailyYieldPercent =\n            ((APY_PERCENT + BONUS_APY_PERCENT) * (1 ether)) /\n            365;\n    }\n\n    function getDaysLeftToMaturationDate()\n        public\n        view\n        returns (uint256 daysLeftToMaturationDate)\n    {\n        if (maturationDate < block.timestamp) {\n            return 0; // just return 0 instead of dealing with negatives\n        }\n        // calculate days remaining till maturation day\n        daysLeftToMaturationDate =\n            (maturationDate - block.timestamp) /\n            (1 days);\n    }\n\n    function getRewardPercent(uint256 daysLeftToMaturationDate)\n        public\n        view\n        returns (uint256 rewardPercent)\n    {\n        // Total Percentage Reward => dailyYieldPercent * daysLeftToMaturationDate\n        // adding 1 here to consider interest for the current ongoing day\n        rewardPercent = dailyYieldPercent * (daysLeftToMaturationDate + 1);\n    }\n\n    function getReward(uint256 _amount, uint256 _rewardPercent)\n        public\n        pure\n        returns (uint256 reward)\n    {\n        // bondAmount => amount + (total percentage reward * amount)\n        reward = ((_amount * _rewardPercent) / 100) / 1 ether;\n    }\n\n    /**\n     * Issues a zCLAY Bond depending on the amount of CLAY deposited and the current APY which depends on the time elapsed since bond programme inception\n     * @param _clayAmount The amount of CLAY deposited\n     */\n    function issue(uint256 _clayAmount) public returns (uint256 bondAmount) {\n        require(_clayAmount > 100, \"Clay Amount must be greater than 100 wei\");\n        require(\n            block.timestamp >= depositStartDate &&\n                block.timestamp < depositCloseDate,\n            \"Deposit closed\"\n        );\n\n        uint256 daysLeftToMaturationDate = getDaysLeftToMaturationDate();\n        uint256 rewardPercent = getRewardPercent(daysLeftToMaturationDate);\n        uint256 reward = getReward(_clayAmount, rewardPercent);\n\n        bondAmount = _clayAmount + reward;\n\n        clay.transferFrom(msg.sender, address(this), _clayAmount);\n        _mint(msg.sender, bondAmount);\n\n        totalBondDeposits = totalBondDeposits + bondAmount;\n\n        require(\n            totalBondDeposits < maximumBondRewards,\n            \"Maximum Bond Reward Pool Reached\"\n        );\n\n        emit Issue(\n            _clayAmount,\n            daysLeftToMaturationDate,\n            rewardPercent,\n            reward\n        );\n    }\n\n    /**\n     * @dev Burns zClay and returns the underlying Clay tokens\n     **/\n    function claim() public {\n        require(\n            maturationDate <= block.timestamp,\n            \"Bond Maturity date not reached\"\n        );\n        uint256 balance = balanceOf(msg.sender);\n        require(balance > 0, \"Balance must be greater than zero\");\n        _burn(msg.sender, balance);\n        clay.mint(msg.sender, balance);\n    }\n\n    /**\n     * @dev Burns the remaining Clay in the contract\n     **/\n    function burn() public onlyOwner{\n        require(\n            maturationDate <= block.timestamp,\n            \"Bond Maturity date not reached\"\n        );\n        uint256 clayBalance = clay.balanceOf(address(this));\n        clay.burn(address(this), clayBalance);\n    }\n}\n"
    },
    "contracts/UMA/common/implementation/TestnetERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title An implementation of ERC20 with the same interface as the Compound project's testnet tokens (mainly DAI)\n * @dev This contract can be deployed or the interface can be used to communicate with Compound's ERC20 tokens.  Note:\n * this token should never be used to store real value since it allows permissionless minting.\n */\n\ncontract TestnetERC20 is ERC20 {\n    uint8 _decimals;\n\n    /**\n     * @notice Constructs the TestnetERC20.\n     * @param _name The name which describes the new token.\n     * @param _symbol The ticker abbreviation of the name. Ideally < 5 chars.\n     * @param _tokenDecimals The number of decimals to define token precision.\n     */\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _tokenDecimals\n    ) ERC20(_name, _symbol) {\n        _decimals = _tokenDecimals;\n    }\n\n    function decimals() public view virtual override(ERC20) returns (uint8) {\n        return _decimals;\n    }\n\n    // Sample token information.\n\n    /**\n     * @notice Mints value tokens to the owner address.\n     * @param ownerAddress the address to mint to.\n     * @param value the amount of tokens to mint.\n     */\n    function allocateTo(address ownerAddress, uint256 value) external {\n        _mint(ownerAddress, value);\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/common/financial-product-libraries/long-short-pair-libraries/RangeBondLongShortPairFinancialProductLibrary.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"./LongShortPairFinancialProductLibrary.sol\";\nimport \"../../../../common/implementation/Lockable.sol\";\n\n/**\n * @title Range Bond Long Short Pair Financial Product Library\n * @notice Adds settlement logic to create range bond LSPs. A range bond is the combination of a Yield dollar, short put\n * option and long call option enabling the token sponsor to issue structured products to unlock DeFi treasuries.\n * A range bond is defined as = Yield Dollar - Put Option + Call option. Numerically this is found using:\n * N = Notional of bond\n * P = price of token\n * T = number of tokens\n * R1 = low price range\n * R2 = high price range\n * T = min(N/P,N/R1) + max((N/R2*(P-R2))/P,0)\n * - At any price below the low price range (R1) the long side effectively holds a fixed number of collateral equal to\n * collateralPerPair from the LSP with the value of expiryPercentLong = 1. This is the max payout in collateral.\n * - Any price between R1 and R2 gives a payout equivalent to a yield dollar (bond) of notional N. In this range the\n * expiryPercentLong shifts to keep the payout in dollar terms equal to the bond notional.\n * - At any price above R2 the long holders are entitled to a fixed, minimum number of collateral equal to N/R2 with a\n * expiryPercentLong=(N/R2)/collateralPerPair.\n * The expression for the number of tokens paid out to the long side (T above) can be algebraically simplified,\n * transformed to remove the notional and reframed to express the expiryPercentLong as [min(max(1/R2,1/P),1/R1)]/(1/R1)\n * With this equation, the contract deployer does not need to specify the bond notional N. The notional can be calculated\n * by taking R1*collateralPerPair from the LSP.\n */\ncontract RangeBondLongShortPairFinancialProductLibrary is LongShortPairFinancialProductLibrary, Lockable {\n    using FixedPoint for FixedPoint.Unsigned;\n    using SignedSafeMath for int256;\n\n    struct RangeBondLongShortPairParameters {\n        uint256 highPriceRange;\n        uint256 lowPriceRange;\n    }\n\n    mapping(address => RangeBondLongShortPairParameters) public longShortPairParameters;\n\n    /**\n     * @notice Enables any address to set the parameters price for an associated financial product.\n     * @param longShortPair address of the LSP contract.\n     * @param highPriceRange high price range after which the payout transforms from a yield dollar to a call option.\n     * @param lowPriceRange low price range below which the payout transforms from a yield dollar to a short put option.\n     * @dev between highPriceRange and lowPriceRange the contract will payout a fixed amount of\n     * lowPriceRange*collateralPerPair (i.e the \"notional\" of the yield dollar).\n     * @dev Note: a) Any address can set these parameters b) existing LSP parameters for address not set.\n     * c) highPriceRange > lowPriceRange.\n     * d) parameters price can only be set once to prevent the deployer from changing the parameters after the fact.\n     * e) For safety, a parameters should be set before depositing any synthetic tokens in a liquidity pool.\n     * f) longShortPair must expose an expirationTimestamp method to validate it is correctly deployed.\n     */\n    function setLongShortPairParameters(\n        address longShortPair,\n        uint256 highPriceRange,\n        uint256 lowPriceRange\n    ) public nonReentrant() {\n        require(ExpiringContractInterface(longShortPair).expirationTimestamp() != 0, \"Invalid LSP address\");\n\n        require(highPriceRange > lowPriceRange, \"Invalid bounds\");\n\n        RangeBondLongShortPairParameters memory params = longShortPairParameters[longShortPair];\n        require(params.highPriceRange == 0 && params.lowPriceRange == 0, \"Parameters already set\");\n\n        longShortPairParameters[longShortPair] = RangeBondLongShortPairParameters({\n            highPriceRange: highPriceRange,\n            lowPriceRange: lowPriceRange\n        });\n    }\n\n    /**\n     * @notice Returns a number between 0 and 1e18 to indicate how much collateral each long and short token are\n     * entitled to per collateralPerPair.\n     * @param expiryPrice price from the optimistic oracle for the LSP price identifier.\n     * @return expiryPercentLong to indicate how much collateral should be sent between long and short tokens.\n     */\n    function percentageLongCollateralAtExpiry(int256 expiryPrice)\n        public\n        view\n        override\n        nonReentrantView()\n        returns (uint256)\n    {\n        RangeBondLongShortPairParameters memory params = longShortPairParameters[msg.sender];\n        require(params.highPriceRange != 0 || params.lowPriceRange != 0, \"Params not set for calling LSP\");\n\n        // This function returns a value between 0 and 1e18 to be used in conjunction with the LSP collateralPerPair\n        // that allocates collateral between the short and long tokens on expiry. This can be simplified by considering\n        // the price in three discrete ranges: 1) below the low price range, 2) between low and high range and 3) above\n        // the high price range.\n        uint256 positiveExpiryPrice = expiryPrice > 0 ? uint256(expiryPrice) : 0;\n\n        // 1) The long position is entitled to the full position in this range. The short token is worth 0.\n        if (positiveExpiryPrice <= params.lowPriceRange) return FixedPoint.fromUnscaledUint(1).rawValue;\n        // 2) Within the range, the long position is entitled to the bond notional value which is equal to\n        // (collateral tokens * lowPriceRange).\n        if (positiveExpiryPrice <= params.highPriceRange)\n            return FixedPoint.Unsigned(params.lowPriceRange).div(FixedPoint.Unsigned(positiveExpiryPrice)).rawValue;\n        // 3) Above the range, the long position is entitled to a fixed number of tokens.\n        return FixedPoint.Unsigned(params.lowPriceRange).div(FixedPoint.Unsigned(params.highPriceRange)).rawValue;\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/common/financial-product-libraries/long-short-pair-libraries/LongShortPairFinancialProductLibrary.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\nimport \"../../../../common/implementation/FixedPoint.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ninterface ExpiringContractInterface {\n    function expirationTimestamp() external view returns (uint256);\n}\n\nabstract contract LongShortPairFinancialProductLibrary {\n    function percentageLongCollateralAtExpiry(int256 expiryPrice) public view virtual returns (uint256);\n}\n"
    },
    "contracts/UMA/common/implementation/Lockable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\n */\ncontract Lockable {\n    bool private _notEntered;\n\n    constructor() {\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\n        // refund coming into effect.\n        _notEntered = true;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\n     * function that does the actual state modification.\n     */\n    modifier nonReentrant() {\n        _preEntranceCheck();\n        _preEntranceSet();\n        _;\n        _postEntranceReset();\n    }\n\n    /**\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\n     */\n    modifier nonReentrantView() {\n        _preEntranceCheck();\n        _;\n    }\n\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\n    // then call `_postEntranceReset()`.\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\n    function _preEntranceCheck() internal view {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n    }\n\n    function _preEntranceSet() internal {\n        // Any calls to nonReentrant after this point will fail\n        _notEntered = false;\n    }\n\n    function _postEntranceReset() internal {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _notEntered = true;\n    }\n\n    // These functions are intended to be used by child contracts to temporarily disable and re-enable the guard.\n    // Intended use:\n    // _startReentrantGuardDisabled();\n    // ...\n    // _endReentrantGuardDisabled();\n    //\n    // IMPORTANT: these should NEVER be used in a method that isn't inside a nonReentrant block. Otherwise, it's\n    // possible to permanently lock your contract.\n    function _startReentrantGuardDisabled() internal {\n        _notEntered = true;\n    }\n\n    function _endReentrantGuardDisabled() internal {\n        _notEntered = false;\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/SkinnyOptimisticOracleV2.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"../interfaces/StoreInterface.sol\";\nimport \"../interfaces/OracleAncillaryInterface.sol\";\nimport \"../interfaces/OptimisticOracleInterface.sol\";\nimport \"../interfaces/SkinnyOptimisticOracleV2Interface.sol\";\nimport \"../interfaces/FinderInterface.sol\";\nimport \"../interfaces/IdentifierWhitelistInterface.sol\";\nimport \"./Constants.sol\";\n\nimport \"../../common/implementation/Testable.sol\";\nimport \"../../common/implementation/Lockable.sol\";\nimport \"../../common/implementation/FixedPoint.sol\";\nimport \"../../common/implementation/AncillaryData.sol\";\nimport \"../../common/implementation/AddressWhitelist.sol\";\n\n/**\n * @title Optimistic Requester.\n * @notice Optional interface that requesters can implement to receive callbacks.\n * @dev This contract does _not_ work with ERC777 collateral currencies or any others that call into the receiver on\n * transfer(). Using an ERC777 token would allow a user to maliciously grief other participants (while also losing\n * money themselves).\n */\ninterface OptimisticRequesterV2 {\n    /**\n     * @notice Callback for proposals.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request request params after proposal.\n     */\n    function priceProposed(\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        SkinnyOptimisticOracleV2Interface.Request memory request\n    ) external;\n\n    /**\n     * @notice Callback for disputes.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request request params after dispute.\n     */\n    function priceDisputed(\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        SkinnyOptimisticOracleV2Interface.Request memory request\n    ) external;\n\n    /**\n     * @notice Callback for settlement.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request request params after settlement.\n     */\n    function priceSettled(\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        SkinnyOptimisticOracleV2Interface.Request memory request\n    ) external;\n}\n\n/**\n * @title Optimistic Oracle with a different interface and fewer features that emphasizes gas cost reductions.\n * @notice Pre-DVM escalation contract that allows faster settlement.\n */\ncontract SkinnyOptimisticOracleV2 is SkinnyOptimisticOracleV2Interface, Testable, Lockable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    event RequestPrice(\n        address indexed requester,\n        bytes32 indexed identifier,\n        uint32 timestamp,\n        bytes ancillaryData,\n        Request request\n    );\n    event ProposePrice(\n        address indexed requester,\n        bytes32 indexed identifier,\n        uint32 timestamp,\n        bytes ancillaryData,\n        Request request\n    );\n    event DisputePrice(\n        address indexed requester,\n        bytes32 indexed identifier,\n        uint32 timestamp,\n        bytes ancillaryData,\n        Request request\n    );\n    event Settle(\n        address indexed requester,\n        bytes32 indexed identifier,\n        uint32 timestamp,\n        bytes ancillaryData,\n        Request request\n    );\n\n    // Maps hash of unique request params {identifier, timestamp, ancillary data} to customizable variables such as\n    // reward and bond amounts.\n    mapping(bytes32 => bytes32) public requests;\n\n    // Finder to provide addresses for DVM contracts.\n    FinderInterface public finder;\n\n    // Default liveness value for all price requests.\n    uint256 public defaultLiveness;\n\n    /**\n     * @notice Constructor.\n     * @param _liveness default liveness applied to each price request.\n     * @param _finderAddress finder to use to get addresses of DVM contracts.\n     * @param _timerAddress address of the timer contract. Should be 0x0 in prod.\n     */\n    constructor(\n        uint256 _liveness,\n        address _finderAddress,\n        address _timerAddress\n    ) Testable(_timerAddress) {\n        finder = FinderInterface(_finderAddress);\n        _validateLiveness(_liveness);\n        defaultLiveness = _liveness;\n    }\n\n    /**\n     * @notice Requests a new price.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\n     *               which could make sense if the contract requests and proposes the value in the same call or\n     *               provides its own reward system.\n     * @param requestSettings settings for the request.\n     * @return totalBond default bond + final fee that the proposer and disputer will be required to pay.\n     */\n    function requestPrice(\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        IERC20 currency,\n        uint256 reward,\n        RequestSettings memory requestSettings\n    ) external override nonReentrant() returns (uint256 totalBond) {\n        bytes32 requestId = _getId(msg.sender, identifier, timestamp, ancillaryData);\n        require(requests[requestId] == bytes32(0), \"Request already initialized\");\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier), \"Unsupported identifier\");\n        require(_getCollateralWhitelist().isOnWhitelist(address(currency)), \"Unsupported currency\");\n        require(timestamp <= getCurrentTime(), \"Timestamp in future\");\n        require(\n            _stampAncillaryData(ancillaryData, msg.sender).length <= ancillaryBytesLimit,\n            \"Ancillary Data too long\"\n        );\n        uint256 finalFee = _getStore().computeFinalFee(address(currency)).rawValue;\n\n        // Associate new request with ID\n        Request memory request;\n        request.currency = currency;\n        request.reward = reward;\n        request.finalFee = finalFee;\n        request.requestSettings = requestSettings;\n        request.requestSettings.bond = requestSettings.bond != 0 ? requestSettings.bond : finalFee;\n        _storeRequestHash(requestId, request);\n\n        if (reward > 0) currency.safeTransferFrom(msg.sender, address(this), reward);\n\n        emit RequestPrice(msg.sender, identifier, timestamp, ancillaryData, request);\n\n        return request.requestSettings.bond.add(finalFee);\n    }\n\n    /**\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\n     * from this proposal. However, any bonds are pulled from the caller.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters whose hash must match the request that the caller wants to\n     * propose a price for.\n     * @param proposer address to set as the proposer.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function proposePriceFor(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request,\n        address proposer,\n        int256 proposedPrice\n    ) public override nonReentrant() returns (uint256 totalBond) {\n        require(proposer != address(0), \"Proposer address must be non 0\");\n        require(\n            _getState(requester, identifier, timestamp, ancillaryData, request) ==\n                OptimisticOracleInterface.State.Requested,\n            \"Must be requested\"\n        );\n        bytes32 requestId = _getId(requester, identifier, timestamp, ancillaryData);\n        _validateRequestHash(requestId, request);\n\n        // Associate newly proposed request params with ID\n        Request memory proposedRequest =\n            Request({\n                proposer: proposer, // Modified\n                disputer: request.disputer,\n                currency: request.currency,\n                settled: request.settled,\n                proposedPrice: proposedPrice, // Modified\n                resolvedPrice: request.resolvedPrice,\n                expirationTime: getCurrentTime().add(\n                    request.requestSettings.customLiveness != 0\n                        ? request.requestSettings.customLiveness\n                        : defaultLiveness\n                ), // Modified\n                reward: request.reward,\n                finalFee: request.finalFee,\n                requestSettings: request.requestSettings\n            });\n        _storeRequestHash(requestId, proposedRequest);\n\n        totalBond = request.requestSettings.bond.add(request.finalFee);\n        if (totalBond > 0) request.currency.safeTransferFrom(msg.sender, address(this), totalBond);\n\n        emit ProposePrice(requester, identifier, timestamp, ancillaryData, proposedRequest);\n\n        // Callback.\n        if (address(requester).isContract() && request.requestSettings.callbackOnPriceProposed)\n            OptimisticRequesterV2(requester).priceProposed(identifier, timestamp, ancillaryData, proposedRequest);\n    }\n\n    /**\n     * @notice Proposes a price value where caller is the proposer.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters whose hash must match the request that the caller wants to\n     * propose a price for.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function proposePrice(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request,\n        int256 proposedPrice\n    ) external override returns (uint256 totalBond) {\n        // Note: re-entrancy guard is done in the inner call.\n        return proposePriceFor(requester, identifier, timestamp, ancillaryData, request, msg.sender, proposedPrice);\n    }\n\n    /**\n     * @notice Combines logic of requestPrice and proposePrice while taking advantage of gas savings from not having to\n     * overwrite Request params that a normal requestPrice() => proposePrice() flow would entail. Note: The proposer\n     * will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.\n     * @dev The caller is the requester, but the proposer can be customized.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\n     *               which could make sense if the contract requests and proposes the value in the same call or\n     *               provides its own reward system.\n     * @param requestSettings settings for the request.\n     * @param proposer address to set as the proposer.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function requestAndProposePriceFor(\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        IERC20 currency,\n        uint256 reward,\n        RequestSettings memory requestSettings,\n        address proposer,\n        int256 proposedPrice\n    ) external override nonReentrant() returns (uint256 totalBond) {\n        bytes32 requestId = _getId(msg.sender, identifier, timestamp, ancillaryData);\n        require(requests[requestId] == bytes32(0), \"Request already initialized\");\n        require(proposer != address(0), \"proposer address must be non 0\");\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier), \"Unsupported identifier\");\n        require(_getCollateralWhitelist().isOnWhitelist(address(currency)), \"Unsupported currency\");\n        require(timestamp <= getCurrentTime(), \"Timestamp in future\");\n        require(\n            _stampAncillaryData(ancillaryData, msg.sender).length <= ancillaryBytesLimit,\n            \"Ancillary Data too long\"\n        );\n        uint256 finalFee = _getStore().computeFinalFee(address(currency)).rawValue;\n\n        // Associate new request with ID\n        Request memory request;\n        request.currency = currency;\n        request.reward = reward;\n        request.finalFee = finalFee;\n        request.requestSettings = requestSettings;\n        request.requestSettings.bond = requestSettings.bond != 0 ? requestSettings.bond : finalFee;\n        request.proposer = proposer;\n        request.proposedPrice = proposedPrice;\n        request.expirationTime = getCurrentTime().add(\n            requestSettings.customLiveness != 0 ? requestSettings.customLiveness : defaultLiveness\n        );\n        _storeRequestHash(requestId, request);\n\n        // Pull reward from requester, who is the caller.\n        if (reward > 0) currency.safeTransferFrom(msg.sender, address(this), reward);\n        // Pull proposal bond from caller.\n        totalBond = request.requestSettings.bond.add(request.finalFee);\n        if (totalBond > 0) currency.safeTransferFrom(msg.sender, address(this), totalBond);\n\n        emit RequestPrice(msg.sender, identifier, timestamp, ancillaryData, request);\n        emit ProposePrice(msg.sender, identifier, timestamp, ancillaryData, request);\n\n        // Callback.\n        if (address(msg.sender).isContract() && requestSettings.callbackOnPriceProposed)\n            OptimisticRequesterV2(msg.sender).priceProposed(identifier, timestamp, ancillaryData, request);\n    }\n\n    /**\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters whose hash must match the request that the caller wants to\n     *              dispute.\n     * @param disputer address to set as the disputer.\n     * @param requester sender of the initial price request.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\n     */\n    function disputePriceFor(\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request,\n        address disputer,\n        address requester\n    ) public override nonReentrant() returns (uint256 totalBond) {\n        require(disputer != address(0), \"disputer address must be non 0\");\n        require(\n            _getState(requester, identifier, timestamp, ancillaryData, request) ==\n                OptimisticOracleInterface.State.Proposed,\n            \"Must be proposed\"\n        );\n        bytes32 requestId = _getId(requester, identifier, timestamp, ancillaryData);\n        _validateRequestHash(requestId, request);\n\n        // Associate newly disputed request params with ID\n        Request memory disputedRequest =\n            Request({\n                proposer: request.proposer,\n                disputer: disputer, // Modified\n                currency: request.currency,\n                settled: request.settled,\n                proposedPrice: request.proposedPrice,\n                resolvedPrice: request.resolvedPrice,\n                expirationTime: request.expirationTime,\n                reward: request.reward,\n                finalFee: request.finalFee,\n                requestSettings: request.requestSettings\n            });\n        _storeRequestHash(requestId, disputedRequest);\n\n        totalBond = request.requestSettings.bond.add(request.finalFee);\n        if (totalBond > 0) request.currency.safeTransferFrom(msg.sender, address(this), totalBond);\n\n        StoreInterface store = _getStore();\n\n        // Avoids stack too deep compilation error.\n        {\n            // Along with the final fee, \"burn\" part of the loser's bond to ensure that a larger bond always makes it\n            // proportionally more expensive to delay the resolution even if the proposer and disputer are the same\n            // party.\n            uint256 burnedBond = _computeBurnedBond(disputedRequest);\n\n            // The total fee is the burned bond and the final fee added together.\n            uint256 totalFee = request.finalFee.add(burnedBond);\n\n            if (totalFee > 0) {\n                request.currency.safeIncreaseAllowance(address(store), totalFee);\n                _getStore().payOracleFeesErc20(address(request.currency), FixedPoint.Unsigned(totalFee));\n            }\n        }\n\n        _getOracle().requestPrice(identifier, timestamp, _stampAncillaryData(ancillaryData, requester));\n\n        emit DisputePrice(requester, identifier, timestamp, ancillaryData, disputedRequest);\n\n        // Callback.\n        if (address(requester).isContract() && request.requestSettings.callbackOnPriceDisputed)\n            OptimisticRequesterV2(requester).priceDisputed(identifier, timestamp, ancillaryData, disputedRequest);\n    }\n\n    /**\n     * @notice Disputes a price request with an active proposal where caller is the disputer.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters whose hash must match the request that the caller wants to\n     *             dispute.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\n     */\n    function disputePrice(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request\n    ) external override returns (uint256 totalBond) {\n        // Note: re-entrancy guard is done in the inner call.\n        return disputePriceFor(identifier, timestamp, ancillaryData, request, msg.sender, requester);\n    }\n\n    /**\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters whose hash must match the request that the caller wants to\n     *              settle.\n     * @return payout the amount that the \"winner\" (proposer or disputer) receives on settlement. This amount includes\n     * the returned bonds as well as additional rewards.\n     * @return resolvedPrice the price that the request settled to.\n     */\n    function settle(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request\n    ) external override nonReentrant() returns (uint256 payout, int256 resolvedPrice) {\n        return _settle(requester, identifier, timestamp, ancillaryData, request);\n    }\n\n    /**\n     * @notice Computes the current state of a price request. See the State enum for more details.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters.\n     * @return the State.\n     */\n    function getState(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request\n    ) external override nonReentrant() returns (OptimisticOracleInterface.State) {\n        return _getState(requester, identifier, timestamp, ancillaryData, request);\n    }\n\n    /**\n     * @notice Checks if a given request has resolved, expired or been settled (i.e the optimistic oracle has a price).\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters. The hash of these parameters must match with the request hash that is\n     * associated with the price request unique ID {requester, identifier, timestamp, ancillaryData}, or this method\n     * will revert.\n     * @return boolean indicating true if price exists and false if not.\n     */\n    function hasPrice(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request\n    ) public override nonReentrant() returns (bool) {\n        bytes32 requestId = _getId(requester, identifier, timestamp, ancillaryData);\n        _validateRequestHash(requestId, request);\n        OptimisticOracleInterface.State state = _getState(requester, identifier, timestamp, ancillaryData, request);\n        return\n            state == OptimisticOracleInterface.State.Settled ||\n            state == OptimisticOracleInterface.State.Resolved ||\n            state == OptimisticOracleInterface.State.Expired;\n    }\n\n    /**\n     * @notice Generates stamped ancillary data in the format that it would be used in the case of a price dispute.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param requester sender of the initial price request.\n     * @return the stamped ancillary bytes.\n     */\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\n        public\n        pure\n        override\n        returns (bytes memory)\n    {\n        return _stampAncillaryData(ancillaryData, requester);\n    }\n\n    /****************************************\n     *    PRIVATE AND INTERNAL FUNCTIONS    *\n     ****************************************/\n    // Returns hash of unique request identifiers. This contract maps request ID hashes to hashes of the request's\n    // parameters.\n    function _getId(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData\n    ) private pure returns (bytes32) {\n        return keccak256(abi.encode(requester, identifier, timestamp, ancillaryData));\n    }\n\n    // Returns hash of request parameters. These are mapped to the unique request ID to track a request's lifecycle.\n    function _getRequestHash(Request memory request) private pure returns (bytes32) {\n        return keccak256(abi.encode(request));\n    }\n\n    // Resolves a price request that has expired or been disputed and a price is available from the DVM. This will\n    // revert if the unique request ID does not match the hashed request parameters. This also marks the request\n    // as settled, therefore this method can only be triggered once per eligible request.\n    function _settle(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request\n    ) private returns (uint256 payout, int256 resolvedPrice) {\n        bytes32 requestId = _getId(requester, identifier, timestamp, ancillaryData);\n        _validateRequestHash(requestId, request);\n\n        // Associate settled request params with ID.\n        Request memory settledRequest =\n            Request({\n                proposer: request.proposer,\n                disputer: request.disputer,\n                currency: request.currency,\n                settled: true, // Modified\n                proposedPrice: request.proposedPrice,\n                resolvedPrice: request.resolvedPrice,\n                expirationTime: request.expirationTime,\n                reward: request.reward,\n                finalFee: request.finalFee,\n                requestSettings: request.requestSettings\n            });\n\n        OptimisticOracleInterface.State state = _getState(requester, identifier, timestamp, ancillaryData, request);\n        if (state == OptimisticOracleInterface.State.Expired) {\n            // In the expiry case, just pay back the proposer's bond and final fee along with the reward.\n            resolvedPrice = request.proposedPrice;\n            settledRequest.resolvedPrice = resolvedPrice;\n            payout = request.requestSettings.bond.add(request.finalFee).add(request.reward);\n            request.currency.safeTransfer(request.proposer, payout);\n        } else if (state == OptimisticOracleInterface.State.Resolved) {\n            // In the Resolved case, pay either the disputer or the proposer the entire payout (+ bond and reward).\n            resolvedPrice = _getOracle().getPrice(identifier, timestamp, _stampAncillaryData(ancillaryData, requester));\n            settledRequest.resolvedPrice = resolvedPrice;\n            bool disputeSuccess = settledRequest.resolvedPrice != request.proposedPrice;\n\n            // Winner gets:\n            // - Their bond back.\n            // - The unburned portion of the loser's bond: proposal bond (not including final fee) - burned bond.\n            // - Their final fee back.\n            // - The request reward (if not already refunded -- if refunded, it will be set to 0).\n            payout = request\n                .requestSettings\n                .bond\n                .add(request.requestSettings.bond.sub(_computeBurnedBond(settledRequest)))\n                .add(request.finalFee)\n                .add(request.reward);\n            request.currency.safeTransfer(disputeSuccess ? request.disputer : request.proposer, payout);\n        } else {\n            revert(\"Already settled or not settleable\");\n        }\n\n        _storeRequestHash(requestId, settledRequest);\n        emit Settle(requester, identifier, timestamp, ancillaryData, settledRequest);\n\n        // Callback.\n        if (address(requester).isContract() && request.requestSettings.callbackOnPriceSettled)\n            OptimisticRequesterV2(requester).priceSettled(identifier, timestamp, ancillaryData, settledRequest);\n    }\n\n    function _computeBurnedBond(Request memory request) private pure returns (uint256) {\n        // burnedBond = floor(bond / 2)\n        return request.requestSettings.bond.div(2);\n    }\n\n    function _validateLiveness(uint256 liveness) private pure {\n        require(liveness < 5200 weeks, \"Liveness too large\");\n        require(liveness > 0, \"Liveness cannot be 0\");\n    }\n\n    function _validateRequestHash(bytes32 requestId, Request memory request) private view {\n        require(\n            requests[requestId] == _getRequestHash(request),\n            \"Hashed request params do not match existing request hash\"\n        );\n    }\n\n    function _storeRequestHash(bytes32 requestId, Request memory request) internal {\n        requests[requestId] = _getRequestHash(request);\n    }\n\n    function _getState(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request\n    ) internal view returns (OptimisticOracleInterface.State) {\n        // Note: This function does not check whether all of the _request parameter values are correct. For example,\n        // the request.reward could be any value and it would not impact this function's return value. Therefore, it\n        // is the caller's responsibility to check that _request matches with the expected ID corresponding to\n        // {requester, identifier, timestamp, ancillaryData} via _validateRequestHash().\n        if (address(request.currency) == address(0)) return OptimisticOracleInterface.State.Invalid;\n\n        if (request.proposer == address(0)) return OptimisticOracleInterface.State.Requested;\n\n        if (request.settled) return OptimisticOracleInterface.State.Settled;\n\n        if (request.disputer == address(0))\n            return\n                request.expirationTime <= getCurrentTime()\n                    ? OptimisticOracleInterface.State.Expired\n                    : OptimisticOracleInterface.State.Proposed;\n\n        return\n            _getOracle().hasPrice(identifier, timestamp, _stampAncillaryData(ancillaryData, requester))\n                ? OptimisticOracleInterface.State.Resolved\n                : OptimisticOracleInterface.State.Disputed;\n    }\n\n    function _getOracle() internal view returns (OracleAncillaryInterface) {\n        return OracleAncillaryInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\n    }\n\n    function _getCollateralWhitelist() internal view returns (AddressWhitelist) {\n        return AddressWhitelist(finder.getImplementationAddress(OracleInterfaces.CollateralWhitelist));\n    }\n\n    function _getStore() internal view returns (StoreInterface) {\n        return StoreInterface(finder.getImplementationAddress(OracleInterfaces.Store));\n    }\n\n    function _getIdentifierWhitelist() internal view returns (IdentifierWhitelistInterface) {\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\n    }\n\n    /**\n     * @dev We don't handle specifically the case where `ancillaryData` is not already readily translateable in utf8.\n     * For those cases, we assume that the client will be able to strip out the utf8-translateable part of the\n     * ancillary data that this contract stamps.\n     */\n    function _stampAncillaryData(bytes memory ancillaryData, address requester) internal pure returns (bytes memory) {\n        // Since this contract will be the one to formally submit DVM price requests, its useful for voters to know who\n        // the original requester was.\n        return AncillaryData.appendKeyValueAddress(ancillaryData, \"ooRequester\", requester);\n    }\n}\n\n/**\n * @notice This is the SkinnyOptimisticOracle contract that should be deployed on live networks. It is exactly the same\n * as the regular SkinnyOptimisticOracle contract, but it overrides getCurrentTime to make the call a simply return\n * block.timestamp with no branching or storage queries.\n */\ncontract SkinnyOptimisticOracleV2Prod is SkinnyOptimisticOracleV2 {\n    constructor(\n        uint256 _liveness,\n        address _finderAddress,\n        address _timerAddress\n    ) SkinnyOptimisticOracleV2(_liveness, _finderAddress, _timerAddress) {}\n\n    function getCurrentTime() public view virtual override returns (uint256) {\n        return block.timestamp;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/UMA/oracle/interfaces/StoreInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../common/implementation/FixedPoint.sol\";\n\n/**\n * @title Interface that allows financial contracts to pay oracle fees for their use of the system.\n */\ninterface StoreInterface {\n    /**\n     * @notice Pays Oracle fees in ETH to the store.\n     * @dev To be used by contracts whose margin currency is ETH.\n     */\n    function payOracleFees() external payable;\n\n    /**\n     * @notice Pays oracle fees in the margin currency, erc20Address, to the store.\n     * @dev To be used if the margin currency is an ERC20 token rather than ETH.\n     * @param erc20Address address of the ERC20 token used to pay the fee.\n     * @param amount number of tokens to transfer. An approval for at least this amount must exist.\n     */\n    function payOracleFeesErc20(address erc20Address, FixedPoint.Unsigned calldata amount) external;\n\n    /**\n     * @notice Computes the regular oracle fees that a contract should pay for a period.\n     * @param startTime defines the beginning time from which the fee is paid.\n     * @param endTime end time until which the fee is paid.\n     * @param pfc \"profit from corruption\", or the maximum amount of margin currency that a\n     * token sponsor could extract from the contract through corrupting the price feed in their favor.\n     * @return regularFee amount owed for the duration from start to end time for the given pfc.\n     * @return latePenalty for paying the fee after the deadline.\n     */\n    function computeRegularFee(\n        uint256 startTime,\n        uint256 endTime,\n        FixedPoint.Unsigned calldata pfc\n    ) external view returns (FixedPoint.Unsigned memory regularFee, FixedPoint.Unsigned memory latePenalty);\n\n    /**\n     * @notice Computes the final oracle fees that a contract should pay at settlement.\n     * @param currency token used to pay the final fee.\n     * @return finalFee amount due.\n     */\n    function computeFinalFee(address currency) external view returns (FixedPoint.Unsigned memory);\n}\n"
    },
    "contracts/UMA/oracle/interfaces/OptimisticOracleInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./FinderInterface.sol\";\n\n/**\n * @title Financial contract facing Oracle interface.\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\n */\nabstract contract OptimisticOracleInterface {\n    event RequestPrice(\n        address indexed requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes ancillaryData,\n        address currency,\n        uint256 reward,\n        uint256 finalFee\n    );\n    event ProposePrice(\n        address indexed requester,\n        address indexed proposer,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes ancillaryData,\n        int256 proposedPrice,\n        uint256 expirationTimestamp,\n        address currency\n    );\n    event DisputePrice(\n        address indexed requester,\n        address indexed proposer,\n        address indexed disputer,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes ancillaryData,\n        int256 proposedPrice\n    );\n    event Settle(\n        address indexed requester,\n        address indexed proposer,\n        address indexed disputer,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes ancillaryData,\n        int256 price,\n        uint256 payout\n    );\n\n    // Struct representing the state of a price request.\n    enum State {\n        Invalid, // Never requested.\n        Requested, // Requested, no other actions taken.\n        Proposed, // Proposed, but not expired or disputed yet.\n        Expired, // Proposed, not disputed, past liveness.\n        Disputed, // Disputed, but no DVM price returned yet.\n        Resolved, // Disputed and DVM price is available.\n        Settled // Final price has been set in the contract (can get here from Expired or Resolved).\n    }\n\n    // Struct representing a price request.\n    struct Request {\n        address proposer; // Address of the proposer.\n        address disputer; // Address of the disputer.\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\n        bool settled; // True if the request is settled.\n        bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\n        int256 proposedPrice; // Price that the proposer submitted.\n        int256 resolvedPrice; // Price resolved once the request is settled.\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\n        uint256 customLiveness; // Custom liveness value set by the requester.\n    }\n\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\n    // to accept a price request made with ancillary data length over a certain size.\n    uint256 public constant ancillaryBytesLimit = 8192;\n\n    function defaultLiveness() external view virtual returns (uint256);\n\n    function finder() external view virtual returns (FinderInterface);\n\n    function getCurrentTime() external view virtual returns (uint256);\n\n    // Note: this is required so that typechain generates a return value with named fields.\n    mapping(bytes32 => Request) public requests;\n\n    /**\n     * @notice Requests a new price.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\n     *               which could make sense if the contract requests and proposes the value in the same call or\n     *               provides its own reward system.\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\n     * This can be changed with a subsequent call to setBond().\n     */\n    function requestPrice(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        IERC20 currency,\n        uint256 reward\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Set the proposal bond associated with a price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param bond custom bond amount to set.\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\n     * changed again with a subsequent call to setBond().\n     */\n    function setBond(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        uint256 bond\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \"hedge\" the caller\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\n     * bond, so there is still profit to be made even if the reward is refunded.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     */\n    function setRefundOnDispute(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external virtual;\n\n    /**\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\n     * being auto-resolved.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param customLiveness new custom liveness.\n     */\n    function setCustomLiveness(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        uint256 customLiveness\n    ) external virtual;\n\n    /**\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\n     * from this proposal. However, any bonds are pulled from the caller.\n     * @param proposer address to set as the proposer.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function proposePriceFor(\n        address proposer,\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        int256 proposedPrice\n    ) public virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Proposes a price value for an existing price request.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function proposePrice(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        int256 proposedPrice\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\n     * @param disputer address to set as the disputer.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the disputer once settled if the dispute was value (the proposal was incorrect).\n     */\n    function disputePriceFor(\n        address disputer,\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) public virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Disputes a price value for an existing price request with an active proposal.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\n     */\n    function disputePrice(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\n     * hasn't been settled.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return resolved price.\n     */\n    function settleAndGetPrice(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external virtual returns (int256);\n\n    /**\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return payout the amount that the \"winner\" (proposer or disputer) receives on settlement. This amount includes\n     * the returned bonds as well as additional rewards.\n     */\n    function settle(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external virtual returns (uint256 payout);\n\n    /**\n     * @notice Gets the current data structure containing all information about a price request.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return the Request data structure.\n     */\n    function getRequest(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) public view virtual returns (Request memory);\n\n    /**\n     * @notice Returns the state of a price request.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return the State enum value.\n     */\n    function getState(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) public view virtual returns (State);\n\n    /**\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return true if price has resolved or settled, false otherwise.\n     */\n    function hasPrice(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) public view virtual returns (bool);\n\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\n        public\n        view\n        virtual\n        returns (bytes memory);\n}\n"
    },
    "contracts/UMA/oracle/interfaces/SkinnyOptimisticOracleV2Interface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/OptimisticOracleInterface.sol\";\n\n/**\n * @title Interface for the gas-cost-reduced version of the OptimisticOracle.\n * @notice Differences from normal OptimisticOracle:\n * - refundOnDispute: flag is removed, by default there are no refunds on disputes.\n * - customizing request parameters: In the OptimisticOracle, parameters like `bond` and `customLiveness` can be reset\n *   after a request is already made via `requestPrice`. In the SkinnyOptimisticOracle, these parameters can only be\n *   set in `requestPrice`, which has an expanded input set.\n * - settleAndGetPrice: Replaced by `settle`, which can only be called once per settleable request. The resolved price\n *   can be fetched via the `Settle` event or the return value of `settle`.\n * - general changes to interface: Functions that interact with existing requests all require the parameters of the\n *   request to modify to be passed as input. These parameters must match with the existing request parameters or the\n *   function will revert. This change reflects the internal refactor to store hashed request parameters instead of the\n *   full request struct.\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\n */\nabstract contract SkinnyOptimisticOracleV2Interface {\n    struct RequestSettings {\n        bool callbackOnPriceProposed; // True if callbackOnPriceProposed callback is required.\n        bool callbackOnPriceDisputed; // True if callbackOnPriceDisputed callback is required.\n        bool callbackOnPriceSettled; // True if callbackOnPriceSettled callback is required.\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\n        uint256 customLiveness; // Custom liveness value set by the requester.\n    }\n\n    // Struct representing a price request. Note that this differs from the OptimisticOracleInterface's Request struct\n    // in that refundOnDispute is removed.\n    struct Request {\n        address proposer; // Address of the proposer.\n        address disputer; // Address of the disputer.\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\n        bool settled; // True if the request is settled.\n        RequestSettings requestSettings; // Custom settings associated with a request.\n        int256 proposedPrice; // Price that the proposer submitted.\n        int256 resolvedPrice; // Price resolved once the request is settled.\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\n    }\n\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\n    // to accept a price request made with ancillary data length over a certain size.\n    uint256 public constant ancillaryBytesLimit = 8192;\n\n    /**\n     * @notice Requests a new price.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\n     *               which could make sense if the contract requests and proposes the value in the same call or\n     *               provides its own reward system.\n     * @param requestSettings settings for the request.\n     * @return totalBond default bond + final fee that the proposer and disputer will be required to pay.\n     */\n    function requestPrice(\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        IERC20 currency,\n        uint256 reward,\n        RequestSettings memory requestSettings\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\n     * from this proposal. However, any bonds are pulled from the caller.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters whose hash must match the request that the caller wants to\n     * propose a price for.\n     * @param proposer address to set as the proposer.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function proposePriceFor(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request,\n        address proposer,\n        int256 proposedPrice\n    ) public virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Proposes a price value where caller is the proposer.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters whose hash must match the request that the caller wants to\n     * propose a price for.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function proposePrice(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request,\n        int256 proposedPrice\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Combines logic of requestPrice and proposePrice while taking advantage of gas savings from not having to\n     * overwrite Request params that a normal requestPrice() => proposePrice() flow would entail. Note: The proposer\n     * will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.\n     * @dev The caller is the requester, but the proposer can be customized.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\n     *               which could make sense if the contract requests and proposes the value in the same call or\n     *               provides its own reward system.\n     * @param requestSettings settings for the request.\n     * @param proposer address to set as the proposer.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function requestAndProposePriceFor(\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        IERC20 currency,\n        uint256 reward,\n        RequestSettings memory requestSettings,\n        address proposer,\n        int256 proposedPrice\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters whose hash must match the request that the caller wants to\n     * dispute.\n     * @param disputer address to set as the disputer.\n     * @param requester sender of the initial price request.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\n     */\n    function disputePriceFor(\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request,\n        address disputer,\n        address requester\n    ) public virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Disputes a price request with an active proposal where caller is the disputer.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters whose hash must match the request that the caller wants to\n     * dispute.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\n     */\n    function disputePrice(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters whose hash must match the request that the caller wants to\n     * settle.\n     * @return payout the amount that the \"winner\" (proposer or disputer) receives on settlement. This amount includes\n     * the returned bonds as well as additional rewards.\n     * @return resolvedPrice the price that the request settled to.\n     */\n    function settle(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request\n    ) external virtual returns (uint256 payout, int256 resolvedPrice);\n\n    /**\n     * @notice Computes the current state of a price request. See the State enum for more details.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters.\n     * @return the State.\n     */\n    function getState(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request\n    ) external virtual returns (OptimisticOracleInterface.State);\n\n    /**\n     * @notice Checks if a given request has resolved, expired or been settled (i.e the optimistic oracle has a price).\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters. The hash of these parameters must match with the request hash that is\n     * associated with the price request unique ID {requester, identifier, timestamp, ancillaryData}, or this method\n     * will revert.\n     * @return boolean indicating true if price exists and false if not.\n     */\n    function hasPrice(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request\n    ) public virtual returns (bool);\n\n    /**\n     * @notice Generates stamped ancillary data in the format that it would be used in the case of a price dispute.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param requester sender of the initial price request.\n     * @return the stamped ancillary bytes.\n     */\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\n        public\n        pure\n        virtual\n        returns (bytes memory);\n}\n"
    },
    "contracts/UMA/common/implementation/AddressWhitelist.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interfaces/AddressWhitelistInterface.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./Lockable.sol\";\n\n/**\n * @title A contract to track a whitelist of addresses.\n */\ncontract AddressWhitelist is AddressWhitelistInterface, Ownable, Lockable {\n    enum Status { None, In, Out }\n    mapping(address => Status) public whitelist;\n\n    address[] public whitelistIndices;\n\n    event AddedToWhitelist(address indexed addedAddress);\n    event RemovedFromWhitelist(address indexed removedAddress);\n\n    /**\n     * @notice Adds an address to the whitelist.\n     * @param newElement the new address to add.\n     */\n    function addToWhitelist(address newElement) external override nonReentrant() onlyOwner {\n        // Ignore if address is already included\n        if (whitelist[newElement] == Status.In) {\n            return;\n        }\n\n        // Only append new addresses to the array, never a duplicate\n        if (whitelist[newElement] == Status.None) {\n            whitelistIndices.push(newElement);\n        }\n\n        whitelist[newElement] = Status.In;\n\n        emit AddedToWhitelist(newElement);\n    }\n\n    /**\n     * @notice Removes an address from the whitelist.\n     * @param elementToRemove the existing address to remove.\n     */\n    function removeFromWhitelist(address elementToRemove) external override nonReentrant() onlyOwner {\n        if (whitelist[elementToRemove] != Status.Out) {\n            whitelist[elementToRemove] = Status.Out;\n            emit RemovedFromWhitelist(elementToRemove);\n        }\n    }\n\n    /**\n     * @notice Checks whether an address is on the whitelist.\n     * @param elementToCheck the address to check.\n     * @return True if `elementToCheck` is on the whitelist, or False.\n     */\n    function isOnWhitelist(address elementToCheck) external view override nonReentrantView() returns (bool) {\n        return whitelist[elementToCheck] == Status.In;\n    }\n\n    /**\n     * @notice Gets all addresses that are currently included in the whitelist.\n     * @dev Note: This method skips over, but still iterates through addresses. It is possible for this call to run out\n     * of gas if a large number of addresses have been removed. To reduce the likelihood of this unlikely scenario, we\n     * can modify the implementation so that when addresses are removed, the last addresses in the array is moved to\n     * the empty index.\n     * @return activeWhitelist the list of addresses on the whitelist.\n     */\n    function getWhitelist() external view override nonReentrantView() returns (address[] memory activeWhitelist) {\n        // Determine size of whitelist first\n        uint256 activeCount = 0;\n        for (uint256 i = 0; i < whitelistIndices.length; i++) {\n            if (whitelist[whitelistIndices[i]] == Status.In) {\n                activeCount++;\n            }\n        }\n\n        // Populate whitelist\n        activeWhitelist = new address[](activeCount);\n        activeCount = 0;\n        for (uint256 i = 0; i < whitelistIndices.length; i++) {\n            address addr = whitelistIndices[i];\n            if (whitelist[addr] == Status.In) {\n                activeWhitelist[activeCount] = addr;\n                activeCount++;\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/UMA/common/interfaces/AddressWhitelistInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\ninterface AddressWhitelistInterface {\n    function addToWhitelist(address newElement) external;\n\n    function removeFromWhitelist(address newElement) external;\n\n    function isOnWhitelist(address newElement) external view returns (bool);\n\n    function getWhitelist() external view returns (address[] memory);\n}\n"
    },
    "contracts/UMA/oracle/implementation/test/SkinnyOptimisticV2RequesterTest.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../../interfaces/StoreInterface.sol\";\nimport \"../../interfaces/FinderInterface.sol\";\nimport \"../SkinnyOptimisticOracleV2.sol\";\nimport \"../Constants.sol\";\n\n// This is just a test contract to make requests to the optimistic oracle.\ncontract SkinnyOptimisticV2RequesterTest {\n    using SafeMath for uint256;\n\n    SkinnyOptimisticOracleV2 optimisticOracle;\n    bool public shouldRevert = false;\n\n    // Finder to provide addresses for DVM contracts.\n    FinderInterface public finder;\n\n    // State variables to track incoming calls.\n    bytes32 public identifier;\n    uint32 public timestamp;\n    bytes public ancillaryData;\n    SkinnyOptimisticOracleV2.Request public request;\n\n    // Manually set an expiration timestamp to simulate expiry price requests\n    uint256 public expirationTimestamp;\n\n    constructor(SkinnyOptimisticOracleV2 _optimisticOracle, FinderInterface _finderAddress) {\n        optimisticOracle = _optimisticOracle;\n        finder = _finderAddress;\n    }\n\n    function requestAndProposePriceFor(\n        bytes32 _identifier,\n        uint32 _timestamp,\n        bytes memory _ancillaryData,\n        IERC20 currency,\n        uint256 reward,\n        SkinnyOptimisticOracleV2Interface.RequestSettings memory requestSettings,\n        address proposer,\n        int256 proposedPrice\n    ) external {\n        uint256 finalFee = _getStore().computeFinalFee(address(currency)).rawValue;\n\n        currency.approve(address(optimisticOracle), reward.add(requestSettings.bond).add(finalFee));\n        optimisticOracle.requestAndProposePriceFor(\n            _identifier,\n            _timestamp,\n            _ancillaryData,\n            currency,\n            reward,\n            requestSettings,\n            proposer,\n            proposedPrice\n        );\n    }\n\n    function requestPrice(\n        bytes32 _identifier,\n        uint32 _timestamp,\n        bytes memory _ancillaryData,\n        IERC20 currency,\n        uint256 reward,\n        SkinnyOptimisticOracleV2Interface.RequestSettings memory requestSettings\n    ) external {\n        currency.approve(address(optimisticOracle), reward);\n        optimisticOracle.requestPrice(_identifier, _timestamp, _ancillaryData, currency, reward, requestSettings);\n    }\n\n    function setExpirationTimestamp(uint256 _expirationTimestamp) external {\n        expirationTimestamp = _expirationTimestamp;\n    }\n\n    function setRevert(bool _shouldRevert) external {\n        shouldRevert = _shouldRevert;\n    }\n\n    function priceProposed(\n        bytes32 _identifier,\n        uint32 _timestamp,\n        bytes memory _ancillaryData,\n        SkinnyOptimisticOracleV2.Request memory _request\n    ) external {\n        require(!shouldRevert);\n        identifier = _identifier;\n        timestamp = _timestamp;\n        ancillaryData = _ancillaryData;\n        request = _request;\n    }\n\n    function priceDisputed(\n        bytes32 _identifier,\n        uint32 _timestamp,\n        bytes memory _ancillaryData,\n        SkinnyOptimisticOracleV2.Request memory _request\n    ) external {\n        require(!shouldRevert);\n        identifier = _identifier;\n        timestamp = _timestamp;\n        ancillaryData = _ancillaryData;\n        request = _request;\n    }\n\n    function priceSettled(\n        bytes32 _identifier,\n        uint32 _timestamp,\n        bytes memory _ancillaryData,\n        SkinnyOptimisticOracleV2.Request memory _request\n    ) external {\n        require(!shouldRevert);\n        identifier = _identifier;\n        timestamp = _timestamp;\n        ancillaryData = _ancillaryData;\n        request = _request;\n    }\n\n    function _getStore() internal view returns (StoreInterface) {\n        return StoreInterface(finder.getImplementationAddress(OracleInterfaces.Store));\n    }\n}\n"
    },
    "contracts/UMA/oracle/test/MockOracleAncillary.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/Testable.sol\";\nimport \"../interfaces/OracleAncillaryInterface.sol\";\nimport \"../interfaces/IdentifierWhitelistInterface.sol\";\nimport \"../interfaces/FinderInterface.sol\";\nimport \"../implementation/Constants.sol\";\n\n// A mock oracle used for testing.\ncontract MockOracleAncillary is OracleAncillaryInterface, Testable {\n    // Represents an available price. Have to keep a separate bool to allow for price=0.\n    struct Price {\n        bool isAvailable;\n        int256 price;\n        // Time the verified price became available.\n        uint256 verifiedTime;\n    }\n\n    // The two structs below are used in an array and mapping to keep track of prices that have been requested but are\n    // not yet available.\n    struct QueryIndex {\n        bool isValid;\n        uint256 index;\n    }\n\n    // Represents a (identifier, time) point that has been queried.\n    struct QueryPoint {\n        bytes32 identifier;\n        uint256 time;\n        bytes ancillaryData;\n    }\n\n    // Reference to the Finder.\n    FinderInterface private finder;\n\n    // Conceptually we want a (time, identifier) -> price map.\n    mapping(bytes32 => mapping(uint256 => mapping(bytes => Price))) internal verifiedPrices;\n\n    // The mapping and array allow retrieving all the elements in a mapping and finding/deleting elements.\n    // Can we generalize this data structure?\n    mapping(bytes32 => mapping(uint256 => mapping(bytes => QueryIndex))) internal queryIndices;\n    QueryPoint[] internal requestedPrices;\n\n    event PriceRequestAdded(address indexed requester, bytes32 indexed identifier, uint256 time, bytes ancillaryData);\n    event PushedPrice(\n        address indexed pusher,\n        bytes32 indexed identifier,\n        uint256 time,\n        bytes ancillaryData,\n        int256 price\n    );\n\n    constructor(address _finderAddress, address _timerAddress) Testable(_timerAddress) {\n        finder = FinderInterface(_finderAddress);\n    }\n\n    // Enqueues a request (if a request isn't already present) for the given (identifier, time) pair.\n\n    function requestPrice(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) public override {\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier));\n        Price storage lookup = verifiedPrices[identifier][time][ancillaryData];\n        if (!lookup.isAvailable && !queryIndices[identifier][time][ancillaryData].isValid) {\n            // New query, enqueue it for review.\n            queryIndices[identifier][time][ancillaryData] = QueryIndex(true, requestedPrices.length);\n            requestedPrices.push(QueryPoint(identifier, time, ancillaryData));\n            emit PriceRequestAdded(msg.sender, identifier, time, ancillaryData);\n        }\n    }\n\n    // Pushes the verified price for a requested query.\n    function pushPrice(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData,\n        int256 price\n    ) public {\n        verifiedPrices[identifier][time][ancillaryData] = Price(true, price, getCurrentTime());\n\n        QueryIndex storage queryIndex = queryIndices[identifier][time][ancillaryData];\n        require(queryIndex.isValid, \"Can't push prices that haven't been requested\");\n        // Delete from the array. Instead of shifting the queries over, replace the contents of `indexToReplace` with\n        // the contents of the last index (unless it is the last index).\n        uint256 indexToReplace = queryIndex.index;\n        delete queryIndices[identifier][time][ancillaryData];\n        uint256 lastIndex = requestedPrices.length - 1;\n        if (lastIndex != indexToReplace) {\n            QueryPoint storage queryToCopy = requestedPrices[lastIndex];\n            queryIndices[queryToCopy.identifier][queryToCopy.time][queryToCopy.ancillaryData].index = indexToReplace;\n            requestedPrices[indexToReplace] = queryToCopy;\n        }\n\n        emit PushedPrice(msg.sender, identifier, time, ancillaryData, price);\n    }\n\n    // Checks whether a price has been resolved.\n    function hasPrice(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) public view override returns (bool) {\n        Price storage lookup = verifiedPrices[identifier][time][ancillaryData];\n        return lookup.isAvailable;\n    }\n\n    // Gets a price that has already been resolved.\n    function getPrice(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) public view override returns (int256) {\n        Price storage lookup = verifiedPrices[identifier][time][ancillaryData];\n        require(lookup.isAvailable);\n        return lookup.price;\n    }\n\n    // Gets the queries that still need verified prices.\n    function getPendingQueries() external view returns (QueryPoint[] memory) {\n        return requestedPrices;\n    }\n\n    function _getIdentifierWhitelist() internal view returns (IdentifierWhitelistInterface supportedIdentifiers) {\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\n    }\n}\n"
    },
    "contracts/UMA/oracle/test/MockOracleGovernance.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interfaces/OracleGovernanceInterface.sol\";\nimport \"./MockOracleAncillary.sol\";\n\n// A mock oracle used for testing.\ncontract MockOracleGovernance is MockOracleAncillary {\n    constructor(address _finderAddress, address _timerAddress) MockOracleAncillary(_finderAddress, _timerAddress) {}\n\n    // Enqueues a governance request (if a request isn't already present) for the given (identifier, time) pair.\n    function requestGovernanceAction(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) public {\n        _requestPrice(identifier, time, ancillaryData, true);\n    }\n\n    function _requestPrice(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData,\n        bool isGovernance\n    ) internal {\n        require(isGovernance || _getIdentifierWhitelist().isIdentifierSupported(identifier));\n        Price storage lookup = verifiedPrices[identifier][time][ancillaryData];\n        if (!lookup.isAvailable && !queryIndices[identifier][time][ancillaryData].isValid) {\n            // New query, enqueue it for review.\n            queryIndices[identifier][time][ancillaryData] = QueryIndex(true, requestedPrices.length);\n            QueryPoint memory queryPoint = QueryPoint(identifier, time, ancillaryData);\n            requestedPrices.push(queryPoint);\n            emit PriceRequestAdded(msg.sender, identifier, time, ancillaryData);\n        }\n    }\n}\n"
    },
    "contracts/UMA/oracle/test/VotingAncillaryInterfaceTest.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/FixedPoint.sol\";\nimport \"../../common/implementation/Testable.sol\";\nimport \"../interfaces/OracleAncillaryInterface.sol\";\nimport \"../interfaces/VotingAncillaryInterface.sol\";\n\n// A mock oracle used for testing. Exports the voting & oracle interfaces and events that contain ancillary data.\nabstract contract VotingAncillaryInterfaceTesting is OracleAncillaryInterface, VotingAncillaryInterface, Testable {\n    using FixedPoint for FixedPoint.Unsigned;\n\n    // Events, data structures and functions not exported in the base interfaces, used for testing.\n    event VoteCommitted(\n        address indexed voter,\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        bytes ancillaryData\n    );\n\n    event EncryptedVote(\n        address indexed voter,\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        bytes ancillaryData,\n        bytes encryptedVote\n    );\n\n    event VoteRevealed(\n        address indexed voter,\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        int256 price,\n        bytes ancillaryData,\n        uint256 numTokens\n    );\n\n    event RewardsRetrieved(\n        address indexed voter,\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        bytes ancillaryData,\n        uint256 numTokens\n    );\n\n    event PriceRequestAdded(uint256 indexed roundId, bytes32 indexed identifier, uint256 time);\n\n    event PriceResolved(\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        int256 price,\n        bytes ancillaryData\n    );\n\n    struct Round {\n        uint256 snapshotId; // Voting token snapshot ID for this round.  0 if no snapshot has been taken.\n        FixedPoint.Unsigned inflationRate; // Inflation rate set for this round.\n        FixedPoint.Unsigned gatPercentage; // Gat rate set for this round.\n        uint256 rewardsExpirationTime; // Time that rewards for this round can be claimed until.\n    }\n\n    // Represents the status a price request has.\n    enum RequestStatus {\n        NotRequested, // Was never requested.\n        Active, // Is being voted on in the current round.\n        Resolved, // Was resolved in a previous round.\n        Future // Is scheduled to be voted on in a future round.\n    }\n\n    // Only used as a return value in view methods -- never stored in the contract.\n    struct RequestState {\n        RequestStatus status;\n        uint256 lastVotingRound;\n    }\n\n    function rounds(uint256 roundId) public view virtual returns (Round memory);\n\n    function getPriceRequestStatuses(VotingAncillaryInterface.PendingRequestAncillary[] memory requests)\n        public\n        view\n        virtual\n        returns (RequestState[] memory);\n\n    function getPendingPriceRequestsArray() external view virtual returns (bytes32[] memory);\n}\n"
    },
    "contracts/UMA/oracle/test/VotingInterfaceTest.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/FixedPoint.sol\";\nimport \"../../common/implementation/Testable.sol\";\nimport \"../interfaces/OracleInterface.sol\";\nimport \"../interfaces/VotingInterface.sol\";\n\n// A mock oracle used for testing. Exports the voting & oracle interfaces and events that contain no ancillary data.\nabstract contract VotingInterfaceTesting is OracleInterface, VotingInterface, Testable {\n    using FixedPoint for FixedPoint.Unsigned;\n\n    // Events, data structures and functions not exported in the base interfaces, used for testing.\n    event VoteCommitted(\n        address indexed voter,\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        bytes ancillaryData\n    );\n\n    event EncryptedVote(\n        address indexed voter,\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        bytes ancillaryData,\n        bytes encryptedVote\n    );\n\n    event VoteRevealed(\n        address indexed voter,\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        int256 price,\n        bytes ancillaryData,\n        uint256 numTokens\n    );\n\n    event RewardsRetrieved(\n        address indexed voter,\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        bytes ancillaryData,\n        uint256 numTokens\n    );\n\n    event PriceRequestAdded(uint256 indexed roundId, bytes32 indexed identifier, uint256 time);\n\n    event PriceResolved(\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        int256 price,\n        bytes ancillaryData\n    );\n\n    struct Round {\n        uint256 snapshotId; // Voting token snapshot ID for this round.  0 if no snapshot has been taken.\n        FixedPoint.Unsigned inflationRate; // Inflation rate set for this round.\n        FixedPoint.Unsigned gatPercentage; // Gat rate set for this round.\n        uint256 rewardsExpirationTime; // Time that rewards for this round can be claimed until.\n    }\n\n    // Represents the status a price request has.\n    enum RequestStatus {\n        NotRequested, // Was never requested.\n        Active, // Is being voted on in the current round.\n        Resolved, // Was resolved in a previous round.\n        Future // Is scheduled to be voted on in a future round.\n    }\n\n    // Only used as a return value in view methods -- never stored in the contract.\n    struct RequestState {\n        RequestStatus status;\n        uint256 lastVotingRound;\n    }\n\n    function rounds(uint256 roundId) public view virtual returns (Round memory);\n\n    function getPriceRequestStatuses(VotingInterface.PendingRequest[] memory requests)\n        public\n        view\n        virtual\n        returns (RequestState[] memory);\n\n    function getPendingPriceRequestsArray() external view virtual returns (bytes32[] memory);\n}\n"
    },
    "contracts/UMA/oracle/implementation/test/StakerSnapshotTest.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../Staker.sol\";\n\ncontract StakerTest is Staker {\n    constructor(\n        uint256 _emissionRate,\n        uint256 _unstakeCoolDown,\n        address _votingToken,\n        address _timer\n    ) public Staker(_emissionRate, _unstakeCoolDown, _votingToken, _timer) {}\n\n    function applySlashingToCumulativeStaked(address voter, int256 amount) public {\n        _updateTrackers(voter); // apply any unaccumulated rewards before modifying the staked balances.\n        require(int256(cumulativeStaked) + amount >= 0, \"Cumulative staked cannot be negative\");\n        voterStakes[voter].cumulativeStaked = uint256(int256(voterStakes[voter].cumulativeStaked) + amount);\n    }\n}\n"
    },
    "contracts/UMA/oracle/test/MockOracle.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/Testable.sol\";\nimport \"../interfaces/OracleInterface.sol\";\nimport \"../interfaces/IdentifierWhitelistInterface.sol\";\nimport \"../interfaces/FinderInterface.sol\";\nimport \"../implementation/Constants.sol\";\n\n// A mock oracle used for testing.\ncontract MockOracle is OracleInterface, Testable {\n    // Represents an available price. Have to keep a separate bool to allow for price=0.\n    struct Price {\n        bool isAvailable;\n        int256 price;\n        // Time the verified price became available.\n        uint256 verifiedTime;\n    }\n\n    // The two structs below are used in an array and mapping to keep track of prices that have been requested but are\n    // not yet available.\n    struct QueryIndex {\n        bool isValid;\n        uint256 index;\n    }\n\n    // Represents a (identifier, time) point that has been queried.\n    struct QueryPoint {\n        bytes32 identifier;\n        uint256 time;\n    }\n\n    // Reference to the Finder.\n    FinderInterface private finder;\n\n    // Conceptually we want a (time, identifier) -> price map.\n    mapping(bytes32 => mapping(uint256 => Price)) private verifiedPrices;\n\n    // The mapping and array allow retrieving all the elements in a mapping and finding/deleting elements.\n    // Can we generalize this data structure?\n    mapping(bytes32 => mapping(uint256 => QueryIndex)) private queryIndices;\n    QueryPoint[] private requestedPrices;\n\n    constructor(address _finderAddress, address _timerAddress) Testable(_timerAddress) {\n        finder = FinderInterface(_finderAddress);\n    }\n\n    // Enqueues a request (if a request isn't already present) for the given (identifier, time) pair.\n\n    function requestPrice(bytes32 identifier, uint256 time) public override {\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier));\n        Price storage lookup = verifiedPrices[identifier][time];\n        if (!lookup.isAvailable && !queryIndices[identifier][time].isValid) {\n            // New query, enqueue it for review.\n            queryIndices[identifier][time] = QueryIndex(true, requestedPrices.length);\n            requestedPrices.push(QueryPoint(identifier, time));\n        }\n    }\n\n    // Pushes the verified price for a requested query.\n    function pushPrice(\n        bytes32 identifier,\n        uint256 time,\n        int256 price\n    ) external {\n        verifiedPrices[identifier][time] = Price(true, price, getCurrentTime());\n\n        QueryIndex storage queryIndex = queryIndices[identifier][time];\n        require(queryIndex.isValid, \"Can't push prices that haven't been requested\");\n        // Delete from the array. Instead of shifting the queries over, replace the contents of `indexToReplace` with\n        // the contents of the last index (unless it is the last index).\n        uint256 indexToReplace = queryIndex.index;\n        delete queryIndices[identifier][time];\n        uint256 lastIndex = requestedPrices.length - 1;\n        if (lastIndex != indexToReplace) {\n            QueryPoint storage queryToCopy = requestedPrices[lastIndex];\n            queryIndices[queryToCopy.identifier][queryToCopy.time].index = indexToReplace;\n            requestedPrices[indexToReplace] = queryToCopy;\n        }\n    }\n\n    // Checks whether a price has been resolved.\n    function hasPrice(bytes32 identifier, uint256 time) public view override returns (bool) {\n        Price storage lookup = verifiedPrices[identifier][time];\n        return lookup.isAvailable;\n    }\n\n    // Gets a price that has already been resolved.\n    function getPrice(bytes32 identifier, uint256 time) public view override returns (int256) {\n        Price storage lookup = verifiedPrices[identifier][time];\n        require(lookup.isAvailable);\n        return lookup.price;\n    }\n\n    // Gets the queries that still need verified prices.\n    function getPendingQueries() external view returns (QueryPoint[] memory) {\n        return requestedPrices;\n    }\n\n    function _getIdentifierWhitelist() private view returns (IdentifierWhitelistInterface supportedIdentifiers) {\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/test/SkinnyOptimisticRequesterTest.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../../interfaces/StoreInterface.sol\";\nimport \"../../interfaces/FinderInterface.sol\";\nimport \"../previous-versions/SkinnyOptimisticOracle.sol\";\nimport \"../Constants.sol\";\n\n// This is just a test contract to make requests to the optimistic oracle.\ncontract SkinnyOptimisticRequesterTest {\n    using SafeMath for uint256;\n\n    SkinnyOptimisticOracle optimisticOracle;\n    bool public shouldRevert = false;\n\n    // Finder to provide addresses for DVM contracts.\n    FinderInterface public finder;\n\n    // State variables to track incoming calls.\n    bytes32 public identifier;\n    uint32 public timestamp;\n    bytes public ancillaryData;\n    SkinnyOptimisticOracle.Request public request;\n\n    // Manually set an expiration timestamp to simulate expiry price requests\n    uint256 public expirationTimestamp;\n\n    constructor(SkinnyOptimisticOracle _optimisticOracle, FinderInterface _finderAddress) {\n        optimisticOracle = _optimisticOracle;\n        finder = _finderAddress;\n    }\n\n    function requestAndProposePriceFor(\n        bytes32 _identifier,\n        uint32 _timestamp,\n        bytes memory _ancillaryData,\n        IERC20 currency,\n        uint256 reward,\n        uint256 bond,\n        uint256 customLiveness,\n        address proposer,\n        int256 proposedPrice\n    ) external {\n        uint256 finalFee = _getStore().computeFinalFee(address(currency)).rawValue;\n\n        currency.approve(address(optimisticOracle), reward.add(bond).add(finalFee));\n        optimisticOracle.requestAndProposePriceFor(\n            _identifier,\n            _timestamp,\n            _ancillaryData,\n            currency,\n            reward,\n            bond,\n            customLiveness,\n            proposer,\n            proposedPrice\n        );\n    }\n\n    function requestPrice(\n        bytes32 _identifier,\n        uint32 _timestamp,\n        bytes memory _ancillaryData,\n        IERC20 currency,\n        uint256 reward,\n        uint256 bond,\n        uint256 customLiveness\n    ) external {\n        currency.approve(address(optimisticOracle), reward);\n        optimisticOracle.requestPrice(_identifier, _timestamp, _ancillaryData, currency, reward, bond, customLiveness);\n    }\n\n    function setExpirationTimestamp(uint256 _expirationTimestamp) external {\n        expirationTimestamp = _expirationTimestamp;\n    }\n\n    function setRevert(bool _shouldRevert) external {\n        shouldRevert = _shouldRevert;\n    }\n\n    function priceProposed(\n        bytes32 _identifier,\n        uint32 _timestamp,\n        bytes memory _ancillaryData,\n        SkinnyOptimisticOracle.Request memory _request\n    ) external {\n        require(!shouldRevert);\n        identifier = _identifier;\n        timestamp = _timestamp;\n        ancillaryData = _ancillaryData;\n        request = _request;\n    }\n\n    function priceDisputed(\n        bytes32 _identifier,\n        uint32 _timestamp,\n        bytes memory _ancillaryData,\n        SkinnyOptimisticOracle.Request memory _request\n    ) external {\n        require(!shouldRevert);\n        identifier = _identifier;\n        timestamp = _timestamp;\n        ancillaryData = _ancillaryData;\n        request = _request;\n    }\n\n    function priceSettled(\n        bytes32 _identifier,\n        uint32 _timestamp,\n        bytes memory _ancillaryData,\n        SkinnyOptimisticOracle.Request memory _request\n    ) external {\n        require(!shouldRevert);\n        identifier = _identifier;\n        timestamp = _timestamp;\n        ancillaryData = _ancillaryData;\n        request = _request;\n    }\n\n    function _getStore() internal view returns (StoreInterface) {\n        return StoreInterface(finder.getImplementationAddress(OracleInterfaces.Store));\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/previous-versions/SkinnyOptimisticOracle.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"../../interfaces/StoreInterface.sol\";\nimport \"../../interfaces/OracleAncillaryInterface.sol\";\nimport \"../../interfaces/OptimisticOracleInterface.sol\";\nimport \"../../interfaces/SkinnyOptimisticOracleInterface.sol\";\nimport \"../../interfaces/FinderInterface.sol\";\nimport \"../../interfaces/IdentifierWhitelistInterface.sol\";\nimport \"../Constants.sol\";\n\nimport \"../../../common/implementation/Testable.sol\";\nimport \"../../../common/implementation/Lockable.sol\";\nimport \"../../../common/implementation/FixedPoint.sol\";\nimport \"../../../common/implementation/AncillaryData.sol\";\nimport \"../../../common/implementation/AddressWhitelist.sol\";\n\n/**\n * @title Optimistic Requester.\n * @notice Optional interface that requesters can implement to receive callbacks.\n * @dev This contract does _not_ work with ERC777 collateral currencies or any others that call into the receiver on\n * transfer(). Using an ERC777 token would allow a user to maliciously grief other participants (while also losing\n * money themselves).\n */\ninterface OptimisticRequester {\n    /**\n     * @notice Callback for proposals.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request request params after proposal.\n     */\n    function priceProposed(\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        SkinnyOptimisticOracleInterface.Request memory request\n    ) external;\n\n    /**\n     * @notice Callback for disputes.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request request params after dispute.\n     */\n    function priceDisputed(\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        SkinnyOptimisticOracleInterface.Request memory request\n    ) external;\n\n    /**\n     * @notice Callback for settlement.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request request params after settlement.\n     */\n    function priceSettled(\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        SkinnyOptimisticOracleInterface.Request memory request\n    ) external;\n}\n\n/**\n * @title Optimistic Oracle with a different interface and fewer features that emphasizes gas cost reductions.\n * @notice Pre-DVM escalation contract that allows faster settlement.\n */\ncontract SkinnyOptimisticOracle is SkinnyOptimisticOracleInterface, Testable, Lockable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    event RequestPrice(\n        address indexed requester,\n        bytes32 indexed identifier,\n        uint32 timestamp,\n        bytes ancillaryData,\n        Request request\n    );\n    event ProposePrice(\n        address indexed requester,\n        bytes32 indexed identifier,\n        uint32 timestamp,\n        bytes ancillaryData,\n        Request request\n    );\n    event DisputePrice(\n        address indexed requester,\n        bytes32 indexed identifier,\n        uint32 timestamp,\n        bytes ancillaryData,\n        Request request\n    );\n    event Settle(\n        address indexed requester,\n        bytes32 indexed identifier,\n        uint32 timestamp,\n        bytes ancillaryData,\n        Request request\n    );\n\n    // Maps hash of unique request params {identifier, timestamp, ancillary data} to customizable variables such as\n    // reward and bond amounts.\n    mapping(bytes32 => bytes32) public requests;\n\n    // Finder to provide addresses for DVM contracts.\n    FinderInterface public finder;\n\n    // Default liveness value for all price requests.\n    uint256 public defaultLiveness;\n\n    /**\n     * @notice Constructor.\n     * @param _liveness default liveness applied to each price request.\n     * @param _finderAddress finder to use to get addresses of DVM contracts.\n     * @param _timerAddress address of the timer contract. Should be 0x0 in prod.\n     */\n    constructor(\n        uint256 _liveness,\n        address _finderAddress,\n        address _timerAddress\n    ) Testable(_timerAddress) {\n        finder = FinderInterface(_finderAddress);\n        _validateLiveness(_liveness);\n        defaultLiveness = _liveness;\n    }\n\n    /**\n     * @notice Requests a new price.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\n     *               which could make sense if the contract requests and proposes the value in the same call or\n     *               provides its own reward system.\n     * @param bond custom proposal bond to set for request. If set to 0, defaults to the final fee.\n     * @param customLiveness custom proposal liveness to set for request.\n     * @return totalBond default bond + final fee that the proposer and disputer will be required to pay.\n     */\n    function requestPrice(\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        IERC20 currency,\n        uint256 reward,\n        uint256 bond,\n        uint256 customLiveness\n    ) external override nonReentrant() returns (uint256 totalBond) {\n        bytes32 requestId = _getId(msg.sender, identifier, timestamp, ancillaryData);\n        require(requests[requestId] == bytes32(0), \"Request already initialized\");\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier), \"Unsupported identifier\");\n        require(_getCollateralWhitelist().isOnWhitelist(address(currency)), \"Unsupported currency\");\n        require(timestamp <= getCurrentTime(), \"Timestamp in future\");\n        require(\n            _stampAncillaryData(ancillaryData, msg.sender).length <= ancillaryBytesLimit,\n            \"Ancillary Data too long\"\n        );\n        uint256 finalFee = _getStore().computeFinalFee(address(currency)).rawValue;\n\n        // Associate new request with ID\n        Request memory request;\n        request.currency = currency;\n        request.reward = reward;\n        request.finalFee = finalFee;\n        request.bond = bond != 0 ? bond : finalFee;\n        request.customLiveness = customLiveness;\n        _storeRequestHash(requestId, request);\n\n        if (reward > 0) currency.safeTransferFrom(msg.sender, address(this), reward);\n\n        emit RequestPrice(msg.sender, identifier, timestamp, ancillaryData, request);\n\n        return request.bond.add(finalFee);\n    }\n\n    /**\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\n     * from this proposal. However, any bonds are pulled from the caller.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters whose hash must match the request that the caller wants to\n     * propose a price for.\n     * @param proposer address to set as the proposer.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function proposePriceFor(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request,\n        address proposer,\n        int256 proposedPrice\n    ) public override nonReentrant() returns (uint256 totalBond) {\n        require(proposer != address(0), \"Proposer address must be non 0\");\n        require(\n            _getState(requester, identifier, timestamp, ancillaryData, request) ==\n                OptimisticOracleInterface.State.Requested,\n            \"Must be requested\"\n        );\n        bytes32 requestId = _getId(requester, identifier, timestamp, ancillaryData);\n        _validateRequestHash(requestId, request);\n\n        // Associate newly proposed request params with ID\n        Request memory proposedRequest =\n            Request({\n                proposer: proposer, // Modified\n                disputer: request.disputer,\n                currency: request.currency,\n                settled: request.settled,\n                proposedPrice: proposedPrice, // Modified\n                resolvedPrice: request.resolvedPrice,\n                expirationTime: getCurrentTime().add(\n                    request.customLiveness != 0 ? request.customLiveness : defaultLiveness\n                ), // Modified\n                reward: request.reward,\n                finalFee: request.finalFee,\n                bond: request.bond,\n                customLiveness: request.customLiveness\n            });\n        _storeRequestHash(requestId, proposedRequest);\n\n        totalBond = request.bond.add(request.finalFee);\n        if (totalBond > 0) request.currency.safeTransferFrom(msg.sender, address(this), totalBond);\n\n        emit ProposePrice(requester, identifier, timestamp, ancillaryData, proposedRequest);\n\n        // Callback.\n        if (address(requester).isContract())\n            try\n                OptimisticRequester(requester).priceProposed(identifier, timestamp, ancillaryData, proposedRequest)\n            {} catch {}\n    }\n\n    /**\n     * @notice Proposes a price value where caller is the proposer.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters whose hash must match the request that the caller wants to\n     * propose a price for.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function proposePrice(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request,\n        int256 proposedPrice\n    ) external override returns (uint256 totalBond) {\n        // Note: re-entrancy guard is done in the inner call.\n        return proposePriceFor(requester, identifier, timestamp, ancillaryData, request, msg.sender, proposedPrice);\n    }\n\n    /**\n     * @notice Combines logic of requestPrice and proposePrice while taking advantage of gas savings from not having to\n     * overwrite Request params that a normal requestPrice() => proposePrice() flow would entail. Note: The proposer\n     * will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.\n     * @dev The caller is the requester, but the proposer can be customized.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\n     *               which could make sense if the contract requests and proposes the value in the same call or\n     *               provides its own reward system.\n     * @param bond custom proposal bond to set for request. If set to 0, defaults to the final fee.\n     * @param customLiveness custom proposal liveness to set for request.\n     * @param proposer address to set as the proposer.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function requestAndProposePriceFor(\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        IERC20 currency,\n        uint256 reward,\n        uint256 bond,\n        uint256 customLiveness,\n        address proposer,\n        int256 proposedPrice\n    ) external override nonReentrant() returns (uint256 totalBond) {\n        bytes32 requestId = _getId(msg.sender, identifier, timestamp, ancillaryData);\n        require(requests[requestId] == bytes32(0), \"Request already initialized\");\n        require(proposer != address(0), \"proposer address must be non 0\");\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier), \"Unsupported identifier\");\n        require(_getCollateralWhitelist().isOnWhitelist(address(currency)), \"Unsupported currency\");\n        require(timestamp <= getCurrentTime(), \"Timestamp in future\");\n        require(\n            _stampAncillaryData(ancillaryData, msg.sender).length <= ancillaryBytesLimit,\n            \"Ancillary Data too long\"\n        );\n        uint256 finalFee = _getStore().computeFinalFee(address(currency)).rawValue;\n\n        // Associate new request with ID\n        Request memory request;\n        request.currency = currency;\n        request.reward = reward;\n        request.finalFee = finalFee;\n        request.bond = bond != 0 ? bond : finalFee;\n        request.customLiveness = customLiveness;\n        request.proposer = proposer;\n        request.proposedPrice = proposedPrice;\n        request.expirationTime = getCurrentTime().add(customLiveness != 0 ? customLiveness : defaultLiveness);\n        _storeRequestHash(requestId, request);\n\n        // Pull reward from requester, who is the caller.\n        if (reward > 0) currency.safeTransferFrom(msg.sender, address(this), reward);\n        // Pull proposal bond from caller.\n        totalBond = request.bond.add(request.finalFee);\n        if (totalBond > 0) currency.safeTransferFrom(msg.sender, address(this), totalBond);\n\n        emit RequestPrice(msg.sender, identifier, timestamp, ancillaryData, request);\n        emit ProposePrice(msg.sender, identifier, timestamp, ancillaryData, request);\n\n        // Callback.\n        if (address(msg.sender).isContract())\n            try OptimisticRequester(msg.sender).priceProposed(identifier, timestamp, ancillaryData, request) {} catch {}\n    }\n\n    /**\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters whose hash must match the request that the caller wants to\n     *              dispute.\n     * @param disputer address to set as the disputer.\n     * @param requester sender of the initial price request.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\n     */\n    function disputePriceFor(\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request,\n        address disputer,\n        address requester\n    ) public override nonReentrant() returns (uint256 totalBond) {\n        require(disputer != address(0), \"disputer address must be non 0\");\n        require(\n            _getState(requester, identifier, timestamp, ancillaryData, request) ==\n                OptimisticOracleInterface.State.Proposed,\n            \"Must be proposed\"\n        );\n        bytes32 requestId = _getId(requester, identifier, timestamp, ancillaryData);\n        _validateRequestHash(requestId, request);\n\n        // Associate newly disputed request params with ID\n        Request memory disputedRequest =\n            Request({\n                proposer: request.proposer,\n                disputer: disputer, // Modified\n                currency: request.currency,\n                settled: request.settled,\n                proposedPrice: request.proposedPrice,\n                resolvedPrice: request.resolvedPrice,\n                expirationTime: request.expirationTime,\n                reward: request.reward,\n                finalFee: request.finalFee,\n                bond: request.bond,\n                customLiveness: request.customLiveness\n            });\n        _storeRequestHash(requestId, disputedRequest);\n\n        totalBond = request.bond.add(request.finalFee);\n        if (totalBond > 0) request.currency.safeTransferFrom(msg.sender, address(this), totalBond);\n\n        StoreInterface store = _getStore();\n\n        // Avoids stack too deep compilation error.\n        {\n            // Along with the final fee, \"burn\" part of the loser's bond to ensure that a larger bond always makes it\n            // proportionally more expensive to delay the resolution even if the proposer and disputer are the same\n            // party.\n            uint256 burnedBond = _computeBurnedBond(disputedRequest);\n\n            // The total fee is the burned bond and the final fee added together.\n            uint256 totalFee = request.finalFee.add(burnedBond);\n\n            if (totalFee > 0) {\n                request.currency.safeIncreaseAllowance(address(store), totalFee);\n                _getStore().payOracleFeesErc20(address(request.currency), FixedPoint.Unsigned(totalFee));\n            }\n        }\n\n        _getOracle().requestPrice(identifier, timestamp, _stampAncillaryData(ancillaryData, requester));\n\n        emit DisputePrice(requester, identifier, timestamp, ancillaryData, disputedRequest);\n\n        // Callback.\n        if (address(requester).isContract())\n            try\n                OptimisticRequester(requester).priceDisputed(identifier, timestamp, ancillaryData, disputedRequest)\n            {} catch {}\n    }\n\n    /**\n     * @notice Disputes a price request with an active proposal where caller is the disputer.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters whose hash must match the request that the caller wants to\n     *             dispute.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\n     */\n    function disputePrice(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request\n    ) external override returns (uint256 totalBond) {\n        // Note: re-entrancy guard is done in the inner call.\n        return disputePriceFor(identifier, timestamp, ancillaryData, request, msg.sender, requester);\n    }\n\n    /**\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters whose hash must match the request that the caller wants to\n     *              settle.\n     * @return payout the amount that the \"winner\" (proposer or disputer) receives on settlement. This amount includes\n     * the returned bonds as well as additional rewards.\n     * @return resolvedPrice the price that the request settled to.\n     */\n    function settle(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request\n    ) external override nonReentrant() returns (uint256 payout, int256 resolvedPrice) {\n        return _settle(requester, identifier, timestamp, ancillaryData, request);\n    }\n\n    /**\n     * @notice Computes the current state of a price request. See the State enum for more details.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters.\n     * @return the State.\n     */\n    function getState(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request\n    ) external override nonReentrant() returns (OptimisticOracleInterface.State) {\n        return _getState(requester, identifier, timestamp, ancillaryData, request);\n    }\n\n    /**\n     * @notice Checks if a given request has resolved, expired or been settled (i.e the optimistic oracle has a price).\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters. The hash of these parameters must match with the request hash that is\n     * associated with the price request unique ID {requester, identifier, timestamp, ancillaryData}, or this method\n     * will revert.\n     * @return boolean indicating true if price exists and false if not.\n     */\n    function hasPrice(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request\n    ) public override nonReentrant() returns (bool) {\n        bytes32 requestId = _getId(requester, identifier, timestamp, ancillaryData);\n        _validateRequestHash(requestId, request);\n        OptimisticOracleInterface.State state = _getState(requester, identifier, timestamp, ancillaryData, request);\n        return\n            state == OptimisticOracleInterface.State.Settled ||\n            state == OptimisticOracleInterface.State.Resolved ||\n            state == OptimisticOracleInterface.State.Expired;\n    }\n\n    /**\n     * @notice Generates stamped ancillary data in the format that it would be used in the case of a price dispute.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param requester sender of the initial price request.\n     * @return the stamped ancillary bytes.\n     */\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\n        public\n        pure\n        override\n        returns (bytes memory)\n    {\n        return _stampAncillaryData(ancillaryData, requester);\n    }\n\n    /****************************************\n     *    PRIVATE AND INTERNAL FUNCTIONS    *\n     ****************************************/\n    // Returns hash of unique request identifiers. This contract maps request ID hashes to hashes of the request's\n    // parameters.\n    function _getId(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData\n    ) private pure returns (bytes32) {\n        return keccak256(abi.encode(requester, identifier, timestamp, ancillaryData));\n    }\n\n    // Returns hash of request parameters. These are mapped to the unique request ID to track a request's lifecycle.\n    function _getRequestHash(Request memory request) private pure returns (bytes32) {\n        return keccak256(abi.encode(request));\n    }\n\n    // Resolves a price request that has expired or been disputed and a price is available from the DVM. This will\n    // revert if the unique request ID does not match the hashed request parameters. This also marks the request\n    // as settled, therefore this method can only be triggered once per eligible request.\n    function _settle(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request\n    ) private returns (uint256 payout, int256 resolvedPrice) {\n        bytes32 requestId = _getId(requester, identifier, timestamp, ancillaryData);\n        _validateRequestHash(requestId, request);\n\n        // Associate settled request params with ID.\n        Request memory settledRequest =\n            Request({\n                proposer: request.proposer,\n                disputer: request.disputer,\n                currency: request.currency,\n                settled: true, // Modified\n                proposedPrice: request.proposedPrice,\n                resolvedPrice: request.resolvedPrice,\n                expirationTime: request.expirationTime,\n                reward: request.reward,\n                finalFee: request.finalFee,\n                bond: request.bond,\n                customLiveness: request.customLiveness\n            });\n\n        OptimisticOracleInterface.State state = _getState(requester, identifier, timestamp, ancillaryData, request);\n        if (state == OptimisticOracleInterface.State.Expired) {\n            // In the expiry case, just pay back the proposer's bond and final fee along with the reward.\n            resolvedPrice = request.proposedPrice;\n            settledRequest.resolvedPrice = resolvedPrice;\n            payout = request.bond.add(request.finalFee).add(request.reward);\n            request.currency.safeTransfer(request.proposer, payout);\n        } else if (state == OptimisticOracleInterface.State.Resolved) {\n            // In the Resolved case, pay either the disputer or the proposer the entire payout (+ bond and reward).\n            resolvedPrice = _getOracle().getPrice(identifier, timestamp, _stampAncillaryData(ancillaryData, requester));\n            settledRequest.resolvedPrice = resolvedPrice;\n            bool disputeSuccess = settledRequest.resolvedPrice != request.proposedPrice;\n\n            // Winner gets:\n            // - Their bond back.\n            // - The unburned portion of the loser's bond: proposal bond (not including final fee) - burned bond.\n            // - Their final fee back.\n            // - The request reward (if not already refunded -- if refunded, it will be set to 0).\n            payout = request.bond.add(request.bond.sub(_computeBurnedBond(settledRequest))).add(request.finalFee).add(\n                request.reward\n            );\n            request.currency.safeTransfer(disputeSuccess ? request.disputer : request.proposer, payout);\n        } else {\n            revert(\"Already settled or not settleable\");\n        }\n\n        _storeRequestHash(requestId, settledRequest);\n        emit Settle(requester, identifier, timestamp, ancillaryData, settledRequest);\n\n        // Callback.\n        if (address(requester).isContract())\n            try\n                OptimisticRequester(requester).priceSettled(identifier, timestamp, ancillaryData, settledRequest)\n            {} catch {}\n    }\n\n    function _computeBurnedBond(Request memory request) private pure returns (uint256) {\n        // burnedBond = floor(bond / 2)\n        return request.bond.div(2);\n    }\n\n    function _validateLiveness(uint256 liveness) private pure {\n        require(liveness < 5200 weeks, \"Liveness too large\");\n        require(liveness > 0, \"Liveness cannot be 0\");\n    }\n\n    function _validateRequestHash(bytes32 requestId, Request memory request) private view {\n        require(\n            requests[requestId] == _getRequestHash(request),\n            \"Hashed request params do not match existing request hash\"\n        );\n    }\n\n    function _storeRequestHash(bytes32 requestId, Request memory request) internal {\n        requests[requestId] = _getRequestHash(request);\n    }\n\n    function _getState(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request\n    ) internal view returns (OptimisticOracleInterface.State) {\n        // Note: This function does not check whether all of the _request parameter values are correct. For example,\n        // the request.reward could be any value and it would not impact this function's return value. Therefore, it\n        // is the caller's responsibility to check that _request matches with the expected ID corresponding to\n        // {requester, identifier, timestamp, ancillaryData} via _validateRequestHash().\n        if (address(request.currency) == address(0)) return OptimisticOracleInterface.State.Invalid;\n\n        if (request.proposer == address(0)) return OptimisticOracleInterface.State.Requested;\n\n        if (request.settled) return OptimisticOracleInterface.State.Settled;\n\n        if (request.disputer == address(0))\n            return\n                request.expirationTime <= getCurrentTime()\n                    ? OptimisticOracleInterface.State.Expired\n                    : OptimisticOracleInterface.State.Proposed;\n\n        return\n            _getOracle().hasPrice(identifier, timestamp, _stampAncillaryData(ancillaryData, requester))\n                ? OptimisticOracleInterface.State.Resolved\n                : OptimisticOracleInterface.State.Disputed;\n    }\n\n    function _getOracle() internal view returns (OracleAncillaryInterface) {\n        return OracleAncillaryInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\n    }\n\n    function _getCollateralWhitelist() internal view returns (AddressWhitelist) {\n        return AddressWhitelist(finder.getImplementationAddress(OracleInterfaces.CollateralWhitelist));\n    }\n\n    function _getStore() internal view returns (StoreInterface) {\n        return StoreInterface(finder.getImplementationAddress(OracleInterfaces.Store));\n    }\n\n    function _getIdentifierWhitelist() internal view returns (IdentifierWhitelistInterface) {\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\n    }\n\n    /**\n     * @dev We don't handle specifically the case where `ancillaryData` is not already readily translateable in utf8.\n     * For those cases, we assume that the client will be able to strip out the utf8-translateable part of the\n     * ancillary data that this contract stamps.\n     */\n    function _stampAncillaryData(bytes memory ancillaryData, address requester) internal pure returns (bytes memory) {\n        // Since this contract will be the one to formally submit DVM price requests, its useful for voters to know who\n        // the original requester was.\n        return AncillaryData.appendKeyValueAddress(ancillaryData, \"ooRequester\", requester);\n    }\n}\n\n/**\n * @notice This is the SkinnyOptimisticOracle contract that should be deployed on live networks. It is exactly the same\n * as the regular SkinnyOptimisticOracle contract, but it overrides getCurrentTime to make the call a simply return\n * block.timestamp with no branching or storage queries.\n */\ncontract SkinnyOptimisticOracleProd is SkinnyOptimisticOracle {\n    constructor(\n        uint256 _liveness,\n        address _finderAddress,\n        address _timerAddress\n    ) SkinnyOptimisticOracle(_liveness, _finderAddress, _timerAddress) {}\n\n    function getCurrentTime() public view virtual override returns (uint256) {\n        return block.timestamp;\n    }\n}\n"
    },
    "contracts/UMA/oracle/interfaces/SkinnyOptimisticOracleInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/OptimisticOracleInterface.sol\";\n\n/**\n * @title Interface for the gas-cost-reduced version of the OptimisticOracle.\n * @notice Differences from normal OptimisticOracle:\n * - refundOnDispute: flag is removed, by default there are no refunds on disputes.\n * - customizing request parameters: In the OptimisticOracle, parameters like `bond` and `customLiveness` can be reset\n *   after a request is already made via `requestPrice`. In the SkinnyOptimisticOracle, these parameters can only be\n *   set in `requestPrice`, which has an expanded input set.\n * - settleAndGetPrice: Replaced by `settle`, which can only be called once per settleable request. The resolved price\n *   can be fetched via the `Settle` event or the return value of `settle`.\n * - general changes to interface: Functions that interact with existing requests all require the parameters of the\n *   request to modify to be passed as input. These parameters must match with the existing request parameters or the\n *   function will revert. This change reflects the internal refactor to store hashed request parameters instead of the\n *   full request struct.\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\n */\nabstract contract SkinnyOptimisticOracleInterface {\n    // Struct representing a price request. Note that this differs from the OptimisticOracleInterface's Request struct\n    // in that refundOnDispute is removed.\n    struct Request {\n        address proposer; // Address of the proposer.\n        address disputer; // Address of the disputer.\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\n        bool settled; // True if the request is settled.\n        int256 proposedPrice; // Price that the proposer submitted.\n        int256 resolvedPrice; // Price resolved once the request is settled.\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\n        uint256 customLiveness; // Custom liveness value set by the requester.\n    }\n\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\n    // to accept a price request made with ancillary data length over a certain size.\n    uint256 public constant ancillaryBytesLimit = 8192;\n\n    /**\n     * @notice Requests a new price.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\n     *               which could make sense if the contract requests and proposes the value in the same call or\n     *               provides its own reward system.\n     * @param bond custom proposal bond to set for request. If set to 0, defaults to the final fee.\n     * @param customLiveness custom proposal liveness to set for request.\n     * @return totalBond default bond + final fee that the proposer and disputer will be required to pay.\n     */\n    function requestPrice(\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        IERC20 currency,\n        uint256 reward,\n        uint256 bond,\n        uint256 customLiveness\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\n     * from this proposal. However, any bonds are pulled from the caller.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters whose hash must match the request that the caller wants to\n     * propose a price for.\n     * @param proposer address to set as the proposer.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function proposePriceFor(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request,\n        address proposer,\n        int256 proposedPrice\n    ) public virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Proposes a price value where caller is the proposer.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters whose hash must match the request that the caller wants to\n     * propose a price for.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function proposePrice(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request,\n        int256 proposedPrice\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Combines logic of requestPrice and proposePrice while taking advantage of gas savings from not having to\n     * overwrite Request params that a normal requestPrice() => proposePrice() flow would entail. Note: The proposer\n     * will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.\n     * @dev The caller is the requester, but the proposer can be customized.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\n     *               which could make sense if the contract requests and proposes the value in the same call or\n     *               provides its own reward system.\n     * @param bond custom proposal bond to set for request. If set to 0, defaults to the final fee.\n     * @param customLiveness custom proposal liveness to set for request.\n     * @param proposer address to set as the proposer.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function requestAndProposePriceFor(\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        IERC20 currency,\n        uint256 reward,\n        uint256 bond,\n        uint256 customLiveness,\n        address proposer,\n        int256 proposedPrice\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters whose hash must match the request that the caller wants to\n     * dispute.\n     * @param disputer address to set as the disputer.\n     * @param requester sender of the initial price request.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\n     */\n    function disputePriceFor(\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request,\n        address disputer,\n        address requester\n    ) public virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Disputes a price request with an active proposal where caller is the disputer.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters whose hash must match the request that the caller wants to\n     * dispute.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\n     */\n    function disputePrice(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters whose hash must match the request that the caller wants to\n     * settle.\n     * @return payout the amount that the \"winner\" (proposer or disputer) receives on settlement. This amount includes\n     * the returned bonds as well as additional rewards.\n     * @return resolvedPrice the price that the request settled to.\n     */\n    function settle(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request\n    ) external virtual returns (uint256 payout, int256 resolvedPrice);\n\n    /**\n     * @notice Computes the current state of a price request. See the State enum for more details.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters.\n     * @return the State.\n     */\n    function getState(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request\n    ) external virtual returns (OptimisticOracleInterface.State);\n\n    /**\n     * @notice Checks if a given request has resolved, expired or been settled (i.e the optimistic oracle has a price).\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param request price request parameters. The hash of these parameters must match with the request hash that is\n     * associated with the price request unique ID {requester, identifier, timestamp, ancillaryData}, or this method\n     * will revert.\n     * @return boolean indicating true if price exists and false if not.\n     */\n    function hasPrice(\n        address requester,\n        bytes32 identifier,\n        uint32 timestamp,\n        bytes memory ancillaryData,\n        Request memory request\n    ) public virtual returns (bool);\n\n    /**\n     * @notice Generates stamped ancillary data in the format that it would be used in the case of a price dispute.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param requester sender of the initial price request.\n     * @return the stamped ancillary bytes.\n     */\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\n        public\n        pure\n        virtual\n        returns (bytes memory);\n}\n"
    },
    "contracts/UMA/oracle/implementation/previous-versions/OptimisticOracle.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\n// WARNING: This contract has been deprecated! It is left in the UMA Protocol repo for backwards compatibility reasons.\n// You should refer to the latest implementation of the Optimistic Oracle which is named OptimisticOracleV2 and can\n// be found in the UMA Finder under the same name.\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"../../interfaces/StoreInterface.sol\";\nimport \"../../interfaces/OracleAncillaryInterface.sol\";\nimport \"../../interfaces/FinderInterface.sol\";\nimport \"../../interfaces/IdentifierWhitelistInterface.sol\";\nimport \"../../interfaces/OptimisticOracleInterface.sol\";\nimport \"../Constants.sol\";\n\nimport \"../../../common/implementation/Testable.sol\";\nimport \"../../../common/implementation/Lockable.sol\";\nimport \"../../../common/implementation/FixedPoint.sol\";\nimport \"../../../common/implementation/AncillaryData.sol\";\nimport \"../../../common/implementation/AddressWhitelist.sol\";\n\n/**\n * @title Optimistic Requester.\n * @notice Optional interface that requesters can implement to receive callbacks.\n * @dev this contract does _not_ work with ERC777 collateral currencies or any others that call into the receiver on\n * transfer(). Using an ERC777 token would allow a user to maliciously grief other participants (while also losing\n * money themselves).\n */\ninterface OptimisticRequester {\n    /**\n     * @notice Callback for proposals.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data of the price being requested.\n     */\n    function priceProposed(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external;\n\n    /**\n     * @notice Callback for disputes.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param refund refund received in the case that refundOnDispute was enabled.\n     */\n    function priceDisputed(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        uint256 refund\n    ) external;\n\n    /**\n     * @notice Callback for settlement.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param price price that was resolved by the escalation process.\n     */\n    function priceSettled(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        int256 price\n    ) external;\n}\n\n/**\n * @title Optimistic Oracle.\n * @notice Pre-DVM escalation contract that allows faster settlement.\n */\ncontract OptimisticOracle is OptimisticOracleInterface, Testable, Lockable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    // Finder to provide addresses for DVM contracts.\n    FinderInterface public override finder;\n\n    // Default liveness value for all price requests.\n    uint256 public override defaultLiveness;\n\n    /**\n     * @notice Constructor.\n     * @param _liveness default liveness applied to each price request.\n     * @param _finderAddress finder to use to get addresses of DVM contracts.\n     * @param _timerAddress address of the timer contract. Should be 0x0 in prod.\n     */\n    constructor(\n        uint256 _liveness,\n        address _finderAddress,\n        address _timerAddress\n    ) Testable(_timerAddress) {\n        finder = FinderInterface(_finderAddress);\n        _validateLiveness(_liveness);\n        defaultLiveness = _liveness;\n    }\n\n    /**\n     * @notice Requests a new price.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\n     *               which could make sense if the contract requests and proposes the value in the same call or\n     *               provides its own reward system.\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\n     * This can be changed with a subsequent call to setBond().\n     */\n    function requestPrice(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        IERC20 currency,\n        uint256 reward\n    ) external override nonReentrant() returns (uint256 totalBond) {\n        require(_getState(msg.sender, identifier, timestamp, ancillaryData) == State.Invalid, \"requestPrice: Invalid\");\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier), \"Unsupported identifier\");\n        require(_getCollateralWhitelist().isOnWhitelist(address(currency)), \"Unsupported currency\");\n        require(timestamp <= getCurrentTime(), \"Timestamp in future\");\n        require(\n            _stampAncillaryData(ancillaryData, msg.sender).length <= ancillaryBytesLimit,\n            \"Ancillary Data too long\"\n        );\n        uint256 finalFee = _getStore().computeFinalFee(address(currency)).rawValue;\n        requests[_getId(msg.sender, identifier, timestamp, ancillaryData)] = Request({\n            proposer: address(0),\n            disputer: address(0),\n            currency: currency,\n            settled: false,\n            refundOnDispute: false,\n            proposedPrice: 0,\n            resolvedPrice: 0,\n            expirationTime: 0,\n            reward: reward,\n            finalFee: finalFee,\n            bond: finalFee,\n            customLiveness: 0\n        });\n\n        if (reward > 0) {\n            currency.safeTransferFrom(msg.sender, address(this), reward);\n        }\n\n        emit RequestPrice(msg.sender, identifier, timestamp, ancillaryData, address(currency), reward, finalFee);\n\n        // This function returns the initial proposal bond for this request, which can be customized by calling\n        // setBond() with the same identifier and timestamp.\n        return finalFee.mul(2);\n    }\n\n    /**\n     * @notice Set the proposal bond associated with a price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param bond custom bond amount to set.\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\n     * changed again with a subsequent call to setBond().\n     */\n    function setBond(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        uint256 bond\n    ) external override nonReentrant() returns (uint256 totalBond) {\n        require(_getState(msg.sender, identifier, timestamp, ancillaryData) == State.Requested, \"setBond: Requested\");\n        Request storage request = _getRequest(msg.sender, identifier, timestamp, ancillaryData);\n        request.bond = bond;\n\n        // Total bond is the final fee + the newly set bond.\n        return bond.add(request.finalFee);\n    }\n\n    /**\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \"hedge\" the caller\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\n     * bond, so there is still profit to be made even if the reward is refunded.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     */\n    function setRefundOnDispute(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external override nonReentrant() {\n        require(\n            _getState(msg.sender, identifier, timestamp, ancillaryData) == State.Requested,\n            \"setRefundOnDispute: Requested\"\n        );\n        _getRequest(msg.sender, identifier, timestamp, ancillaryData).refundOnDispute = true;\n    }\n\n    /**\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\n     * being auto-resolved.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param customLiveness new custom liveness.\n     */\n    function setCustomLiveness(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        uint256 customLiveness\n    ) external override nonReentrant() {\n        require(\n            _getState(msg.sender, identifier, timestamp, ancillaryData) == State.Requested,\n            \"setCustomLiveness: Requested\"\n        );\n        _validateLiveness(customLiveness);\n        _getRequest(msg.sender, identifier, timestamp, ancillaryData).customLiveness = customLiveness;\n    }\n\n    /**\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\n     * from this proposal. However, any bonds are pulled from the caller.\n     * @param proposer address to set as the proposer.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function proposePriceFor(\n        address proposer,\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        int256 proposedPrice\n    ) public override nonReentrant() returns (uint256 totalBond) {\n        require(proposer != address(0), \"proposer address must be non 0\");\n        require(\n            _getState(requester, identifier, timestamp, ancillaryData) == State.Requested,\n            \"proposePriceFor: Requested\"\n        );\n        Request storage request = _getRequest(requester, identifier, timestamp, ancillaryData);\n        request.proposer = proposer;\n        request.proposedPrice = proposedPrice;\n\n        // If a custom liveness has been set, use it instead of the default.\n        request.expirationTime = getCurrentTime().add(\n            request.customLiveness != 0 ? request.customLiveness : defaultLiveness\n        );\n\n        totalBond = request.bond.add(request.finalFee);\n        if (totalBond > 0) {\n            request.currency.safeTransferFrom(msg.sender, address(this), totalBond);\n        }\n\n        emit ProposePrice(\n            requester,\n            proposer,\n            identifier,\n            timestamp,\n            ancillaryData,\n            proposedPrice,\n            request.expirationTime,\n            address(request.currency)\n        );\n\n        // Callback.\n        if (address(requester).isContract())\n            try OptimisticRequester(requester).priceProposed(identifier, timestamp, ancillaryData) {} catch {}\n    }\n\n    /**\n     * @notice Proposes a price value for an existing price request.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function proposePrice(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        int256 proposedPrice\n    ) external override returns (uint256 totalBond) {\n        // Note: re-entrancy guard is done in the inner call.\n        return proposePriceFor(msg.sender, requester, identifier, timestamp, ancillaryData, proposedPrice);\n    }\n\n    /**\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\n     * @param disputer address to set as the disputer.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\n     */\n    function disputePriceFor(\n        address disputer,\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) public override nonReentrant() returns (uint256 totalBond) {\n        require(disputer != address(0), \"disputer address must be non 0\");\n        require(\n            _getState(requester, identifier, timestamp, ancillaryData) == State.Proposed,\n            \"disputePriceFor: Proposed\"\n        );\n        Request storage request = _getRequest(requester, identifier, timestamp, ancillaryData);\n        request.disputer = disputer;\n\n        uint256 finalFee = request.finalFee;\n        uint256 bond = request.bond;\n        totalBond = bond.add(finalFee);\n        if (totalBond > 0) {\n            request.currency.safeTransferFrom(msg.sender, address(this), totalBond);\n        }\n\n        StoreInterface store = _getStore();\n\n        // Avoids stack too deep compilation error.\n        {\n            // Along with the final fee, \"burn\" part of the loser's bond to ensure that a larger bond always makes it\n            // proportionally more expensive to delay the resolution even if the proposer and disputer are the same\n            // party.\n            uint256 burnedBond = _computeBurnedBond(request);\n\n            // The total fee is the burned bond and the final fee added together.\n            uint256 totalFee = finalFee.add(burnedBond);\n\n            if (totalFee > 0) {\n                request.currency.safeIncreaseAllowance(address(store), totalFee);\n                _getStore().payOracleFeesErc20(address(request.currency), FixedPoint.Unsigned(totalFee));\n            }\n        }\n\n        _getOracle().requestPrice(identifier, timestamp, _stampAncillaryData(ancillaryData, requester));\n\n        // Compute refund.\n        uint256 refund = 0;\n        if (request.reward > 0 && request.refundOnDispute) {\n            refund = request.reward;\n            request.reward = 0;\n            request.currency.safeTransfer(requester, refund);\n        }\n\n        emit DisputePrice(\n            requester,\n            request.proposer,\n            disputer,\n            identifier,\n            timestamp,\n            ancillaryData,\n            request.proposedPrice\n        );\n\n        // Callback.\n        if (address(requester).isContract())\n            try OptimisticRequester(requester).priceDisputed(identifier, timestamp, ancillaryData, refund) {} catch {}\n    }\n\n    /**\n     * @notice Disputes a price value for an existing price request with an active proposal.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\n     */\n    function disputePrice(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external override returns (uint256 totalBond) {\n        // Note: re-entrancy guard is done in the inner call.\n        return disputePriceFor(msg.sender, requester, identifier, timestamp, ancillaryData);\n    }\n\n    /**\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\n     * hasn't been settled.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return resolved price.\n     */\n    function settleAndGetPrice(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external override nonReentrant() returns (int256) {\n        if (_getState(msg.sender, identifier, timestamp, ancillaryData) != State.Settled) {\n            _settle(msg.sender, identifier, timestamp, ancillaryData);\n        }\n\n        return _getRequest(msg.sender, identifier, timestamp, ancillaryData).resolvedPrice;\n    }\n\n    /**\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return payout the amount that the \"winner\" (proposer or disputer) receives on settlement. This amount includes\n     * the returned bonds as well as additional rewards.\n     */\n    function settle(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external override nonReentrant() returns (uint256 payout) {\n        return _settle(requester, identifier, timestamp, ancillaryData);\n    }\n\n    /**\n     * @notice Gets the current data structure containing all information about a price request.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return the Request data structure.\n     */\n    function getRequest(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) public view override nonReentrantView() returns (Request memory) {\n        return _getRequest(requester, identifier, timestamp, ancillaryData);\n    }\n\n    /**\n     * @notice Computes the current state of a price request. See the State enum for more details.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return the State.\n     */\n    function getState(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) public view override nonReentrantView() returns (State) {\n        return _getState(requester, identifier, timestamp, ancillaryData);\n    }\n\n    /**\n     * @notice Checks if a given request has resolved, expired or been settled (i.e the optimistic oracle has a price).\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return boolean indicating true if price exists and false if not.\n     */\n    function hasPrice(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) public view override nonReentrantView() returns (bool) {\n        State state = _getState(requester, identifier, timestamp, ancillaryData);\n        return state == State.Settled || state == State.Resolved || state == State.Expired;\n    }\n\n    /**\n     * @notice Generates stamped ancillary data in the format that it would be used in the case of a price dispute.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param requester sender of the initial price request.\n     * @return the stamped ancillary bytes.\n     */\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\n        public\n        pure\n        override\n        returns (bytes memory)\n    {\n        return _stampAncillaryData(ancillaryData, requester);\n    }\n\n    function _getId(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) private pure returns (bytes32) {\n        return keccak256(abi.encodePacked(requester, identifier, timestamp, ancillaryData));\n    }\n\n    function _settle(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) private returns (uint256 payout) {\n        State state = _getState(requester, identifier, timestamp, ancillaryData);\n\n        // Set it to settled so this function can never be entered again.\n        Request storage request = _getRequest(requester, identifier, timestamp, ancillaryData);\n        request.settled = true;\n\n        if (state == State.Expired) {\n            // In the expiry case, just pay back the proposer's bond and final fee along with the reward.\n            request.resolvedPrice = request.proposedPrice;\n            payout = request.bond.add(request.finalFee).add(request.reward);\n            request.currency.safeTransfer(request.proposer, payout);\n        } else if (state == State.Resolved) {\n            // In the Resolved case, pay either the disputer or the proposer the entire payout (+ bond and reward).\n            request.resolvedPrice = _getOracle().getPrice(\n                identifier,\n                timestamp,\n                _stampAncillaryData(ancillaryData, requester)\n            );\n            bool disputeSuccess = request.resolvedPrice != request.proposedPrice;\n            uint256 bond = request.bond;\n\n            // Unburned portion of the loser's bond = 1 - burned bond.\n            uint256 unburnedBond = bond.sub(_computeBurnedBond(request));\n\n            // Winner gets:\n            // - Their bond back.\n            // - The unburned portion of the loser's bond.\n            // - Their final fee back.\n            // - The request reward (if not already refunded -- if refunded, it will be set to 0).\n            payout = bond.add(unburnedBond).add(request.finalFee).add(request.reward);\n            request.currency.safeTransfer(disputeSuccess ? request.disputer : request.proposer, payout);\n        } else {\n            revert(\"_settle: not settleable\");\n        }\n\n        emit Settle(\n            requester,\n            request.proposer,\n            request.disputer,\n            identifier,\n            timestamp,\n            ancillaryData,\n            request.resolvedPrice,\n            payout\n        );\n\n        // Callback.\n        if (address(requester).isContract())\n            try\n                OptimisticRequester(requester).priceSettled(identifier, timestamp, ancillaryData, request.resolvedPrice)\n            {} catch {}\n    }\n\n    function _getRequest(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) private view returns (Request storage) {\n        return requests[_getId(requester, identifier, timestamp, ancillaryData)];\n    }\n\n    function _computeBurnedBond(Request storage request) private view returns (uint256) {\n        // burnedBond = floor(bond / 2)\n        return request.bond.div(2);\n    }\n\n    function _validateLiveness(uint256 _liveness) private pure {\n        require(_liveness < 5200 weeks, \"Liveness too large\");\n        require(_liveness > 0, \"Liveness cannot be 0\");\n    }\n\n    function _getState(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) internal view returns (State) {\n        Request storage request = _getRequest(requester, identifier, timestamp, ancillaryData);\n\n        if (address(request.currency) == address(0)) {\n            return State.Invalid;\n        }\n\n        if (request.proposer == address(0)) {\n            return State.Requested;\n        }\n\n        if (request.settled) {\n            return State.Settled;\n        }\n\n        if (request.disputer == address(0)) {\n            return request.expirationTime <= getCurrentTime() ? State.Expired : State.Proposed;\n        }\n\n        return\n            _getOracle().hasPrice(identifier, timestamp, _stampAncillaryData(ancillaryData, requester))\n                ? State.Resolved\n                : State.Disputed;\n    }\n\n    function _getOracle() internal view returns (OracleAncillaryInterface) {\n        return OracleAncillaryInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\n    }\n\n    function _getCollateralWhitelist() internal view returns (AddressWhitelist) {\n        return AddressWhitelist(finder.getImplementationAddress(OracleInterfaces.CollateralWhitelist));\n    }\n\n    function _getStore() internal view returns (StoreInterface) {\n        return StoreInterface(finder.getImplementationAddress(OracleInterfaces.Store));\n    }\n\n    function _getIdentifierWhitelist() internal view returns (IdentifierWhitelistInterface) {\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\n    }\n\n    /**\n     * @dev We don't handle specifically the case where `ancillaryData` is not already readily translateable in utf8.\n     * For those cases, we assume that the client will be able to strip out the utf8-translateable part of the\n     * ancillary data that this contract stamps.\n     */\n    function _stampAncillaryData(bytes memory ancillaryData, address requester) internal pure returns (bytes memory) {\n        // Since this contract will be the one to formally submit DVM price requests, its useful for voters to know who\n        // the original requester was.\n        return AncillaryData.appendKeyValueAddress(ancillaryData, \"ooRequester\", requester);\n    }\n\n    function getCurrentTime() public view override(Testable, OptimisticOracleInterface) returns (uint256) {\n        return Testable.getCurrentTime();\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/OptimisticOracleV2.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"../interfaces/StoreInterface.sol\";\nimport \"../interfaces/OracleAncillaryInterface.sol\";\nimport \"../interfaces/FinderInterface.sol\";\nimport \"../interfaces/IdentifierWhitelistInterface.sol\";\nimport \"../interfaces/OptimisticOracleV2Interface.sol\";\nimport \"./Constants.sol\";\n\nimport \"../../common/implementation/Testable.sol\";\nimport \"../../common/implementation/Lockable.sol\";\nimport \"../../common/implementation/FixedPoint.sol\";\nimport \"../../common/implementation/AncillaryData.sol\";\nimport \"../../common/implementation/AddressWhitelist.sol\";\n\n/**\n * @title Optimistic Requester.\n * @notice Optional interface that requesters can implement to receive callbacks.\n * @dev this contract does _not_ work with ERC777 collateral currencies or any others that call into the receiver on\n * transfer(). Using an ERC777 token would allow a user to maliciously grief other participants (while also losing\n * money themselves).\n */\ninterface OptimisticRequester {\n    /**\n     * @notice Callback for proposals.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data of the price being requested.\n     */\n    function priceProposed(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external;\n\n    /**\n     * @notice Callback for disputes.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param refund refund received in the case that refundOnDispute was enabled.\n     */\n    function priceDisputed(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        uint256 refund\n    ) external;\n\n    /**\n     * @notice Callback for settlement.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param price price that was resolved by the escalation process.\n     */\n    function priceSettled(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        int256 price\n    ) external;\n}\n\n/**\n * @title Optimistic Oracle.\n * @notice Pre-DVM escalation contract that allows faster settlement.\n */\ncontract OptimisticOracleV2 is OptimisticOracleV2Interface, Testable, Lockable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    // Finder to provide addresses for DVM contracts.\n    FinderInterface public override finder;\n\n    // Default liveness value for all price requests.\n    uint256 public override defaultLiveness;\n\n    // This is effectively the extra ancillary data to add \",ooRequester:0000000000000000000000000000000000000000\".\n    uint256 private constant MAX_ADDED_ANCILLARY_DATA = 53;\n    uint256 public constant OO_ANCILLARY_DATA_LIMIT = ancillaryBytesLimit - MAX_ADDED_ANCILLARY_DATA;\n    int256 public constant TOO_EARLY_RESPONSE = type(int256).min;\n\n    /**\n     * @notice Constructor.\n     * @param _liveness default liveness applied to each price request.\n     * @param _finderAddress finder to use to get addresses of DVM contracts.\n     * @param _timerAddress address of the timer contract. Should be 0x0 in prod.\n     */\n    constructor(\n        uint256 _liveness,\n        address _finderAddress,\n        address _timerAddress\n    ) Testable(_timerAddress) {\n        finder = FinderInterface(_finderAddress);\n        _validateLiveness(_liveness);\n        defaultLiveness = _liveness;\n    }\n\n    /**\n     * @notice Requests a new price.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\n     *               which could make sense if the contract requests and proposes the value in the same call or\n     *               provides its own reward system.\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\n     * This can be changed with a subsequent call to setBond().\n     */\n    function requestPrice(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        IERC20 currency,\n        uint256 reward\n    ) external override nonReentrant() returns (uint256 totalBond) {\n        require(_getState(msg.sender, identifier, timestamp, ancillaryData) == State.Invalid, \"requestPrice: Invalid\");\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier), \"Unsupported identifier\");\n        require(_getCollateralWhitelist().isOnWhitelist(address(currency)), \"Unsupported currency\");\n        require(timestamp <= getCurrentTime(), \"Timestamp in future\");\n\n        // This ensures that the ancillary data is <= the OO limit, which is lower than the DVM limit because the\n        // OO adds some data before sending to the DVM.\n        require(ancillaryData.length <= OO_ANCILLARY_DATA_LIMIT, \"Ancillary Data too long\");\n\n        uint256 finalFee = _getStore().computeFinalFee(address(currency)).rawValue;\n        requests[_getId(msg.sender, identifier, timestamp, ancillaryData)] = Request({\n            proposer: address(0),\n            disputer: address(0),\n            currency: currency,\n            settled: false,\n            requestSettings: RequestSettings({\n                eventBased: false,\n                refundOnDispute: false,\n                callbackOnPriceProposed: false,\n                callbackOnPriceDisputed: false,\n                callbackOnPriceSettled: false,\n                bond: finalFee,\n                customLiveness: 0\n            }),\n            proposedPrice: 0,\n            resolvedPrice: 0,\n            expirationTime: 0,\n            reward: reward,\n            finalFee: finalFee\n        });\n\n        if (reward > 0) {\n            currency.safeTransferFrom(msg.sender, address(this), reward);\n        }\n\n        emit RequestPrice(msg.sender, identifier, timestamp, ancillaryData, address(currency), reward, finalFee);\n\n        // This function returns the initial proposal bond for this request, which can be customized by calling\n        // setBond() with the same identifier and timestamp.\n        return finalFee.mul(2);\n    }\n\n    /**\n     * @notice Set the proposal bond associated with a price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param bond custom bond amount to set.\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\n     * changed again with a subsequent call to setBond().\n     */\n    function setBond(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        uint256 bond\n    ) external override nonReentrant() returns (uint256 totalBond) {\n        require(_getState(msg.sender, identifier, timestamp, ancillaryData) == State.Requested, \"setBond: Requested\");\n        Request storage request = _getRequest(msg.sender, identifier, timestamp, ancillaryData);\n        request.requestSettings.bond = bond;\n\n        // Total bond is the final fee + the newly set bond.\n        return bond.add(request.finalFee);\n    }\n\n    /**\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \"hedge\" the caller\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\n     * bond, so there is still profit to be made even if the reward is refunded.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     */\n    function setRefundOnDispute(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external override nonReentrant() {\n        require(\n            _getState(msg.sender, identifier, timestamp, ancillaryData) == State.Requested,\n            \"setRefundOnDispute: Requested\"\n        );\n        _getRequest(msg.sender, identifier, timestamp, ancillaryData).requestSettings.refundOnDispute = true;\n    }\n\n    /**\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\n     * being auto-resolved.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param customLiveness new custom liveness.\n     */\n    function setCustomLiveness(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        uint256 customLiveness\n    ) external override nonReentrant() {\n        require(\n            _getState(msg.sender, identifier, timestamp, ancillaryData) == State.Requested,\n            \"setCustomLiveness: Requested\"\n        );\n        _validateLiveness(customLiveness);\n        _getRequest(msg.sender, identifier, timestamp, ancillaryData).requestSettings.customLiveness = customLiveness;\n    }\n\n    /**\n     * @notice Sets the request to be an \"event-based\" request.\n     * @dev Calling this method has a few impacts on the request:\n     *\n     * 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated\n     *    with the request.\n     *\n     * 2. The proposer cannot propose the \"too early\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who\n     *    prematurely proposes a response loses their bond.\n     *\n     * 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to\n     *    the requesting contract.\n     *\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     */\n    function setEventBased(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external override nonReentrant() {\n        require(\n            _getState(msg.sender, identifier, timestamp, ancillaryData) == State.Requested,\n            \"setEventBased: Requested\"\n        );\n        Request storage request = _getRequest(msg.sender, identifier, timestamp, ancillaryData);\n        request.requestSettings.eventBased = true;\n        request.requestSettings.refundOnDispute = true;\n    }\n\n    /**\n     * @notice Sets which callbacks should be enabled for the request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param callbackOnPriceProposed whether to enable the callback onPriceProposed.\n     * @param callbackOnPriceDisputed whether to enable the callback onPriceDisputed.\n     * @param callbackOnPriceSettled whether to enable the callback onPriceSettled.\n     */\n    function setCallbacks(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        bool callbackOnPriceProposed,\n        bool callbackOnPriceDisputed,\n        bool callbackOnPriceSettled\n    ) external override nonReentrant() {\n        require(\n            _getState(msg.sender, identifier, timestamp, ancillaryData) == State.Requested,\n            \"setCallbacks: Requested\"\n        );\n        Request storage request = _getRequest(msg.sender, identifier, timestamp, ancillaryData);\n        request.requestSettings.callbackOnPriceProposed = callbackOnPriceProposed;\n        request.requestSettings.callbackOnPriceDisputed = callbackOnPriceDisputed;\n        request.requestSettings.callbackOnPriceSettled = callbackOnPriceSettled;\n    }\n\n    /**\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\n     * from this proposal. However, any bonds are pulled from the caller.\n     * @param proposer address to set as the proposer.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function proposePriceFor(\n        address proposer,\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        int256 proposedPrice\n    ) public override nonReentrant() returns (uint256 totalBond) {\n        require(proposer != address(0), \"proposer address must be non 0\");\n        require(\n            _getState(requester, identifier, timestamp, ancillaryData) == State.Requested,\n            \"proposePriceFor: Requested\"\n        );\n        Request storage request = _getRequest(requester, identifier, timestamp, ancillaryData);\n        if (request.requestSettings.eventBased)\n            require(proposedPrice != TOO_EARLY_RESPONSE, \"Cannot propose 'too early'\");\n        request.proposer = proposer;\n        request.proposedPrice = proposedPrice;\n\n        // If a custom liveness has been set, use it instead of the default.\n        request.expirationTime = getCurrentTime().add(\n            request.requestSettings.customLiveness != 0 ? request.requestSettings.customLiveness : defaultLiveness\n        );\n\n        totalBond = request.requestSettings.bond.add(request.finalFee);\n        if (totalBond > 0) request.currency.safeTransferFrom(msg.sender, address(this), totalBond);\n\n        emit ProposePrice(\n            requester,\n            proposer,\n            identifier,\n            timestamp,\n            ancillaryData,\n            proposedPrice,\n            request.expirationTime,\n            address(request.currency)\n        );\n\n        // End the re-entrancy guard early to allow the caller to potentially take OO-related actions inside this callback.\n        _startReentrantGuardDisabled();\n        // Callback.\n        if (address(requester).isContract() && request.requestSettings.callbackOnPriceProposed)\n            OptimisticRequester(requester).priceProposed(identifier, timestamp, ancillaryData);\n        _endReentrantGuardDisabled();\n    }\n\n    /**\n     * @notice Proposes a price value for an existing price request.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function proposePrice(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        int256 proposedPrice\n    ) external override returns (uint256 totalBond) {\n        // Note: re-entrancy guard is done in the inner call.\n        return proposePriceFor(msg.sender, requester, identifier, timestamp, ancillaryData, proposedPrice);\n    }\n\n    /**\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\n     * @param disputer address to set as the disputer.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\n     */\n    function disputePriceFor(\n        address disputer,\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) public override nonReentrant() returns (uint256 totalBond) {\n        require(disputer != address(0), \"disputer address must be non 0\");\n        require(\n            _getState(requester, identifier, timestamp, ancillaryData) == State.Proposed,\n            \"disputePriceFor: Proposed\"\n        );\n        Request storage request = _getRequest(requester, identifier, timestamp, ancillaryData);\n        request.disputer = disputer;\n\n        uint256 finalFee = request.finalFee;\n        uint256 bond = request.requestSettings.bond;\n        totalBond = bond.add(finalFee);\n        if (totalBond > 0) {\n            request.currency.safeTransferFrom(msg.sender, address(this), totalBond);\n        }\n\n        StoreInterface store = _getStore();\n\n        // Along with the final fee, \"burn\" part of the loser's bond to ensure that a larger bond always makes it\n        // proportionally more expensive to delay the resolution even if the proposer and disputer are the same\n        // party.\n\n        // The total fee is the burned bond and the final fee added together.\n        uint256 totalFee = finalFee.add(_computeBurnedBond(request));\n        if (totalFee > 0) {\n            request.currency.safeIncreaseAllowance(address(store), totalFee);\n            _getStore().payOracleFeesErc20(address(request.currency), FixedPoint.Unsigned(totalFee));\n        }\n\n        _getOracle().requestPrice(\n            identifier,\n            _getTimestampForDvmRequest(request, timestamp),\n            _stampAncillaryData(ancillaryData, requester)\n        );\n\n        // Compute refund.\n        uint256 refund = 0;\n        if (request.reward > 0 && request.requestSettings.refundOnDispute) {\n            refund = request.reward;\n            request.reward = 0;\n            request.currency.safeTransfer(requester, refund);\n        }\n\n        emit DisputePrice(\n            requester,\n            request.proposer,\n            disputer,\n            identifier,\n            timestamp,\n            ancillaryData,\n            request.proposedPrice\n        );\n\n        // End the re-entrancy guard early to allow the caller to potentially re-request inside this callback.\n        _startReentrantGuardDisabled();\n        // Callback.\n        if (address(requester).isContract() && request.requestSettings.callbackOnPriceDisputed)\n            OptimisticRequester(requester).priceDisputed(identifier, timestamp, ancillaryData, refund);\n        _endReentrantGuardDisabled();\n    }\n\n    /**\n     * @notice Disputes a price value for an existing price request with an active proposal.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\n     */\n    function disputePrice(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external override returns (uint256 totalBond) {\n        // Note: re-entrancy guard is done in the inner call.\n        return disputePriceFor(msg.sender, requester, identifier, timestamp, ancillaryData);\n    }\n\n    /**\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\n     * hasn't been settled.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return resolved price.\n     */\n    function settleAndGetPrice(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external override nonReentrant() returns (int256) {\n        if (_getState(msg.sender, identifier, timestamp, ancillaryData) != State.Settled) {\n            _settle(msg.sender, identifier, timestamp, ancillaryData);\n        }\n\n        return _getRequest(msg.sender, identifier, timestamp, ancillaryData).resolvedPrice;\n    }\n\n    /**\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return payout the amount that the \"winner\" (proposer or disputer) receives on settlement. This amount includes\n     * the returned bonds as well as additional rewards.\n     */\n    function settle(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external override nonReentrant() returns (uint256 payout) {\n        return _settle(requester, identifier, timestamp, ancillaryData);\n    }\n\n    /**\n     * @notice Gets the current data structure containing all information about a price request.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return the Request data structure.\n     */\n    function getRequest(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) public view override nonReentrantView() returns (Request memory) {\n        return _getRequest(requester, identifier, timestamp, ancillaryData);\n    }\n\n    /**\n     * @notice Computes the current state of a price request. See the State enum for more details.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return the State.\n     */\n    function getState(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) public view override nonReentrantView() returns (State) {\n        return _getState(requester, identifier, timestamp, ancillaryData);\n    }\n\n    /**\n     * @notice Checks if a given request has resolved, expired or been settled (i.e the optimistic oracle has a price).\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return boolean indicating true if price exists and false if not.\n     */\n    function hasPrice(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) public view override nonReentrantView() returns (bool) {\n        State state = _getState(requester, identifier, timestamp, ancillaryData);\n        return state == State.Settled || state == State.Resolved || state == State.Expired;\n    }\n\n    /**\n     * @notice Generates stamped ancillary data in the format that it would be used in the case of a price dispute.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param requester sender of the initial price request.\n     * @return the stamped ancillary bytes.\n     */\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\n        public\n        pure\n        override\n        returns (bytes memory)\n    {\n        return _stampAncillaryData(ancillaryData, requester);\n    }\n\n    function _getId(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) private pure returns (bytes32) {\n        return keccak256(abi.encodePacked(requester, identifier, timestamp, ancillaryData));\n    }\n\n    function _settle(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) private returns (uint256 payout) {\n        State state = _getState(requester, identifier, timestamp, ancillaryData);\n\n        // Set it to settled so this function can never be entered again.\n        Request storage request = _getRequest(requester, identifier, timestamp, ancillaryData);\n        request.settled = true;\n\n        if (state == State.Expired) {\n            // In the expiry case, just pay back the proposer's bond and final fee along with the reward.\n            request.resolvedPrice = request.proposedPrice;\n            payout = request.requestSettings.bond.add(request.finalFee).add(request.reward);\n            request.currency.safeTransfer(request.proposer, payout);\n        } else if (state == State.Resolved) {\n            // In the Resolved case, pay either the disputer or the proposer the entire payout (+ bond and reward).\n            request.resolvedPrice = _getOracle().getPrice(\n                identifier,\n                _getTimestampForDvmRequest(request, timestamp),\n                _stampAncillaryData(ancillaryData, requester)\n            );\n            bool disputeSuccess = request.resolvedPrice != request.proposedPrice;\n            uint256 bond = request.requestSettings.bond;\n\n            // Unburned portion of the loser's bond = 1 - burned bond.\n            uint256 unburnedBond = bond.sub(_computeBurnedBond(request));\n\n            // Winner gets:\n            // - Their bond back.\n            // - The unburned portion of the loser's bond.\n            // - Their final fee back.\n            // - The request reward (if not already refunded -- if refunded, it will be set to 0).\n            payout = bond.add(unburnedBond).add(request.finalFee).add(request.reward);\n            request.currency.safeTransfer(disputeSuccess ? request.disputer : request.proposer, payout);\n        } else revert(\"_settle: not settleable\");\n\n        emit Settle(\n            requester,\n            request.proposer,\n            request.disputer,\n            identifier,\n            timestamp,\n            ancillaryData,\n            request.resolvedPrice,\n            payout\n        );\n\n        // Temporarily disable the re-entrancy guard early to allow the caller to take an OO-related action inside this callback.\n        _startReentrantGuardDisabled();\n        // Callback.\n        if (address(requester).isContract() && request.requestSettings.callbackOnPriceSettled)\n            OptimisticRequester(requester).priceSettled(identifier, timestamp, ancillaryData, request.resolvedPrice);\n        _endReentrantGuardDisabled();\n    }\n\n    function _getRequest(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) private view returns (Request storage) {\n        return requests[_getId(requester, identifier, timestamp, ancillaryData)];\n    }\n\n    function _computeBurnedBond(Request storage request) private view returns (uint256) {\n        // burnedBond = floor(bond / 2)\n        return request.requestSettings.bond.div(2);\n    }\n\n    function _validateLiveness(uint256 _liveness) private pure {\n        require(_liveness < 5200 weeks, \"Liveness too large\");\n        require(_liveness > 0, \"Liveness cannot be 0\");\n    }\n\n    function _getState(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) internal view returns (State) {\n        Request storage request = _getRequest(requester, identifier, timestamp, ancillaryData);\n\n        if (address(request.currency) == address(0)) return State.Invalid;\n\n        if (request.proposer == address(0)) return State.Requested;\n\n        if (request.settled) return State.Settled;\n\n        if (request.disputer == address(0))\n            return request.expirationTime <= getCurrentTime() ? State.Expired : State.Proposed;\n\n        return\n            _getOracle().hasPrice(\n                identifier,\n                _getTimestampForDvmRequest(request, timestamp),\n                _stampAncillaryData(ancillaryData, requester)\n            )\n                ? State.Resolved\n                : State.Disputed;\n    }\n\n    function _getOracle() internal view returns (OracleAncillaryInterface) {\n        return OracleAncillaryInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\n    }\n\n    function _getCollateralWhitelist() internal view returns (AddressWhitelist) {\n        return AddressWhitelist(finder.getImplementationAddress(OracleInterfaces.CollateralWhitelist));\n    }\n\n    function _getStore() internal view returns (StoreInterface) {\n        return StoreInterface(finder.getImplementationAddress(OracleInterfaces.Store));\n    }\n\n    function _getIdentifierWhitelist() internal view returns (IdentifierWhitelistInterface) {\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\n    }\n\n    function _getTimestampForDvmRequest(Request storage request, uint256 requestTimestamp)\n        internal\n        view\n        returns (uint256)\n    {\n        if (request.requestSettings.eventBased) {\n            uint256 liveness =\n                request.requestSettings.customLiveness != 0 ? request.requestSettings.customLiveness : defaultLiveness;\n            return request.expirationTime.sub(liveness);\n        } else {\n            return requestTimestamp;\n        }\n    }\n\n    /**\n     * @dev We don't handle specifically the case where `ancillaryData` is not already readily translateable in utf8.\n     * For those cases, we assume that the client will be able to strip out the utf8-translateable part of the\n     * ancillary data that this contract stamps.\n     */\n    function _stampAncillaryData(bytes memory ancillaryData, address requester) internal pure returns (bytes memory) {\n        // Since this contract will be the one to formally submit DVM price requests, its useful for voters to know who\n        // the original requester was.\n        return AncillaryData.appendKeyValueAddress(ancillaryData, \"ooRequester\", requester);\n    }\n\n    function getCurrentTime() public view override(Testable, OptimisticOracleV2Interface) returns (uint256) {\n        return Testable.getCurrentTime();\n    }\n}\n"
    },
    "contracts/UMA/oracle/interfaces/OptimisticOracleV2Interface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./FinderInterface.sol\";\n\n/**\n * @title Financial contract facing Oracle interface.\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\n */\nabstract contract OptimisticOracleV2Interface {\n    event RequestPrice(\n        address indexed requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes ancillaryData,\n        address currency,\n        uint256 reward,\n        uint256 finalFee\n    );\n    event ProposePrice(\n        address indexed requester,\n        address indexed proposer,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes ancillaryData,\n        int256 proposedPrice,\n        uint256 expirationTimestamp,\n        address currency\n    );\n    event DisputePrice(\n        address indexed requester,\n        address indexed proposer,\n        address indexed disputer,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes ancillaryData,\n        int256 proposedPrice\n    );\n    event Settle(\n        address indexed requester,\n        address indexed proposer,\n        address indexed disputer,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes ancillaryData,\n        int256 price,\n        uint256 payout\n    );\n    // Struct representing the state of a price request.\n    enum State {\n        Invalid, // Never requested.\n        Requested, // Requested, no other actions taken.\n        Proposed, // Proposed, but not expired or disputed yet.\n        Expired, // Proposed, not disputed, past liveness.\n        Disputed, // Disputed, but no DVM price returned yet.\n        Resolved, // Disputed and DVM price is available.\n        Settled // Final price has been set in the contract (can get here from Expired or Resolved).\n    }\n\n    struct RequestSettings {\n        bool eventBased; // True if the request is set to be event-based.\n        bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\n        bool callbackOnPriceProposed; // True if callbackOnPriceProposed callback is required.\n        bool callbackOnPriceDisputed; // True if callbackOnPriceDisputed callback is required.\n        bool callbackOnPriceSettled; // True if callbackOnPriceSettled callback is required.\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\n        uint256 customLiveness; // Custom liveness value set by the requester.\n    }\n\n    // Struct representing a price request.\n    struct Request {\n        address proposer; // Address of the proposer.\n        address disputer; // Address of the disputer.\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\n        bool settled; // True if the request is settled.\n        RequestSettings requestSettings; // Custom settings associated with a request.\n        int256 proposedPrice; // Price that the proposer submitted.\n        int256 resolvedPrice; // Price resolved once the request is settled.\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\n    }\n\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\n    // to accept a price request made with ancillary data length over a certain size.\n    uint256 public constant ancillaryBytesLimit = 8192;\n\n    function defaultLiveness() external view virtual returns (uint256);\n\n    function finder() external view virtual returns (FinderInterface);\n\n    function getCurrentTime() external view virtual returns (uint256);\n\n    // Note: this is required so that typechain generates a return value with named fields.\n    mapping(bytes32 => Request) public requests;\n\n    /**\n     * @notice Requests a new price.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\n     *               which could make sense if the contract requests and proposes the value in the same call or\n     *               provides its own reward system.\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\n     * This can be changed with a subsequent call to setBond().\n     */\n    function requestPrice(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        IERC20 currency,\n        uint256 reward\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Set the proposal bond associated with a price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param bond custom bond amount to set.\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\n     * changed again with a subsequent call to setBond().\n     */\n    function setBond(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        uint256 bond\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \"hedge\" the caller\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\n     * bond, so there is still profit to be made even if the reward is refunded.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     */\n    function setRefundOnDispute(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external virtual;\n\n    /**\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\n     * being auto-resolved.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param customLiveness new custom liveness.\n     */\n    function setCustomLiveness(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        uint256 customLiveness\n    ) external virtual;\n\n    /**\n     * @notice Sets the request to be an \"event-based\" request.\n     * @dev Calling this method has a few impacts on the request:\n     *\n     * 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated\n     *    with the request.\n     *\n     * 2. The proposer cannot propose the \"too early\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who\n     *    prematurely proposes a response loses their bond.\n     *\n     * 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to\n     *    the requesting contract.\n     *\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     */\n    function setEventBased(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external virtual;\n\n    /**\n     * @notice Sets which callbacks should be enabled for the request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param callbackOnPriceProposed whether to enable the callback onPriceProposed.\n     * @param callbackOnPriceDisputed whether to enable the callback onPriceDisputed.\n     * @param callbackOnPriceSettled whether to enable the callback onPriceSettled.\n     */\n    function setCallbacks(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        bool callbackOnPriceProposed,\n        bool callbackOnPriceDisputed,\n        bool callbackOnPriceSettled\n    ) external virtual;\n\n    /**\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\n     * from this proposal. However, any bonds are pulled from the caller.\n     * @param proposer address to set as the proposer.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function proposePriceFor(\n        address proposer,\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        int256 proposedPrice\n    ) public virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Proposes a price value for an existing price request.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function proposePrice(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        int256 proposedPrice\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\n     * @param disputer address to set as the disputer.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the disputer once settled if the dispute was value (the proposal was incorrect).\n     */\n    function disputePriceFor(\n        address disputer,\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) public virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Disputes a price value for an existing price request with an active proposal.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\n     */\n    function disputePrice(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\n     * hasn't been settled.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return resolved price.\n     */\n    function settleAndGetPrice(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external virtual returns (int256);\n\n    /**\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return payout the amount that the \"winner\" (proposer or disputer) receives on settlement. This amount includes\n     * the returned bonds as well as additional rewards.\n     */\n    function settle(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external virtual returns (uint256 payout);\n\n    /**\n     * @notice Gets the current data structure containing all information about a price request.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return the Request data structure.\n     */\n    function getRequest(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) public view virtual returns (Request memory);\n\n    /**\n     * @notice Returns the state of a price request.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return the State enum value.\n     */\n    function getState(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) public view virtual returns (State);\n\n    /**\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return true if price has resolved or settled, false otherwise.\n     */\n    function hasPrice(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) public view virtual returns (bool);\n\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\n        public\n        view\n        virtual\n        returns (bytes memory);\n}\n"
    },
    "contracts/UMA/oracle/implementation/test/OptimisticRequesterTest.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../OptimisticOracleV2.sol\";\n\n// This is just a test contract to make requests to the optimistic oracle.\ncontract OptimisticRequesterTest is OptimisticRequester {\n    OptimisticOracleV2 optimisticOracle;\n    bool public shouldRevert = false;\n\n    // State variables to track incoming calls.\n    bytes32 public identifier;\n    uint256 public timestamp;\n    bytes public ancillaryData;\n    uint256 public refund;\n    int256 public price;\n\n    // Implement collateralCurrency so that this contract simulates a financial contract whose collateral\n    // token can be fetched by off-chain clients.\n    IERC20 public collateralCurrency;\n\n    // Manually set an expiration timestamp to simulate expiry price requests\n    uint256 public expirationTimestamp;\n\n    constructor(OptimisticOracleV2 _optimisticOracle) {\n        optimisticOracle = _optimisticOracle;\n    }\n\n    function requestPrice(\n        bytes32 _identifier,\n        uint256 _timestamp,\n        bytes memory _ancillaryData,\n        IERC20 currency,\n        uint256 reward\n    ) external {\n        // Set collateral currency to last requested currency:\n        collateralCurrency = currency;\n\n        currency.approve(address(optimisticOracle), reward);\n        optimisticOracle.requestPrice(_identifier, _timestamp, _ancillaryData, currency, reward);\n    }\n\n    function settleAndGetPrice(\n        bytes32 _identifier,\n        uint256 _timestamp,\n        bytes memory _ancillaryData\n    ) external returns (int256) {\n        return optimisticOracle.settleAndGetPrice(_identifier, _timestamp, _ancillaryData);\n    }\n\n    function setBond(\n        bytes32 _identifier,\n        uint256 _timestamp,\n        bytes memory _ancillaryData,\n        uint256 bond\n    ) external {\n        optimisticOracle.setBond(_identifier, _timestamp, _ancillaryData, bond);\n    }\n\n    function setRefundOnDispute(\n        bytes32 _identifier,\n        uint256 _timestamp,\n        bytes memory _ancillaryData\n    ) external {\n        optimisticOracle.setRefundOnDispute(_identifier, _timestamp, _ancillaryData);\n    }\n\n    function setCustomLiveness(\n        bytes32 _identifier,\n        uint256 _timestamp,\n        bytes memory _ancillaryData,\n        uint256 customLiveness\n    ) external {\n        optimisticOracle.setCustomLiveness(_identifier, _timestamp, _ancillaryData, customLiveness);\n    }\n\n    function setEventBased(\n        bytes32 _identifier,\n        uint256 _timestamp,\n        bytes memory _ancillaryData\n    ) external {\n        optimisticOracle.setEventBased(_identifier, _timestamp, _ancillaryData);\n    }\n\n    function setCallbacks(\n        bytes32 _identifier,\n        uint256 _timestamp,\n        bytes memory _ancillaryData,\n        bool _callbackOnPriceProposed,\n        bool _callbackOnPriceDisputed,\n        bool _callbackOnPriceSettled\n    ) external {\n        optimisticOracle.setCallbacks(\n            _identifier,\n            _timestamp,\n            _ancillaryData,\n            _callbackOnPriceProposed,\n            _callbackOnPriceDisputed,\n            _callbackOnPriceSettled\n        );\n    }\n\n    function setRevert(bool _shouldRevert) external {\n        shouldRevert = _shouldRevert;\n    }\n\n    function setExpirationTimestamp(uint256 _expirationTimestamp) external {\n        expirationTimestamp = _expirationTimestamp;\n    }\n\n    function clearState() external {\n        delete identifier;\n        delete timestamp;\n        delete refund;\n        delete price;\n    }\n\n    function priceProposed(\n        bytes32 _identifier,\n        uint256 _timestamp,\n        bytes memory _ancillaryData\n    ) external override {\n        require(!shouldRevert);\n        identifier = _identifier;\n        timestamp = _timestamp;\n        ancillaryData = _ancillaryData;\n    }\n\n    function priceDisputed(\n        bytes32 _identifier,\n        uint256 _timestamp,\n        bytes memory _ancillaryData,\n        uint256 _refund\n    ) external override {\n        require(!shouldRevert);\n        identifier = _identifier;\n        timestamp = _timestamp;\n        ancillaryData = _ancillaryData;\n        refund = _refund;\n    }\n\n    function priceSettled(\n        bytes32 _identifier,\n        uint256 _timestamp,\n        bytes memory _ancillaryData,\n        int256 _price\n    ) external override {\n        require(!shouldRevert);\n        identifier = _identifier;\n        timestamp = _timestamp;\n        ancillaryData = _ancillaryData;\n        price = _price;\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/Store.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../common/implementation/FixedPoint.sol\";\nimport \"../../common/implementation/MultiRole.sol\";\nimport \"../../common/implementation/Withdrawable.sol\";\nimport \"../../common/implementation/Testable.sol\";\nimport \"../interfaces/StoreInterface.sol\";\n\n/**\n * @title An implementation of Store that can accept Oracle fees in ETH or any arbitrary ERC20 token.\n */\ncontract Store is StoreInterface, Withdrawable, Testable {\n    using SafeMath for uint256;\n    using FixedPoint for FixedPoint.Unsigned;\n    using FixedPoint for uint256;\n    using SafeERC20 for IERC20;\n\n    /****************************************\n     *    INTERNAL VARIABLES AND STORAGE    *\n     ****************************************/\n\n    enum Roles { Owner, Withdrawer }\n\n    FixedPoint.Unsigned public fixedOracleFeePerSecondPerPfc; // Percentage of 1 E.g., .1 is 10% Oracle fee.\n    FixedPoint.Unsigned public weeklyDelayFeePerSecondPerPfc; // Percentage of 1 E.g., .1 is 10% weekly delay fee.\n\n    mapping(address => FixedPoint.Unsigned) public finalFees;\n    uint256 public constant SECONDS_PER_WEEK = 604800;\n\n    /****************************************\n     *                EVENTS                *\n     ****************************************/\n\n    event NewFixedOracleFeePerSecondPerPfc(FixedPoint.Unsigned newOracleFee);\n    event NewWeeklyDelayFeePerSecondPerPfc(FixedPoint.Unsigned newWeeklyDelayFeePerSecondPerPfc);\n    event NewFinalFee(FixedPoint.Unsigned newFinalFee);\n\n    /**\n     * @notice Construct the Store contract.\n     */\n    constructor(\n        FixedPoint.Unsigned memory _fixedOracleFeePerSecondPerPfc,\n        FixedPoint.Unsigned memory _weeklyDelayFeePerSecondPerPfc,\n        address _timerAddress\n    ) Testable(_timerAddress) {\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\n        _createWithdrawRole(uint256(Roles.Withdrawer), uint256(Roles.Owner), msg.sender);\n        setFixedOracleFeePerSecondPerPfc(_fixedOracleFeePerSecondPerPfc);\n        setWeeklyDelayFeePerSecondPerPfc(_weeklyDelayFeePerSecondPerPfc);\n    }\n\n    /****************************************\n     *  ORACLE FEE CALCULATION AND PAYMENT  *\n     ****************************************/\n\n    /**\n     * @notice Pays Oracle fees in ETH to the store.\n     * @dev To be used by contracts whose margin currency is ETH.\n     */\n    function payOracleFees() external payable override {\n        require(msg.value > 0, \"Value sent can't be zero\");\n    }\n\n    /**\n     * @notice Pays oracle fees in the margin currency, erc20Address, to the store.\n     * @dev To be used if the margin currency is an ERC20 token rather than ETH.\n     * @param erc20Address address of the ERC20 token used to pay the fee.\n     * @param amount number of tokens to transfer. An approval for at least this amount must exist.\n     */\n    function payOracleFeesErc20(address erc20Address, FixedPoint.Unsigned calldata amount) external override {\n        IERC20 erc20 = IERC20(erc20Address);\n        require(amount.isGreaterThan(0), \"Amount sent can't be zero\");\n        erc20.safeTransferFrom(msg.sender, address(this), amount.rawValue);\n    }\n\n    /**\n     * @notice Computes the regular oracle fees that a contract should pay for a period.\n     * @dev The late penalty is similar to the regular fee in that is is charged per second over the period between\n     * startTime and endTime.\n     *\n     * The late penalty percentage increases over time as follows:\n     *\n     * - 0-1 week since startTime: no late penalty\n     *\n     * - 1-2 weeks since startTime: 1x late penalty percentage is applied\n     *\n     * - 2-3 weeks since startTime: 2x late penalty percentage is applied\n     *\n     * - ...\n     *\n     * @param startTime defines the beginning time from which the fee is paid.\n     * @param endTime end time until which the fee is paid.\n     * @param pfc \"profit from corruption\", or the maximum amount of margin currency that a\n     * token sponsor could extract from the contract through corrupting the price feed in their favor.\n     * @return regularFee amount owed for the duration from start to end time for the given pfc.\n     * @return latePenalty penalty percentage, if any, for paying the fee after the deadline.\n     */\n    function computeRegularFee(\n        uint256 startTime,\n        uint256 endTime,\n        FixedPoint.Unsigned calldata pfc\n    ) external view override returns (FixedPoint.Unsigned memory regularFee, FixedPoint.Unsigned memory latePenalty) {\n        uint256 timeDiff = endTime.sub(startTime);\n\n        // Multiply by the unscaled `timeDiff` first, to get more accurate results.\n        regularFee = pfc.mul(timeDiff).mul(fixedOracleFeePerSecondPerPfc);\n\n        // Compute how long ago the start time was to compute the delay penalty.\n        uint256 paymentDelay = getCurrentTime().sub(startTime);\n\n        // Compute the additional percentage (per second) that will be charged because of the penalty.\n        // Note: if less than a week has gone by since the startTime, paymentDelay / SECONDS_PER_WEEK will truncate to\n        // 0, causing no penalty to be charged.\n        FixedPoint.Unsigned memory penaltyPercentagePerSecond =\n            weeklyDelayFeePerSecondPerPfc.mul(paymentDelay.div(SECONDS_PER_WEEK));\n\n        // Apply the penaltyPercentagePerSecond to the payment period.\n        latePenalty = pfc.mul(timeDiff).mul(penaltyPercentagePerSecond);\n    }\n\n    /**\n     * @notice Computes the final oracle fees that a contract should pay at settlement.\n     * @param currency token used to pay the final fee.\n     * @return finalFee amount due denominated in units of `currency`.\n     */\n    function computeFinalFee(address currency) external view override returns (FixedPoint.Unsigned memory) {\n        return finalFees[currency];\n    }\n\n    /****************************************\n     *   ADMIN STATE MODIFYING FUNCTIONS    *\n     ****************************************/\n\n    /**\n     * @notice Sets a new oracle fee per second.\n     * @param newFixedOracleFeePerSecondPerPfc new fee per second charged to use the oracle.\n     */\n    function setFixedOracleFeePerSecondPerPfc(FixedPoint.Unsigned memory newFixedOracleFeePerSecondPerPfc)\n        public\n        onlyRoleHolder(uint256(Roles.Owner))\n    {\n        // Oracle fees at or over 100% don't make sense.\n        require(newFixedOracleFeePerSecondPerPfc.isLessThan(1), \"Fee must be < 100% per second.\");\n        fixedOracleFeePerSecondPerPfc = newFixedOracleFeePerSecondPerPfc;\n        emit NewFixedOracleFeePerSecondPerPfc(newFixedOracleFeePerSecondPerPfc);\n    }\n\n    /**\n     * @notice Sets a new weekly delay fee.\n     * @param newWeeklyDelayFeePerSecondPerPfc fee escalation per week of late fee payment.\n     */\n    function setWeeklyDelayFeePerSecondPerPfc(FixedPoint.Unsigned memory newWeeklyDelayFeePerSecondPerPfc)\n        public\n        onlyRoleHolder(uint256(Roles.Owner))\n    {\n        require(newWeeklyDelayFeePerSecondPerPfc.isLessThan(1), \"weekly delay fee must be < 100%\");\n        weeklyDelayFeePerSecondPerPfc = newWeeklyDelayFeePerSecondPerPfc;\n        emit NewWeeklyDelayFeePerSecondPerPfc(newWeeklyDelayFeePerSecondPerPfc);\n    }\n\n    /**\n     * @notice Sets a new final fee for a particular currency.\n     * @param currency defines the token currency used to pay the final fee.\n     * @param newFinalFee final fee amount.\n     */\n    function setFinalFee(address currency, FixedPoint.Unsigned memory newFinalFee)\n        public\n        onlyRoleHolder(uint256(Roles.Owner))\n    {\n        finalFees[currency] = newFinalFee;\n        emit NewFinalFee(newFinalFee);\n    }\n}\n"
    },
    "contracts/UMA/common/implementation/Withdrawable.sol": {
      "content": "/**\n * Withdrawable contract.\n */\n\n// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./MultiRole.sol\";\n\n/**\n * @title Base contract that allows a specific role to withdraw any ETH and/or ERC20 tokens that the contract holds.\n */\nabstract contract Withdrawable is MultiRole {\n    using SafeERC20 for IERC20;\n\n    uint256 private roleId;\n\n    /**\n     * @notice Withdraws ETH from the contract.\n     */\n    function withdraw(uint256 amount) external onlyRoleHolder(roleId) {\n        Address.sendValue(payable(msg.sender), amount);\n    }\n\n    /**\n     * @notice Withdraws ERC20 tokens from the contract.\n     * @param erc20Address ERC20 token to withdraw.\n     * @param amount amount of tokens to withdraw.\n     */\n    function withdrawErc20(address erc20Address, uint256 amount) external onlyRoleHolder(roleId) {\n        IERC20 erc20 = IERC20(erc20Address);\n        erc20.safeTransfer(msg.sender, amount);\n    }\n\n    /**\n     * @notice Internal method that allows derived contracts to create a role for withdrawal.\n     * @dev Either this method or `_setWithdrawRole` must be called by the derived class for this contract to function\n     * properly.\n     * @param newRoleId ID corresponding to role whose members can withdraw.\n     * @param managingRoleId ID corresponding to managing role who can modify the withdrawable role's membership.\n     * @param withdrawerAddress new manager of withdrawable role.\n     */\n    function _createWithdrawRole(\n        uint256 newRoleId,\n        uint256 managingRoleId,\n        address withdrawerAddress\n    ) internal {\n        roleId = newRoleId;\n        _createExclusiveRole(newRoleId, managingRoleId, withdrawerAddress);\n    }\n\n    /**\n     * @notice Internal method that allows derived contracts to choose the role for withdrawal.\n     * @dev The role `setRoleId` must exist. Either this method or `_createWithdrawRole` must be\n     * called by the derived class for this contract to function properly.\n     * @param setRoleId ID corresponding to role whose members can withdraw.\n     */\n    function _setWithdrawRole(uint256 setRoleId) internal onlyValidRole(setRoleId) {\n        roleId = setRoleId;\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/common/FeePayer.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../../common/implementation/Lockable.sol\";\nimport \"../../common/implementation/FixedPoint.sol\";\nimport \"../../common/implementation/Testable.sol\";\n\nimport \"../../oracle/interfaces/StoreInterface.sol\";\nimport \"../../oracle/interfaces/FinderInterface.sol\";\nimport \"../../oracle/interfaces/AdministrateeInterface.sol\";\nimport \"../../oracle/implementation/Constants.sol\";\n\n/**\n * @title FeePayer contract.\n * @notice Provides fee payment functionality for the ExpiringMultiParty contract.\n * contract is abstract as each derived contract that inherits `FeePayer` must implement `pfc()`.\n */\n\nabstract contract FeePayer is AdministrateeInterface, Testable, Lockable {\n    using SafeMath for uint256;\n    using FixedPoint for FixedPoint.Unsigned;\n    using SafeERC20 for IERC20;\n\n    /****************************************\n     *      FEE PAYER DATA STRUCTURES       *\n     ****************************************/\n\n    // The collateral currency used to back the positions in this contract.\n    IERC20 public collateralCurrency;\n\n    // Finder contract used to look up addresses for UMA system contracts.\n    FinderInterface public finder;\n\n    // Tracks the last block time when the fees were paid.\n    uint256 private lastPaymentTime;\n\n    // Tracks the cumulative fees that have been paid by the contract for use by derived contracts.\n    // The multiplier starts at 1, and is updated by computing cumulativeFeeMultiplier * (1 - effectiveFee).\n    // Put another way, the cumulativeFeeMultiplier is (1 - effectiveFee1) * (1 - effectiveFee2) ...\n    // For example:\n    // The cumulativeFeeMultiplier should start at 1.\n    // If a 1% fee is charged, the multiplier should update to .99.\n    // If another 1% fee is charged, the multiplier should be 0.99^2 (0.9801).\n    FixedPoint.Unsigned public cumulativeFeeMultiplier;\n\n    /****************************************\n     *                EVENTS                *\n     ****************************************/\n\n    event RegularFeesPaid(uint256 indexed regularFee, uint256 indexed lateFee);\n    event FinalFeesPaid(uint256 indexed amount);\n\n    /****************************************\n     *              MODIFIERS               *\n     ****************************************/\n\n    // modifier that calls payRegularFees().\n    modifier fees virtual {\n        // Note: the regular fee is applied on every fee-accruing transaction, where the total change is simply the\n        // regular fee applied linearly since the last update. This implies that the compounding rate depends on the\n        // frequency of update transactions that have this modifier, and it never reaches the ideal of continuous\n        // compounding. This approximate-compounding pattern is common in the Ethereum ecosystem because of the\n        // complexity of compounding data on-chain.\n        payRegularFees();\n        _;\n    }\n\n    /**\n     * @notice Constructs the FeePayer contract. Called by child contracts.\n     * @param _collateralAddress ERC20 token that is used as the underlying collateral for the synthetic.\n     * @param _finderAddress UMA protocol Finder used to discover other protocol contracts.\n     * @param _timerAddress Contract that stores the current time in a testing environment.\n     * Must be set to 0x0 for production environments that use live time.\n     */\n    constructor(\n        address _collateralAddress,\n        address _finderAddress,\n        address _timerAddress\n    ) Testable(_timerAddress) {\n        collateralCurrency = IERC20(_collateralAddress);\n        finder = FinderInterface(_finderAddress);\n        lastPaymentTime = getCurrentTime();\n        cumulativeFeeMultiplier = FixedPoint.fromUnscaledUint(1);\n    }\n\n    /****************************************\n     *        FEE PAYMENT FUNCTIONS         *\n     ****************************************/\n\n    /**\n     * @notice Pays UMA DVM regular fees (as a % of the collateral pool) to the Store contract.\n     * @dev These must be paid periodically for the life of the contract. If the contract has not paid its regular fee\n     * in a week or more then a late penalty is applied which is sent to the caller. If the amount of\n     * fees owed are greater than the pfc, then this will pay as much as possible from the available collateral.\n     * An event is only fired if the fees charged are greater than 0.\n     * @return totalPaid Amount of collateral that the contract paid (sum of the amount paid to the Store and caller).\n     * This returns 0 and exit early if there is no pfc, fees were already paid during the current block, or the fee rate is 0.\n     */\n    function payRegularFees() public nonReentrant() returns (FixedPoint.Unsigned memory) {\n        uint256 time = getCurrentTime();\n        FixedPoint.Unsigned memory collateralPool = _pfc();\n\n        // Fetch the regular fees, late penalty and the max possible to pay given the current collateral within the contract.\n        (\n            FixedPoint.Unsigned memory regularFee,\n            FixedPoint.Unsigned memory latePenalty,\n            FixedPoint.Unsigned memory totalPaid\n        ) = getOutstandingRegularFees(time);\n        lastPaymentTime = time;\n\n        // If there are no fees to pay then exit early.\n        if (totalPaid.isEqual(0)) {\n            return totalPaid;\n        }\n\n        emit RegularFeesPaid(regularFee.rawValue, latePenalty.rawValue);\n\n        _adjustCumulativeFeeMultiplier(totalPaid, collateralPool);\n\n        if (regularFee.isGreaterThan(0)) {\n            StoreInterface store = _getStore();\n            collateralCurrency.safeIncreaseAllowance(address(store), regularFee.rawValue);\n            store.payOracleFeesErc20(address(collateralCurrency), regularFee);\n        }\n\n        if (latePenalty.isGreaterThan(0)) {\n            collateralCurrency.safeTransfer(msg.sender, latePenalty.rawValue);\n        }\n        return totalPaid;\n    }\n\n    /**\n     * @notice Fetch any regular fees that the contract has pending but has not yet paid. If the fees to be paid are more\n     * than the total collateral within the contract then the totalPaid returned is full contract collateral amount.\n     * @dev This returns 0 and exit early if there is no pfc, fees were already paid during the current block, or the fee rate is 0.\n     * @return regularFee outstanding unpaid regular fee.\n     * @return latePenalty outstanding unpaid late fee for being late in previous fee payments.\n     * @return totalPaid Amount of collateral that the contract paid (sum of the amount paid to the Store and caller).\n     */\n    function getOutstandingRegularFees(uint256 time)\n        public\n        view\n        returns (\n            FixedPoint.Unsigned memory regularFee,\n            FixedPoint.Unsigned memory latePenalty,\n            FixedPoint.Unsigned memory totalPaid\n        )\n    {\n        StoreInterface store = _getStore();\n        FixedPoint.Unsigned memory collateralPool = _pfc();\n\n        // Exit early if there is no collateral or if fees were already paid during this block.\n        if (collateralPool.isEqual(0) || lastPaymentTime == time) {\n            return (regularFee, latePenalty, totalPaid);\n        }\n\n        (regularFee, latePenalty) = store.computeRegularFee(lastPaymentTime, time, collateralPool);\n\n        totalPaid = regularFee.add(latePenalty);\n        if (totalPaid.isEqual(0)) {\n            return (regularFee, latePenalty, totalPaid);\n        }\n        // If the effective fees paid as a % of the pfc is > 100%, then we need to reduce it and make the contract pay\n        // as much of the fee that it can (up to 100% of its pfc). We'll reduce the late penalty first and then the\n        // regular fee, which has the effect of paying the store first, followed by the caller if there is any fee remaining.\n        if (totalPaid.isGreaterThan(collateralPool)) {\n            FixedPoint.Unsigned memory deficit = totalPaid.sub(collateralPool);\n            FixedPoint.Unsigned memory latePenaltyReduction = FixedPoint.min(latePenalty, deficit);\n            latePenalty = latePenalty.sub(latePenaltyReduction);\n            deficit = deficit.sub(latePenaltyReduction);\n            regularFee = regularFee.sub(FixedPoint.min(regularFee, deficit));\n            totalPaid = collateralPool;\n        }\n    }\n\n    /**\n     * @notice Gets the current profit from corruption for this contract in terms of the collateral currency.\n     * @dev This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are\n     * expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.\n     * @return pfc value for equal to the current profit from corruption denominated in collateral currency.\n     */\n    function pfc() external view override nonReentrantView() returns (FixedPoint.Unsigned memory) {\n        return _pfc();\n    }\n\n    /**\n     * @notice Removes excess collateral balance not counted in the PfC by distributing it out pro-rata to all sponsors.\n     * @dev Multiplying the `cumulativeFeeMultiplier` by the ratio of non-PfC-collateral :: PfC-collateral effectively\n     * pays all sponsors a pro-rata portion of the excess collateral.\n     * @dev This will revert if PfC is 0 and this contract's collateral balance > 0.\n     */\n    function gulp() external nonReentrant() {\n        _gulp();\n    }\n\n    /****************************************\n     *         INTERNAL FUNCTIONS           *\n     ****************************************/\n\n    // Pays UMA Oracle final fees of `amount` in `collateralCurrency` to the Store contract. Final fee is a flat fee\n    // charged for each price request. If payer is the contract, adjusts internal bookkeeping variables. If payer is not\n    // the contract, pulls in `amount` of collateral currency.\n    function _payFinalFees(address payer, FixedPoint.Unsigned memory amount) internal {\n        if (amount.isEqual(0)) {\n            return;\n        }\n\n        if (payer != address(this)) {\n            // If the payer is not the contract pull the collateral from the payer.\n            collateralCurrency.safeTransferFrom(payer, address(this), amount.rawValue);\n        } else {\n            // If the payer is the contract, adjust the cumulativeFeeMultiplier to compensate.\n            FixedPoint.Unsigned memory collateralPool = _pfc();\n\n            // The final fee must be < available collateral or the fee will be larger than 100%.\n            // Note: revert reason removed to save bytecode.\n            require(collateralPool.isGreaterThan(amount));\n\n            _adjustCumulativeFeeMultiplier(amount, collateralPool);\n        }\n\n        emit FinalFeesPaid(amount.rawValue);\n\n        StoreInterface store = _getStore();\n        collateralCurrency.safeIncreaseAllowance(address(store), amount.rawValue);\n        store.payOracleFeesErc20(address(collateralCurrency), amount);\n    }\n\n    function _gulp() internal {\n        FixedPoint.Unsigned memory currentPfc = _pfc();\n        FixedPoint.Unsigned memory currentBalance = FixedPoint.Unsigned(collateralCurrency.balanceOf(address(this)));\n        if (currentPfc.isLessThan(currentBalance)) {\n            cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(currentBalance.div(currentPfc));\n        }\n    }\n\n    function _pfc() internal view virtual returns (FixedPoint.Unsigned memory);\n\n    function _getStore() internal view returns (StoreInterface) {\n        return StoreInterface(finder.getImplementationAddress(OracleInterfaces.Store));\n    }\n\n    function _computeFinalFees() internal view returns (FixedPoint.Unsigned memory finalFees) {\n        StoreInterface store = _getStore();\n        return store.computeFinalFee(address(collateralCurrency));\n    }\n\n    // Returns the user's collateral minus any fees that have been subtracted since it was originally\n    // deposited into the contract. Note: if the contract has paid fees since it was deployed, the raw\n    // value should be larger than the returned value.\n    function _getFeeAdjustedCollateral(FixedPoint.Unsigned memory rawCollateral)\n        internal\n        view\n        returns (FixedPoint.Unsigned memory collateral)\n    {\n        return rawCollateral.mul(cumulativeFeeMultiplier);\n    }\n\n    // Returns the user's collateral minus any pending fees that have yet to be subtracted.\n    function _getPendingRegularFeeAdjustedCollateral(FixedPoint.Unsigned memory rawCollateral)\n        internal\n        view\n        returns (FixedPoint.Unsigned memory)\n    {\n        (, , FixedPoint.Unsigned memory currentTotalOutstandingRegularFees) =\n            getOutstandingRegularFees(getCurrentTime());\n        if (currentTotalOutstandingRegularFees.isEqual(FixedPoint.fromUnscaledUint(0))) return rawCollateral;\n\n        // Calculate the total outstanding regular fee as a fraction of the total contract PFC.\n        FixedPoint.Unsigned memory effectiveOutstandingFee = currentTotalOutstandingRegularFees.divCeil(_pfc());\n\n        // Scale as rawCollateral* (1 - effectiveOutstandingFee) to apply the pro-rata amount to the regular fee.\n        return rawCollateral.mul(FixedPoint.fromUnscaledUint(1).sub(effectiveOutstandingFee));\n    }\n\n    // Converts a user-readable collateral value into a raw value that accounts for already-assessed fees. If any fees\n    // have been taken from this contract in the past, then the raw value will be larger than the user-readable value.\n    function _convertToRawCollateral(FixedPoint.Unsigned memory collateral)\n        internal\n        view\n        returns (FixedPoint.Unsigned memory rawCollateral)\n    {\n        return collateral.div(cumulativeFeeMultiplier);\n    }\n\n    // Decrease rawCollateral by a fee-adjusted collateralToRemove amount. Fee adjustment scales up collateralToRemove\n    // by dividing it by cumulativeFeeMultiplier. There is potential for this quotient to be floored, therefore\n    // rawCollateral is decreased by less than expected. Because this method is usually called in conjunction with an\n    // actual removal of collateral from this contract, return the fee-adjusted amount that the rawCollateral is\n    // decreased by so that the caller can minimize error between collateral removed and rawCollateral debited.\n    function _removeCollateral(FixedPoint.Unsigned storage rawCollateral, FixedPoint.Unsigned memory collateralToRemove)\n        internal\n        returns (FixedPoint.Unsigned memory removedCollateral)\n    {\n        FixedPoint.Unsigned memory initialBalance = _getFeeAdjustedCollateral(rawCollateral);\n        FixedPoint.Unsigned memory adjustedCollateral = _convertToRawCollateral(collateralToRemove);\n        rawCollateral.rawValue = rawCollateral.sub(adjustedCollateral).rawValue;\n        removedCollateral = initialBalance.sub(_getFeeAdjustedCollateral(rawCollateral));\n    }\n\n    // Increase rawCollateral by a fee-adjusted collateralToAdd amount. Fee adjustment scales up collateralToAdd\n    // by dividing it by cumulativeFeeMultiplier. There is potential for this quotient to be floored, therefore\n    // rawCollateral is increased by less than expected. Because this method is usually called in conjunction with an\n    // actual addition of collateral to this contract, return the fee-adjusted amount that the rawCollateral is\n    // increased by so that the caller can minimize error between collateral added and rawCollateral credited.\n    // NOTE: This return value exists only for the sake of symmetry with _removeCollateral. We don't actually use it\n    // because we are OK if more collateral is stored in the contract than is represented by rawTotalPositionCollateral.\n    function _addCollateral(FixedPoint.Unsigned storage rawCollateral, FixedPoint.Unsigned memory collateralToAdd)\n        internal\n        returns (FixedPoint.Unsigned memory addedCollateral)\n    {\n        FixedPoint.Unsigned memory initialBalance = _getFeeAdjustedCollateral(rawCollateral);\n        FixedPoint.Unsigned memory adjustedCollateral = _convertToRawCollateral(collateralToAdd);\n        rawCollateral.rawValue = rawCollateral.add(adjustedCollateral).rawValue;\n        addedCollateral = _getFeeAdjustedCollateral(rawCollateral).sub(initialBalance);\n    }\n\n    // Scale the cumulativeFeeMultiplier by the ratio of fees paid to the current available collateral.\n    function _adjustCumulativeFeeMultiplier(FixedPoint.Unsigned memory amount, FixedPoint.Unsigned memory currentPfc)\n        internal\n    {\n        FixedPoint.Unsigned memory effectiveFee = amount.divCeil(currentPfc);\n        cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(FixedPoint.fromUnscaledUint(1).sub(effectiveFee));\n    }\n}\n"
    },
    "contracts/UMA/oracle/interfaces/AdministrateeInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/FixedPoint.sol\";\n\n/**\n * @title Interface that all financial contracts expose to the admin.\n */\ninterface AdministrateeInterface {\n    /**\n     * @notice Initiates the shutdown process, in case of an emergency.\n     */\n    function emergencyShutdown() external;\n\n    /**\n     * @notice A core contract method called independently or as a part of other financial contract transactions.\n     * @dev It pays fees and moves money between margin accounts to make sure they reflect the NAV of the contract.\n     */\n    function remargin() external;\n\n    /**\n     * @notice Gets the current profit from corruption for this contract in terms of the collateral currency.\n     * @dev This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are\n     * expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.\n     * @return pfc value for equal to the current profit from corruption denominated in collateral currency.\n     */\n    function pfc() external view returns (FixedPoint.Unsigned memory);\n}\n"
    },
    "contracts/UMA/financial-templates/expiring-multiparty/PricelessPositionManager.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"../../common/implementation/FixedPoint.sol\";\nimport \"../../common/interfaces/ExpandedIERC20.sol\";\nimport \"../../common/interfaces/IERC20Standard.sol\";\n\nimport \"../../oracle/interfaces/OracleInterface.sol\";\nimport \"../../oracle/interfaces/OptimisticOracleInterface.sol\";\nimport \"../../oracle/interfaces/IdentifierWhitelistInterface.sol\";\nimport \"../../oracle/implementation/Constants.sol\";\n\nimport \"../common/FeePayer.sol\";\nimport \"../common/financial-product-libraries/expiring-multiparty-libraries/FinancialProductLibrary.sol\";\n\n/**\n * @title Financial contract with priceless position management.\n * @notice Handles positions for multiple sponsors in an optimistic (i.e., priceless) way without relying\n * on a price feed. On construction, deploys a new ERC20, managed by this contract, that is the synthetic token.\n */\n\ncontract PricelessPositionManager is FeePayer {\n    using SafeMath for uint256;\n    using FixedPoint for FixedPoint.Unsigned;\n    using SafeERC20 for IERC20;\n    using SafeERC20 for ExpandedIERC20;\n    using Address for address;\n\n    /****************************************\n     *  PRICELESS POSITION DATA STRUCTURES  *\n     ****************************************/\n\n    // Stores the state of the PricelessPositionManager. Set on expiration, emergency shutdown, or settlement.\n    enum ContractState { Open, ExpiredPriceRequested, ExpiredPriceReceived }\n    ContractState public contractState;\n\n    // Represents a single sponsor's position. All collateral is held by this contract.\n    // This struct acts as bookkeeping for how much of that collateral is allocated to each sponsor.\n    struct PositionData {\n        FixedPoint.Unsigned tokensOutstanding;\n        // Tracks pending withdrawal requests. A withdrawal request is pending if `withdrawalRequestPassTimestamp != 0`.\n        uint256 withdrawalRequestPassTimestamp;\n        FixedPoint.Unsigned withdrawalRequestAmount;\n        // Raw collateral value. This value should never be accessed directly -- always use _getFeeAdjustedCollateral().\n        // To add or remove collateral, use _addCollateral() and _removeCollateral().\n        FixedPoint.Unsigned rawCollateral;\n        // Tracks pending transfer position requests. A transfer position request is pending if `transferPositionRequestPassTimestamp != 0`.\n        uint256 transferPositionRequestPassTimestamp;\n    }\n\n    // Maps sponsor addresses to their positions. Each sponsor can have only one position.\n    mapping(address => PositionData) public positions;\n\n    // Keep track of the total collateral and tokens across all positions to enable calculating the\n    // global collateralization ratio without iterating over all positions.\n    FixedPoint.Unsigned public totalTokensOutstanding;\n\n    // Similar to the rawCollateral in PositionData, this value should not be used directly.\n    // _getFeeAdjustedCollateral(), _addCollateral() and _removeCollateral() must be used to access and adjust.\n    FixedPoint.Unsigned public rawTotalPositionCollateral;\n\n    // Synthetic token created by this contract.\n    ExpandedIERC20 public tokenCurrency;\n\n    // Unique identifier for DVM price feed ticker.\n    bytes32 public priceIdentifier;\n    // Time that this contract expires. Should not change post-construction unless an emergency shutdown occurs.\n    uint256 public expirationTimestamp;\n    // Time that has to elapse for a withdrawal request to be considered passed, if no liquidations occur.\n    // !!Note: The lower the withdrawal liveness value, the more risk incurred by the contract.\n    //       Extremely low liveness values increase the chance that opportunistic invalid withdrawal requests\n    //       expire without liquidation, thereby increasing the insolvency risk for the contract as a whole. An insolvent\n    //       contract is extremely risky for any sponsor or synthetic token holder for the contract.\n    uint256 public withdrawalLiveness;\n\n    // Minimum number of tokens in a sponsor's position.\n    FixedPoint.Unsigned public minSponsorTokens;\n\n    // The expiry price pulled from the DVM.\n    FixedPoint.Unsigned public expiryPrice;\n\n    // Instance of FinancialProductLibrary to provide custom price and collateral requirement transformations to extend\n    // the functionality of the EMP to support a wider range of financial products.\n    FinancialProductLibrary public financialProductLibrary;\n\n    /****************************************\n     *                EVENTS                *\n     ****************************************/\n\n    event RequestTransferPosition(address indexed oldSponsor);\n    event RequestTransferPositionExecuted(address indexed oldSponsor, address indexed newSponsor);\n    event RequestTransferPositionCanceled(address indexed oldSponsor);\n    event Deposit(address indexed sponsor, uint256 indexed collateralAmount);\n    event Withdrawal(address indexed sponsor, uint256 indexed collateralAmount);\n    event RequestWithdrawal(address indexed sponsor, uint256 indexed collateralAmount);\n    event RequestWithdrawalExecuted(address indexed sponsor, uint256 indexed collateralAmount);\n    event RequestWithdrawalCanceled(address indexed sponsor, uint256 indexed collateralAmount);\n    event PositionCreated(address indexed sponsor, uint256 indexed collateralAmount, uint256 indexed tokenAmount);\n    event NewSponsor(address indexed sponsor);\n    event EndedSponsorPosition(address indexed sponsor);\n    event Repay(address indexed sponsor, uint256 indexed numTokensRepaid, uint256 indexed newTokenCount);\n    event Redeem(address indexed sponsor, uint256 indexed collateralAmount, uint256 indexed tokenAmount);\n    event ContractExpired(address indexed caller);\n    event SettleExpiredPosition(\n        address indexed caller,\n        uint256 indexed collateralReturned,\n        uint256 indexed tokensBurned\n    );\n    event EmergencyShutdown(address indexed caller, uint256 originalExpirationTimestamp, uint256 shutdownTimestamp);\n\n    /****************************************\n     *               MODIFIERS              *\n     ****************************************/\n\n    modifier onlyPreExpiration() {\n        _onlyPreExpiration();\n        _;\n    }\n\n    modifier onlyPostExpiration() {\n        _onlyPostExpiration();\n        _;\n    }\n\n    modifier onlyCollateralizedPosition(address sponsor) {\n        _onlyCollateralizedPosition(sponsor);\n        _;\n    }\n\n    // Check that the current state of the pricelessPositionManager is Open.\n    // This prevents multiple calls to `expire` and `EmergencyShutdown` post expiration.\n    modifier onlyOpenState() {\n        _onlyOpenState();\n        _;\n    }\n\n    modifier noPendingWithdrawal(address sponsor) {\n        _positionHasNoPendingWithdrawal(sponsor);\n        _;\n    }\n\n    /**\n     * @notice Construct the PricelessPositionManager\n     * @dev Deployer of this contract should consider carefully which parties have ability to mint and burn\n     * the synthetic tokens referenced by `_tokenAddress`. This contract's security assumes that no external accounts\n     * can mint new tokens, which could be used to steal all of this contract's locked collateral.\n     * We recommend to only use synthetic token contracts whose sole Owner role (the role capable of adding & removing roles)\n     * is assigned to this contract, whose sole Minter role is assigned to this contract, and whose\n     * total supply is 0 prior to construction of this contract.\n     * @param _expirationTimestamp unix timestamp of when the contract will expire.\n     * @param _withdrawalLiveness liveness delay, in seconds, for pending withdrawals.\n     * @param _collateralAddress ERC20 token used as collateral for all positions.\n     * @param _tokenAddress ERC20 token used as synthetic token.\n     * @param _finderAddress UMA protocol Finder used to discover other protocol contracts.\n     * @param _priceIdentifier registered in the DVM for the synthetic.\n     * @param _minSponsorTokens minimum number of tokens that must exist at any time in a position.\n     * @param _timerAddress Contract that stores the current time in a testing environment.\n     * Must be set to 0x0 for production environments that use live time.\n     * @param _financialProductLibraryAddress Contract providing contract state transformations.\n     */\n    constructor(\n        uint256 _expirationTimestamp,\n        uint256 _withdrawalLiveness,\n        address _collateralAddress,\n        address _tokenAddress,\n        address _finderAddress,\n        bytes32 _priceIdentifier,\n        FixedPoint.Unsigned memory _minSponsorTokens,\n        address _timerAddress,\n        address _financialProductLibraryAddress\n    ) FeePayer(_collateralAddress, _finderAddress, _timerAddress) nonReentrant() {\n        require(_expirationTimestamp > getCurrentTime());\n        require(_getIdentifierWhitelist().isIdentifierSupported(_priceIdentifier));\n\n        expirationTimestamp = _expirationTimestamp;\n        withdrawalLiveness = _withdrawalLiveness;\n        tokenCurrency = ExpandedIERC20(_tokenAddress);\n        minSponsorTokens = _minSponsorTokens;\n        priceIdentifier = _priceIdentifier;\n\n        // Initialize the financialProductLibrary at the provided address.\n        financialProductLibrary = FinancialProductLibrary(_financialProductLibraryAddress);\n    }\n\n    /****************************************\n     *          POSITION FUNCTIONS          *\n     ****************************************/\n\n    /**\n     * @notice Requests to transfer ownership of the caller's current position to a new sponsor address.\n     * Once the request liveness is passed, the sponsor can execute the transfer and specify the new sponsor.\n     * @dev The liveness length is the same as the withdrawal liveness.\n     */\n    function requestTransferPosition() public onlyPreExpiration() nonReentrant() {\n        PositionData storage positionData = _getPositionData(msg.sender);\n        require(positionData.transferPositionRequestPassTimestamp == 0);\n\n        // Make sure the proposed expiration of this request is not post-expiry.\n        uint256 requestPassTime = getCurrentTime().add(withdrawalLiveness);\n        require(requestPassTime < expirationTimestamp);\n\n        // Update the position object for the user.\n        positionData.transferPositionRequestPassTimestamp = requestPassTime;\n\n        emit RequestTransferPosition(msg.sender);\n    }\n\n    /**\n     * @notice After a passed transfer position request (i.e., by a call to `requestTransferPosition` and waiting\n     * `withdrawalLiveness`), transfers ownership of the caller's current position to `newSponsorAddress`.\n     * @dev Transferring positions can only occur if the recipient does not already have a position.\n     * @param newSponsorAddress is the address to which the position will be transferred.\n     */\n    function transferPositionPassedRequest(address newSponsorAddress)\n        public\n        onlyPreExpiration()\n        noPendingWithdrawal(msg.sender)\n        nonReentrant()\n    {\n        require(\n            _getFeeAdjustedCollateral(positions[newSponsorAddress].rawCollateral).isEqual(\n                FixedPoint.fromUnscaledUint(0)\n            )\n        );\n        PositionData storage positionData = _getPositionData(msg.sender);\n        require(\n            positionData.transferPositionRequestPassTimestamp != 0 &&\n                positionData.transferPositionRequestPassTimestamp <= getCurrentTime()\n        );\n\n        // Reset transfer request.\n        positionData.transferPositionRequestPassTimestamp = 0;\n\n        positions[newSponsorAddress] = positionData;\n        delete positions[msg.sender];\n\n        emit RequestTransferPositionExecuted(msg.sender, newSponsorAddress);\n        emit NewSponsor(newSponsorAddress);\n        emit EndedSponsorPosition(msg.sender);\n    }\n\n    /**\n     * @notice Cancels a pending transfer position request.\n     */\n    function cancelTransferPosition() external onlyPreExpiration() nonReentrant() {\n        PositionData storage positionData = _getPositionData(msg.sender);\n        require(positionData.transferPositionRequestPassTimestamp != 0);\n\n        emit RequestTransferPositionCanceled(msg.sender);\n\n        // Reset withdrawal request.\n        positionData.transferPositionRequestPassTimestamp = 0;\n    }\n\n    /**\n     * @notice Transfers `collateralAmount` of `collateralCurrency` into the specified sponsor's position.\n     * @dev Increases the collateralization level of a position after creation. This contract must be approved to spend\n     * at least `collateralAmount` of `collateralCurrency`.\n     * @param sponsor the sponsor to credit the deposit to.\n     * @param collateralAmount total amount of collateral tokens to be sent to the sponsor's position.\n     */\n    function depositTo(address sponsor, FixedPoint.Unsigned memory collateralAmount)\n        public\n        onlyPreExpiration()\n        noPendingWithdrawal(sponsor)\n        fees()\n        nonReentrant()\n    {\n        require(collateralAmount.isGreaterThan(0));\n        PositionData storage positionData = _getPositionData(sponsor);\n\n        // Increase the position and global collateral balance by collateral amount.\n        _incrementCollateralBalances(positionData, collateralAmount);\n\n        emit Deposit(sponsor, collateralAmount.rawValue);\n\n        // Move collateral currency from sender to contract.\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), collateralAmount.rawValue);\n    }\n\n    /**\n     * @notice Transfers `collateralAmount` of `collateralCurrency` into the caller's position.\n     * @dev Increases the collateralization level of a position after creation. This contract must be approved to spend\n     * at least `collateralAmount` of `collateralCurrency`.\n     * @param collateralAmount total amount of collateral tokens to be sent to the sponsor's position.\n     */\n    function deposit(FixedPoint.Unsigned memory collateralAmount) public {\n        // This is just a thin wrapper over depositTo that specified the sender as the sponsor.\n        depositTo(msg.sender, collateralAmount);\n    }\n\n    /**\n     * @notice Transfers `collateralAmount` of `collateralCurrency` from the sponsor's position to the sponsor.\n     * @dev Reverts if the withdrawal puts this position's collateralization ratio below the global collateralization\n     * ratio. In that case, use `requestWithdrawal`. Might not withdraw the full requested amount to account for precision loss.\n     * @param collateralAmount is the amount of collateral to withdraw.\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\n     */\n    function withdraw(FixedPoint.Unsigned memory collateralAmount)\n        public\n        onlyPreExpiration()\n        noPendingWithdrawal(msg.sender)\n        fees()\n        nonReentrant()\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\n    {\n        require(collateralAmount.isGreaterThan(0));\n        PositionData storage positionData = _getPositionData(msg.sender);\n\n        // Decrement the sponsor's collateral and global collateral amounts. Check the GCR between decrement to ensure\n        // position remains above the GCR within the withdrawal. If this is not the case the caller must submit a request.\n        amountWithdrawn = _decrementCollateralBalancesCheckGCR(positionData, collateralAmount);\n\n        emit Withdrawal(msg.sender, amountWithdrawn.rawValue);\n\n        // Move collateral currency from contract to sender.\n        // Note: that we move the amount of collateral that is decreased from rawCollateral (inclusive of fees)\n        // instead of the user requested amount. This eliminates precision loss that could occur\n        // where the user withdraws more collateral than rawCollateral is decremented by.\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\n    }\n\n    /**\n     * @notice Starts a withdrawal request that, if passed, allows the sponsor to withdraw` from their position.\n     * @dev The request will be pending for `withdrawalLiveness`, during which the position can be liquidated.\n     * @param collateralAmount the amount of collateral requested to withdraw\n     */\n    function requestWithdrawal(FixedPoint.Unsigned memory collateralAmount)\n        public\n        onlyPreExpiration()\n        noPendingWithdrawal(msg.sender)\n        nonReentrant()\n    {\n        PositionData storage positionData = _getPositionData(msg.sender);\n        require(\n            collateralAmount.isGreaterThan(0) &&\n                collateralAmount.isLessThanOrEqual(_getFeeAdjustedCollateral(positionData.rawCollateral))\n        );\n\n        // Make sure the proposed expiration of this request is not post-expiry.\n        uint256 requestPassTime = getCurrentTime().add(withdrawalLiveness);\n        require(requestPassTime < expirationTimestamp);\n\n        // Update the position object for the user.\n        positionData.withdrawalRequestPassTimestamp = requestPassTime;\n        positionData.withdrawalRequestAmount = collateralAmount;\n\n        emit RequestWithdrawal(msg.sender, collateralAmount.rawValue);\n    }\n\n    /**\n     * @notice After a passed withdrawal request (i.e., by a call to `requestWithdrawal` and waiting\n     * `withdrawalLiveness`), withdraws `positionData.withdrawalRequestAmount` of collateral currency.\n     * @dev Might not withdraw the full requested amount in order to account for precision loss or if the full requested\n     * amount exceeds the collateral in the position (due to paying fees).\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\n     */\n    function withdrawPassedRequest()\n        external\n        onlyPreExpiration()\n        fees()\n        nonReentrant()\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\n    {\n        PositionData storage positionData = _getPositionData(msg.sender);\n        require(\n            positionData.withdrawalRequestPassTimestamp != 0 &&\n                positionData.withdrawalRequestPassTimestamp <= getCurrentTime()\n        );\n\n        // If withdrawal request amount is > position collateral, then withdraw the full collateral amount.\n        // This situation is possible due to fees charged since the withdrawal was originally requested.\n        FixedPoint.Unsigned memory amountToWithdraw = positionData.withdrawalRequestAmount;\n        if (positionData.withdrawalRequestAmount.isGreaterThan(_getFeeAdjustedCollateral(positionData.rawCollateral))) {\n            amountToWithdraw = _getFeeAdjustedCollateral(positionData.rawCollateral);\n        }\n\n        // Decrement the sponsor's collateral and global collateral amounts.\n        amountWithdrawn = _decrementCollateralBalances(positionData, amountToWithdraw);\n\n        // Reset withdrawal request by setting withdrawal amount and withdrawal timestamp to 0.\n        _resetWithdrawalRequest(positionData);\n\n        // Transfer approved withdrawal amount from the contract to the caller.\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\n\n        emit RequestWithdrawalExecuted(msg.sender, amountWithdrawn.rawValue);\n    }\n\n    /**\n     * @notice Cancels a pending withdrawal request.\n     */\n    function cancelWithdrawal() external nonReentrant() {\n        PositionData storage positionData = _getPositionData(msg.sender);\n        require(positionData.withdrawalRequestPassTimestamp != 0);\n\n        emit RequestWithdrawalCanceled(msg.sender, positionData.withdrawalRequestAmount.rawValue);\n\n        // Reset withdrawal request by setting withdrawal amount and withdrawal timestamp to 0.\n        _resetWithdrawalRequest(positionData);\n    }\n\n    /**\n     * @notice Creates tokens by creating a new position or by augmenting an existing position. Pulls `collateralAmount` into the sponsor's position and mints `numTokens` of `tokenCurrency`.\n     * @dev Reverts if minting these tokens would put the position's collateralization ratio below the\n     * global collateralization ratio. This contract must be approved to spend at least `collateralAmount` of\n     * `collateralCurrency`.\n     * @dev This contract must have the Minter role for the `tokenCurrency`.\n     * @param collateralAmount is the number of collateral tokens to collateralize the position with\n     * @param numTokens is the number of tokens to mint from the position.\n     */\n    function create(FixedPoint.Unsigned memory collateralAmount, FixedPoint.Unsigned memory numTokens)\n        public\n        onlyPreExpiration()\n        fees()\n        nonReentrant()\n    {\n        PositionData storage positionData = positions[msg.sender];\n\n        // Either the new create ratio or the resultant position CR must be above the current GCR.\n        require(\n            (_checkCollateralization(\n                _getFeeAdjustedCollateral(positionData.rawCollateral).add(collateralAmount),\n                positionData.tokensOutstanding.add(numTokens)\n            ) || _checkCollateralization(collateralAmount, numTokens)),\n            \"Insufficient collateral\"\n        );\n\n        require(positionData.withdrawalRequestPassTimestamp == 0, \"Pending withdrawal\");\n        if (positionData.tokensOutstanding.isEqual(0)) {\n            require(numTokens.isGreaterThanOrEqual(minSponsorTokens), \"Below minimum sponsor position\");\n            emit NewSponsor(msg.sender);\n        }\n\n        // Increase the position and global collateral balance by collateral amount.\n        _incrementCollateralBalances(positionData, collateralAmount);\n\n        // Add the number of tokens created to the position's outstanding tokens.\n        positionData.tokensOutstanding = positionData.tokensOutstanding.add(numTokens);\n\n        totalTokensOutstanding = totalTokensOutstanding.add(numTokens);\n\n        emit PositionCreated(msg.sender, collateralAmount.rawValue, numTokens.rawValue);\n\n        // Transfer tokens into the contract from caller and mint corresponding synthetic tokens to the caller's address.\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), collateralAmount.rawValue);\n        require(tokenCurrency.mint(msg.sender, numTokens.rawValue));\n    }\n\n    /**\n     * @notice Burns `numTokens` of `tokenCurrency` to decrease sponsors position size, without sending back `collateralCurrency`.\n     * This is done by a sponsor to increase position CR. Resulting size is bounded by minSponsorTokens.\n     * @dev Can only be called by token sponsor. This contract must be approved to spend `numTokens` of `tokenCurrency`.\n     * @dev This contract must have the Burner role for the `tokenCurrency`.\n     * @param numTokens is the number of tokens to be burnt from the sponsor's debt position.\n     */\n    function repay(FixedPoint.Unsigned memory numTokens)\n        public\n        onlyPreExpiration()\n        noPendingWithdrawal(msg.sender)\n        fees()\n        nonReentrant()\n    {\n        PositionData storage positionData = _getPositionData(msg.sender);\n        require(numTokens.isLessThanOrEqual(positionData.tokensOutstanding));\n\n        // Decrease the sponsors position tokens size. Ensure it is above the min sponsor size.\n        FixedPoint.Unsigned memory newTokenCount = positionData.tokensOutstanding.sub(numTokens);\n        require(newTokenCount.isGreaterThanOrEqual(minSponsorTokens));\n        positionData.tokensOutstanding = newTokenCount;\n\n        // Update the totalTokensOutstanding after redemption.\n        totalTokensOutstanding = totalTokensOutstanding.sub(numTokens);\n\n        emit Repay(msg.sender, numTokens.rawValue, newTokenCount.rawValue);\n\n        // Transfer the tokens back from the sponsor and burn them.\n        tokenCurrency.safeTransferFrom(msg.sender, address(this), numTokens.rawValue);\n        tokenCurrency.burn(numTokens.rawValue);\n    }\n\n    /**\n     * @notice Burns `numTokens` of `tokenCurrency` and sends back the proportional amount of `collateralCurrency`.\n     * @dev Can only be called by a token sponsor. Might not redeem the full proportional amount of collateral\n     * in order to account for precision loss. This contract must be approved to spend at least `numTokens` of\n     * `tokenCurrency`.\n     * @dev This contract must have the Burner role for the `tokenCurrency`.\n     * @param numTokens is the number of tokens to be burnt for a commensurate amount of collateral.\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\n     */\n    function redeem(FixedPoint.Unsigned memory numTokens)\n        public\n        noPendingWithdrawal(msg.sender)\n        fees()\n        nonReentrant()\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\n    {\n        PositionData storage positionData = _getPositionData(msg.sender);\n        require(!numTokens.isGreaterThan(positionData.tokensOutstanding));\n\n        FixedPoint.Unsigned memory fractionRedeemed = numTokens.div(positionData.tokensOutstanding);\n        FixedPoint.Unsigned memory collateralRedeemed =\n            fractionRedeemed.mul(_getFeeAdjustedCollateral(positionData.rawCollateral));\n\n        // If redemption returns all tokens the sponsor has then we can delete their position. Else, downsize.\n        if (positionData.tokensOutstanding.isEqual(numTokens)) {\n            amountWithdrawn = _deleteSponsorPosition(msg.sender);\n        } else {\n            // Decrement the sponsor's collateral and global collateral amounts.\n            amountWithdrawn = _decrementCollateralBalances(positionData, collateralRedeemed);\n\n            // Decrease the sponsors position tokens size. Ensure it is above the min sponsor size.\n            FixedPoint.Unsigned memory newTokenCount = positionData.tokensOutstanding.sub(numTokens);\n            require(newTokenCount.isGreaterThanOrEqual(minSponsorTokens), \"Below minimum sponsor position\");\n            positionData.tokensOutstanding = newTokenCount;\n\n            // Update the totalTokensOutstanding after redemption.\n            totalTokensOutstanding = totalTokensOutstanding.sub(numTokens);\n        }\n\n        emit Redeem(msg.sender, amountWithdrawn.rawValue, numTokens.rawValue);\n\n        // Transfer collateral from contract to caller and burn callers synthetic tokens.\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\n        tokenCurrency.safeTransferFrom(msg.sender, address(this), numTokens.rawValue);\n        tokenCurrency.burn(numTokens.rawValue);\n    }\n\n    /**\n     * @notice After a contract has passed expiry all token holders can redeem their tokens for underlying at the\n     * prevailing price defined by the DVM from the `expire` function.\n     * @dev This burns all tokens from the caller of `tokenCurrency` and sends back the proportional amount of\n     * `collateralCurrency`. Might not redeem the full proportional amount of collateral in order to account for\n     * precision loss. This contract must be approved to spend `tokenCurrency` at least up to the caller's full balance.\n     * @dev This contract must have the Burner role for the `tokenCurrency`.\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\n     */\n    function settleExpired()\n        external\n        onlyPostExpiration()\n        fees()\n        nonReentrant()\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\n    {\n        // If the contract state is open and onlyPostExpiration passed then `expire()` has not yet been called.\n        require(contractState != ContractState.Open, \"Unexpired position\");\n\n        // Get the current settlement price and store it. If it is not resolved will revert.\n        if (contractState != ContractState.ExpiredPriceReceived) {\n            expiryPrice = _getOraclePriceExpiration(expirationTimestamp);\n            contractState = ContractState.ExpiredPriceReceived;\n        }\n\n        // Get caller's tokens balance and calculate amount of underlying entitled to them.\n        FixedPoint.Unsigned memory tokensToRedeem = FixedPoint.Unsigned(tokenCurrency.balanceOf(msg.sender));\n        FixedPoint.Unsigned memory totalRedeemableCollateral = tokensToRedeem.mul(expiryPrice);\n\n        // If the caller is a sponsor with outstanding collateral they are also entitled to their excess collateral after their debt.\n        PositionData storage positionData = positions[msg.sender];\n        if (_getFeeAdjustedCollateral(positionData.rawCollateral).isGreaterThan(0)) {\n            // Calculate the underlying entitled to a token sponsor. This is collateral - debt in underlying.\n            FixedPoint.Unsigned memory tokenDebtValueInCollateral = positionData.tokensOutstanding.mul(expiryPrice);\n            FixedPoint.Unsigned memory positionCollateral = _getFeeAdjustedCollateral(positionData.rawCollateral);\n\n            // If the debt is greater than the remaining collateral, they cannot redeem anything.\n            FixedPoint.Unsigned memory positionRedeemableCollateral =\n                tokenDebtValueInCollateral.isLessThan(positionCollateral)\n                    ? positionCollateral.sub(tokenDebtValueInCollateral)\n                    : FixedPoint.Unsigned(0);\n\n            // Add the number of redeemable tokens for the sponsor to their total redeemable collateral.\n            totalRedeemableCollateral = totalRedeemableCollateral.add(positionRedeemableCollateral);\n\n            // Reset the position state as all the value has been removed after settlement.\n            delete positions[msg.sender];\n            emit EndedSponsorPosition(msg.sender);\n        }\n\n        // Take the min of the remaining collateral and the collateral \"owed\". If the contract is undercapitalized,\n        // the caller will get as much collateral as the contract can pay out.\n        FixedPoint.Unsigned memory payout =\n            FixedPoint.min(_getFeeAdjustedCollateral(rawTotalPositionCollateral), totalRedeemableCollateral);\n\n        // Decrement total contract collateral and outstanding debt.\n        amountWithdrawn = _removeCollateral(rawTotalPositionCollateral, payout);\n        totalTokensOutstanding = totalTokensOutstanding.sub(tokensToRedeem);\n\n        emit SettleExpiredPosition(msg.sender, amountWithdrawn.rawValue, tokensToRedeem.rawValue);\n\n        // Transfer tokens & collateral and burn the redeemed tokens.\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\n        tokenCurrency.safeTransferFrom(msg.sender, address(this), tokensToRedeem.rawValue);\n        tokenCurrency.burn(tokensToRedeem.rawValue);\n    }\n\n    /****************************************\n     *        GLOBAL STATE FUNCTIONS        *\n     ****************************************/\n\n    /**\n     * @notice Locks contract state in expired and requests oracle price.\n     * @dev this function can only be called once the contract is expired and can't be re-called.\n     */\n    function expire() external onlyPostExpiration() onlyOpenState() fees() nonReentrant() {\n        contractState = ContractState.ExpiredPriceRequested;\n\n        // Final fees do not need to be paid when sending a request to the optimistic oracle.\n        _requestOraclePriceExpiration(expirationTimestamp);\n\n        emit ContractExpired(msg.sender);\n    }\n\n    /**\n     * @notice Premature contract settlement under emergency circumstances.\n     * @dev Only the governor can call this function as they are permissioned within the `FinancialContractAdmin`.\n     * Upon emergency shutdown, the contract settlement time is set to the shutdown time. This enables withdrawal\n     * to occur via the standard `settleExpired` function. Contract state is set to `ExpiredPriceRequested`\n     * which prevents re-entry into this function or the `expire` function. No fees are paid when calling\n     * `emergencyShutdown` as the governor who would call the function would also receive the fees.\n     */\n    function emergencyShutdown() external override onlyPreExpiration() onlyOpenState() nonReentrant() {\n        require(msg.sender == _getFinancialContractsAdminAddress());\n\n        contractState = ContractState.ExpiredPriceRequested;\n        // Expiratory time now becomes the current time (emergency shutdown time).\n        // Price requested at this time stamp. `settleExpired` can now withdraw at this timestamp.\n        uint256 oldExpirationTimestamp = expirationTimestamp;\n        expirationTimestamp = getCurrentTime();\n        _requestOraclePriceExpiration(expirationTimestamp);\n\n        emit EmergencyShutdown(msg.sender, oldExpirationTimestamp, expirationTimestamp);\n    }\n\n    /**\n     * @notice Theoretically supposed to pay fees and move money between margin accounts to make sure they\n     * reflect the NAV of the contract. However, this functionality doesn't apply to this contract.\n     * @dev This is supposed to be implemented by any contract that inherits `AdministrateeInterface` and callable\n     * only by the Governor contract. This method is therefore minimally implemented in this contract and does nothing.\n     */\n    function remargin() external override onlyPreExpiration() nonReentrant() {\n        return;\n    }\n\n    /**\n     * @notice Accessor method for a sponsor's collateral.\n     * @dev This is necessary because the struct returned by the positions() method shows\n     * rawCollateral, which isn't a user-readable value.\n     * @dev This method accounts for pending regular fees that have not yet been withdrawn from this contract, for\n     * example if the `lastPaymentTime != currentTime`.\n     * @param sponsor address whose collateral amount is retrieved.\n     * @return collateralAmount amount of collateral within a sponsors position.\n     */\n    function getCollateral(address sponsor) external view nonReentrantView() returns (FixedPoint.Unsigned memory) {\n        // Note: do a direct access to avoid the validity check.\n        return _getPendingRegularFeeAdjustedCollateral(_getFeeAdjustedCollateral(positions[sponsor].rawCollateral));\n    }\n\n    /**\n     * @notice Accessor method for the total collateral stored within the PricelessPositionManager.\n     * @return totalCollateral amount of all collateral within the Expiring Multi Party Contract.\n     * @dev This method accounts for pending regular fees that have not yet been withdrawn from this contract, for\n     * example if the `lastPaymentTime != currentTime`.\n     */\n    function totalPositionCollateral() external view nonReentrantView() returns (FixedPoint.Unsigned memory) {\n        return _getPendingRegularFeeAdjustedCollateral(_getFeeAdjustedCollateral(rawTotalPositionCollateral));\n    }\n\n    /**\n     * @notice Accessor method to compute a transformed price using the finanicalProductLibrary specified at contract\n     * deployment. If no library was provided then no modification to the price is done.\n     * @param price input price to be transformed.\n     * @param requestTime timestamp the oraclePrice was requested at.\n     * @return transformedPrice price with the transformation function applied to it.\n     * @dev This method should never revert.\n     */\n\n    function transformPrice(FixedPoint.Unsigned memory price, uint256 requestTime)\n        public\n        view\n        nonReentrantView()\n        returns (FixedPoint.Unsigned memory)\n    {\n        return _transformPrice(price, requestTime);\n    }\n\n    /**\n     * @notice Accessor method to compute a transformed price identifier using the finanicalProductLibrary specified\n     * at contract deployment. If no library was provided then no modification to the identifier is done.\n     * @param requestTime timestamp the identifier is to be used at.\n     * @return transformedPrice price with the transformation function applied to it.\n     * @dev This method should never revert.\n     */\n    function transformPriceIdentifier(uint256 requestTime) public view nonReentrantView() returns (bytes32) {\n        return _transformPriceIdentifier(requestTime);\n    }\n\n    /****************************************\n     *          INTERNAL FUNCTIONS          *\n     ****************************************/\n\n    // Reduces a sponsor's position and global counters by the specified parameters. Handles deleting the entire\n    // position if the entire position is being removed. Does not make any external transfers.\n    function _reduceSponsorPosition(\n        address sponsor,\n        FixedPoint.Unsigned memory tokensToRemove,\n        FixedPoint.Unsigned memory collateralToRemove,\n        FixedPoint.Unsigned memory withdrawalAmountToRemove\n    ) internal {\n        PositionData storage positionData = _getPositionData(sponsor);\n\n        // If the entire position is being removed, delete it instead.\n        if (\n            tokensToRemove.isEqual(positionData.tokensOutstanding) &&\n            _getFeeAdjustedCollateral(positionData.rawCollateral).isEqual(collateralToRemove)\n        ) {\n            _deleteSponsorPosition(sponsor);\n            return;\n        }\n\n        // Decrement the sponsor's collateral and global collateral amounts.\n        _decrementCollateralBalances(positionData, collateralToRemove);\n\n        // Ensure that the sponsor will meet the min position size after the reduction.\n        FixedPoint.Unsigned memory newTokenCount = positionData.tokensOutstanding.sub(tokensToRemove);\n        require(newTokenCount.isGreaterThanOrEqual(minSponsorTokens), \"Below minimum sponsor position\");\n        positionData.tokensOutstanding = newTokenCount;\n\n        // Decrement the position's withdrawal amount.\n        positionData.withdrawalRequestAmount = positionData.withdrawalRequestAmount.sub(withdrawalAmountToRemove);\n\n        // Decrement the total outstanding tokens in the overall contract.\n        totalTokensOutstanding = totalTokensOutstanding.sub(tokensToRemove);\n    }\n\n    // Deletes a sponsor's position and updates global counters. Does not make any external transfers.\n    function _deleteSponsorPosition(address sponsor) internal returns (FixedPoint.Unsigned memory) {\n        PositionData storage positionToLiquidate = _getPositionData(sponsor);\n\n        FixedPoint.Unsigned memory startingGlobalCollateral = _getFeeAdjustedCollateral(rawTotalPositionCollateral);\n\n        // Remove the collateral and outstanding from the overall total position.\n        FixedPoint.Unsigned memory remainingRawCollateral = positionToLiquidate.rawCollateral;\n        rawTotalPositionCollateral = rawTotalPositionCollateral.sub(remainingRawCollateral);\n        totalTokensOutstanding = totalTokensOutstanding.sub(positionToLiquidate.tokensOutstanding);\n\n        // Reset the sponsors position to have zero outstanding and collateral.\n        delete positions[sponsor];\n\n        emit EndedSponsorPosition(sponsor);\n\n        // Return fee-adjusted amount of collateral deleted from position.\n        return startingGlobalCollateral.sub(_getFeeAdjustedCollateral(rawTotalPositionCollateral));\n    }\n\n    function _pfc() internal view virtual override returns (FixedPoint.Unsigned memory) {\n        return _getFeeAdjustedCollateral(rawTotalPositionCollateral);\n    }\n\n    function _getPositionData(address sponsor)\n        internal\n        view\n        onlyCollateralizedPosition(sponsor)\n        returns (PositionData storage)\n    {\n        return positions[sponsor];\n    }\n\n    function _getIdentifierWhitelist() internal view returns (IdentifierWhitelistInterface) {\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\n    }\n\n    function _getOracle() internal view returns (OracleInterface) {\n        return OracleInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\n    }\n\n    function _getOptimisticOracle() internal view returns (OptimisticOracleInterface) {\n        return OptimisticOracleInterface(finder.getImplementationAddress(OracleInterfaces.OptimisticOracle));\n    }\n\n    function _getFinancialContractsAdminAddress() internal view returns (address) {\n        return finder.getImplementationAddress(OracleInterfaces.FinancialContractsAdmin);\n    }\n\n    // Requests a price for transformed `priceIdentifier` at `requestedTime` from the Oracle.\n    function _requestOraclePriceExpiration(uint256 requestedTime) internal {\n        OptimisticOracleInterface optimisticOracle = _getOptimisticOracle();\n\n        // Increase token allowance to enable the optimistic oracle reward transfer.\n        FixedPoint.Unsigned memory reward = _computeFinalFees();\n        collateralCurrency.safeIncreaseAllowance(address(optimisticOracle), reward.rawValue);\n        optimisticOracle.requestPrice(\n            _transformPriceIdentifier(requestedTime),\n            requestedTime,\n            _getAncillaryData(),\n            collateralCurrency,\n            reward.rawValue // Reward is equal to the final fee\n        );\n\n        // Apply haircut to all sponsors by decrementing the cumlativeFeeMultiplier by the amount lost from the final fee.\n        _adjustCumulativeFeeMultiplier(reward, _pfc());\n    }\n\n    // Fetches a resolved Oracle price from the Oracle. Reverts if the Oracle hasn't resolved for this request.\n    function _getOraclePriceExpiration(uint256 requestedTime) internal returns (FixedPoint.Unsigned memory) {\n        // Create an instance of the oracle and get the price. If the price is not resolved revert.\n        OptimisticOracleInterface optimisticOracle = _getOptimisticOracle();\n        require(\n            optimisticOracle.hasPrice(\n                address(this),\n                _transformPriceIdentifier(requestedTime),\n                requestedTime,\n                _getAncillaryData()\n            )\n        );\n        int256 optimisticOraclePrice =\n            optimisticOracle.settleAndGetPrice(\n                _transformPriceIdentifier(requestedTime),\n                requestedTime,\n                _getAncillaryData()\n            );\n\n        // For now we don't want to deal with negative prices in positions.\n        if (optimisticOraclePrice < 0) {\n            optimisticOraclePrice = 0;\n        }\n        return _transformPrice(FixedPoint.Unsigned(uint256(optimisticOraclePrice)), requestedTime);\n    }\n\n    // Requests a price for transformed `priceIdentifier` at `requestedTime` from the Oracle.\n    function _requestOraclePriceLiquidation(uint256 requestedTime) internal {\n        OracleInterface oracle = _getOracle();\n        oracle.requestPrice(_transformPriceIdentifier(requestedTime), requestedTime);\n    }\n\n    // Fetches a resolved Oracle price from the Oracle. Reverts if the Oracle hasn't resolved for this request.\n    function _getOraclePriceLiquidation(uint256 requestedTime) internal view returns (FixedPoint.Unsigned memory) {\n        // Create an instance of the oracle and get the price. If the price is not resolved revert.\n        OracleInterface oracle = _getOracle();\n        require(oracle.hasPrice(_transformPriceIdentifier(requestedTime), requestedTime), \"Unresolved oracle price\");\n        int256 oraclePrice = oracle.getPrice(_transformPriceIdentifier(requestedTime), requestedTime);\n\n        // For now we don't want to deal with negative prices in positions.\n        if (oraclePrice < 0) {\n            oraclePrice = 0;\n        }\n        return _transformPrice(FixedPoint.Unsigned(uint256(oraclePrice)), requestedTime);\n    }\n\n    // Reset withdrawal request by setting the withdrawal request and withdrawal timestamp to 0.\n    function _resetWithdrawalRequest(PositionData storage positionData) internal {\n        positionData.withdrawalRequestAmount = FixedPoint.fromUnscaledUint(0);\n        positionData.withdrawalRequestPassTimestamp = 0;\n    }\n\n    // Ensure individual and global consistency when increasing collateral balances. Returns the change to the position.\n    function _incrementCollateralBalances(\n        PositionData storage positionData,\n        FixedPoint.Unsigned memory collateralAmount\n    ) internal returns (FixedPoint.Unsigned memory) {\n        _addCollateral(positionData.rawCollateral, collateralAmount);\n        return _addCollateral(rawTotalPositionCollateral, collateralAmount);\n    }\n\n    // Ensure individual and global consistency when decrementing collateral balances. Returns the change to the\n    // position. We elect to return the amount that the global collateral is decreased by, rather than the individual\n    // position's collateral, because we need to maintain the invariant that the global collateral is always\n    // <= the collateral owned by the contract to avoid reverts on withdrawals. The amount returned = amount withdrawn.\n    function _decrementCollateralBalances(\n        PositionData storage positionData,\n        FixedPoint.Unsigned memory collateralAmount\n    ) internal returns (FixedPoint.Unsigned memory) {\n        _removeCollateral(positionData.rawCollateral, collateralAmount);\n        return _removeCollateral(rawTotalPositionCollateral, collateralAmount);\n    }\n\n    // Ensure individual and global consistency when decrementing collateral balances. Returns the change to the position.\n    // This function is similar to the _decrementCollateralBalances function except this function checks position GCR\n    // between the decrements. This ensures that collateral removal will not leave the position undercollateralized.\n    function _decrementCollateralBalancesCheckGCR(\n        PositionData storage positionData,\n        FixedPoint.Unsigned memory collateralAmount\n    ) internal returns (FixedPoint.Unsigned memory) {\n        _removeCollateral(positionData.rawCollateral, collateralAmount);\n        require(_checkPositionCollateralization(positionData), \"CR below GCR\");\n        return _removeCollateral(rawTotalPositionCollateral, collateralAmount);\n    }\n\n    // These internal functions are supposed to act identically to modifiers, but re-used modifiers\n    // unnecessarily increase contract bytecode size.\n    // source: https://blog.polymath.network/solidity-tips-and-tricks-to-save-gas-and-reduce-bytecode-size-c44580b218e6\n    function _onlyOpenState() internal view {\n        require(contractState == ContractState.Open, \"Contract state is not OPEN\");\n    }\n\n    function _onlyPreExpiration() internal view {\n        require(getCurrentTime() < expirationTimestamp, \"Only callable pre-expiry\");\n    }\n\n    function _onlyPostExpiration() internal view {\n        require(getCurrentTime() >= expirationTimestamp, \"Only callable post-expiry\");\n    }\n\n    function _onlyCollateralizedPosition(address sponsor) internal view {\n        require(\n            _getFeeAdjustedCollateral(positions[sponsor].rawCollateral).isGreaterThan(0),\n            \"Position has no collateral\"\n        );\n    }\n\n    // Note: This checks whether an already existing position has a pending withdrawal. This cannot be used on the\n    // `create` method because it is possible that `create` is called on a new position (i.e. one without any collateral\n    // or tokens outstanding) which would fail the `onlyCollateralizedPosition` modifier on `_getPositionData`.\n    function _positionHasNoPendingWithdrawal(address sponsor) internal view {\n        require(_getPositionData(sponsor).withdrawalRequestPassTimestamp == 0, \"Pending withdrawal\");\n    }\n\n    /****************************************\n     *          PRIVATE FUNCTIONS          *\n     ****************************************/\n\n    function _checkPositionCollateralization(PositionData storage positionData) private view returns (bool) {\n        return\n            _checkCollateralization(\n                _getFeeAdjustedCollateral(positionData.rawCollateral),\n                positionData.tokensOutstanding\n            );\n    }\n\n    // Checks whether the provided `collateral` and `numTokens` have a collateralization ratio above the global\n    // collateralization ratio.\n    function _checkCollateralization(FixedPoint.Unsigned memory collateral, FixedPoint.Unsigned memory numTokens)\n        private\n        view\n        returns (bool)\n    {\n        FixedPoint.Unsigned memory global =\n            _getCollateralizationRatio(_getFeeAdjustedCollateral(rawTotalPositionCollateral), totalTokensOutstanding);\n        FixedPoint.Unsigned memory thisChange = _getCollateralizationRatio(collateral, numTokens);\n        return !global.isGreaterThan(thisChange);\n    }\n\n    function _getCollateralizationRatio(FixedPoint.Unsigned memory collateral, FixedPoint.Unsigned memory numTokens)\n        private\n        pure\n        returns (FixedPoint.Unsigned memory ratio)\n    {\n        if (!numTokens.isGreaterThan(0)) {\n            return FixedPoint.fromUnscaledUint(0);\n        } else {\n            return collateral.div(numTokens);\n        }\n    }\n\n    // IERC20Standard.decimals() will revert if the collateral contract has not implemented the decimals() method,\n    // which is possible since the method is only an OPTIONAL method in the ERC20 standard:\n    // https://eips.ethereum.org/EIPS/eip-20#methods.\n    function _getSyntheticDecimals(address _collateralAddress) public view returns (uint8 decimals) {\n        try IERC20Standard(_collateralAddress).decimals() returns (uint8 _decimals) {\n            return _decimals;\n        } catch {\n            return 18;\n        }\n    }\n\n    function _transformPrice(FixedPoint.Unsigned memory price, uint256 requestTime)\n        internal\n        view\n        returns (FixedPoint.Unsigned memory)\n    {\n        if (!address(financialProductLibrary).isContract()) return price;\n        try financialProductLibrary.transformPrice(price, requestTime) returns (\n            FixedPoint.Unsigned memory transformedPrice\n        ) {\n            return transformedPrice;\n        } catch {\n            return price;\n        }\n    }\n\n    function _transformPriceIdentifier(uint256 requestTime) internal view returns (bytes32) {\n        if (!address(financialProductLibrary).isContract()) return priceIdentifier;\n        try financialProductLibrary.transformPriceIdentifier(priceIdentifier, requestTime) returns (\n            bytes32 transformedIdentifier\n        ) {\n            return transformedIdentifier;\n        } catch {\n            return priceIdentifier;\n        }\n    }\n\n    function _getAncillaryData() internal view returns (bytes memory) {\n        // Note: when ancillary data is passed to the optimistic oracle, it should be tagged with the token address\n        // whose funding rate it's trying to get.\n        return abi.encodePacked(address(tokenCurrency));\n    }\n}\n"
    },
    "contracts/UMA/common/interfaces/IERC20Standard.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title ERC20 interface that includes the decimals read only method.\n */\ninterface IERC20Standard is IERC20 {\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05`\n     * (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value\n     * {ERC20} uses, unless {_setupDecimals} is called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic\n     * of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/UMA/financial-templates/common/financial-product-libraries/expiring-multiparty-libraries/FinancialProductLibrary.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\nimport \"../../../../common/implementation/FixedPoint.sol\";\n\ninterface ExpiringContractInterface {\n    function expirationTimestamp() external view returns (uint256);\n}\n\n/**\n * @title Financial product library contract\n * @notice Provides price and collateral requirement transformation interfaces that can be overridden by custom\n * Financial product library implementations.\n */\nabstract contract FinancialProductLibrary {\n    using FixedPoint for FixedPoint.Unsigned;\n\n    /**\n     * @notice Transforms a given oracle price using the financial product libraries transformation logic.\n     * @param oraclePrice input price returned by the DVM to be transformed.\n     * @return transformedOraclePrice input oraclePrice with the transformation function applied.\n     */\n    function transformPrice(FixedPoint.Unsigned memory oraclePrice, uint256)\n        public\n        view\n        virtual\n        returns (FixedPoint.Unsigned memory)\n    {\n        return oraclePrice;\n    }\n\n    /**\n     * @notice Transforms a given collateral requirement using the financial product libraries transformation logic.\n     * @param collateralRequirement input collateral requirement to be transformed.\n     * @return transformedCollateralRequirement input collateral requirement with the transformation function applied.\n     */\n    function transformCollateralRequirement(\n        FixedPoint.Unsigned memory,\n        FixedPoint.Unsigned memory collateralRequirement\n    ) public view virtual returns (FixedPoint.Unsigned memory) {\n        return collateralRequirement;\n    }\n\n    /**\n     * @notice Transforms a given price identifier using the financial product libraries transformation logic.\n     * @param priceIdentifier input price identifier defined for the financial contract.\n     * @return transformedPriceIdentifier input price identifier with the transformation function applied.\n     */\n    function transformPriceIdentifier(bytes32 priceIdentifier, uint256) public view virtual returns (bytes32) {\n        return priceIdentifier;\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/common/financial-product-libraries/expiring-multiparty-libraries/StructuredNoteFinancialProductLibrary.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\nimport \"./FinancialProductLibrary.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../../../common/implementation/Lockable.sol\";\n\n/**\n * @title Structured Note Financial Product Library\n * @notice Adds custom price transformation logic to modify the behavior of the expiring multi party contract. The\n * contract holds say 1 WETH in collateral and pays out that 1 WETH if, at expiry, ETHUSD is below a set strike. If\n * ETHUSD is above that strike, the contract pays out a given dollar amount of ETH.\n * Example: expiry is DEC 31. Strike is $400. Each token is backed by 1 WETH\n * If ETHUSD < $400 at expiry, token is redeemed for 1 ETH.\n * If ETHUSD >= $400 at expiry, token is redeemed for $400 worth of ETH, as determined by the DVM.\n */\ncontract StructuredNoteFinancialProductLibrary is FinancialProductLibrary, Ownable, Lockable {\n    using FixedPoint for FixedPoint.Unsigned;\n\n    mapping(address => FixedPoint.Unsigned) financialProductStrikes;\n\n    /**\n     * @notice Enables the deployer of the library to set the strike price for an associated financial product.\n     * @param financialProduct address of the financial product.\n     * @param strikePrice the strike price for the structured note to be applied to the financial product.\n     * @dev Note: a) Only the owner (deployer) of this library can set new strike prices b) A strike price cannot be 0.\n     * c) A strike price can only be set once to prevent the deployer from changing the strike after the fact.\n     * d)  financialProduct must exposes an expirationTimestamp method.\n     */\n    function setFinancialProductStrike(address financialProduct, FixedPoint.Unsigned memory strikePrice)\n        public\n        onlyOwner\n        nonReentrant()\n    {\n        require(strikePrice.isGreaterThan(0), \"Cant set 0 strike\");\n        require(financialProductStrikes[financialProduct].isEqual(0), \"Strike already set\");\n        require(ExpiringContractInterface(financialProduct).expirationTimestamp() != 0, \"Invalid EMP contract\");\n        financialProductStrikes[financialProduct] = strikePrice;\n    }\n\n    /**\n     * @notice Returns the strike price associated with a given financial product address.\n     * @param financialProduct address of the financial product.\n     * @return strikePrice for the associated financial product.\n     */\n    function getStrikeForFinancialProduct(address financialProduct)\n        public\n        view\n        nonReentrantView()\n        returns (FixedPoint.Unsigned memory)\n    {\n        return financialProductStrikes[financialProduct];\n    }\n\n    /**\n     * @notice Returns a transformed price by applying the structured note payout structure.\n     * @param oraclePrice price from the oracle to be transformed.\n     * @param requestTime timestamp the oraclePrice was requested at.\n     * @return transformedPrice the input oracle price with the price transformation logic applied to it.\n     */\n    function transformPrice(FixedPoint.Unsigned memory oraclePrice, uint256 requestTime)\n        public\n        view\n        override\n        nonReentrantView()\n        returns (FixedPoint.Unsigned memory)\n    {\n        FixedPoint.Unsigned memory strike = financialProductStrikes[msg.sender];\n        require(strike.isGreaterThan(0), \"Caller has no strike\");\n        // If price request is made before expiry, return 1. Thus we can keep the contract 100% collateralized with\n        // each token backed 1:1 by collateral currency.\n        if (requestTime < ExpiringContractInterface(msg.sender).expirationTimestamp()) {\n            return FixedPoint.fromUnscaledUint(1);\n        }\n        if (oraclePrice.isLessThan(strike)) {\n            return FixedPoint.fromUnscaledUint(1);\n        } else {\n            // Token expires to be worth strike $ worth of collateral.\n            // eg if ETHUSD is $500 and strike is $400, token is redeemable for 400/500 = 0.8 WETH.\n            return strike.div(oraclePrice);\n        }\n    }\n\n    /**\n     * @notice Returns a transformed collateral requirement by applying the structured note payout structure. If the price\n     * of the structured note is greater than the strike then the collateral requirement scales down accordingly.\n     * @param oraclePrice price from the oracle to transform the collateral requirement.\n     * @param collateralRequirement financial products collateral requirement to be scaled according to price and strike.\n     * @return transformedCollateralRequirement the input collateral requirement with the transformation logic applied to it.\n     */\n    function transformCollateralRequirement(\n        FixedPoint.Unsigned memory oraclePrice,\n        FixedPoint.Unsigned memory collateralRequirement\n    ) public view override nonReentrantView() returns (FixedPoint.Unsigned memory) {\n        FixedPoint.Unsigned memory strike = financialProductStrikes[msg.sender];\n        require(strike.isGreaterThan(0), \"Caller has no strike\");\n        // If the price is less than the strike than the original collateral requirement is used.\n        if (oraclePrice.isLessThan(strike)) {\n            return collateralRequirement;\n        } else {\n            // If the price is more than the strike then the collateral requirement is scaled by the strike. For example\n            // a strike of $400 and a CR of 1.2 would yield:\n            // ETHUSD = $350, payout is 1 WETH. CR is multiplied by 1. resulting CR = 1.2\n            // ETHUSD = $400, payout is 1 WETH. CR is multiplied by 1. resulting CR = 1.2\n            // ETHUSD = $425, payout is 0.941 WETH (worth $400). CR is multiplied by 0.941. resulting CR = 1.1292\n            // ETHUSD = $500, payout is 0.8 WETH (worth $400). CR multiplied by 0.8. resulting CR = 0.96\n            return collateralRequirement.mul(strike.div(oraclePrice));\n        }\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/common/financial-product-libraries/expiring-multiparty-libraries/PreExpirationIdentifierTransformationFinancialProductLibrary.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\nimport \"./FinancialProductLibrary.sol\";\nimport \"../../../../common/implementation/Lockable.sol\";\n\n/**\n * @title Pre-Expiration Identifier Transformation Financial Product Library\n * @notice Adds custom identifier transformation to enable a financial contract to use two different identifiers, depending\n * on when a price request is made. If the request is made before expiration then a transformation is made to the identifier\n * & if it is at or after expiration then the original identifier is returned. This library enables self referential\n * TWAP identifier to be used on synthetics pre-expiration, in conjunction with a separate identifier at expiration.\n */\ncontract PreExpirationIdentifierTransformationFinancialProductLibrary is FinancialProductLibrary, Lockable {\n    mapping(address => bytes32) financialProductTransformedIdentifiers;\n\n    /**\n     * @notice Enables the deployer of the library to set the transformed identifier for an associated financial product.\n     * @param financialProduct address of the financial product.\n     * @param transformedIdentifier the identifier for the financial product to be used if the contract is pre expiration.\n     * @dev Note: a) Any address can set identifier transformations b) The identifier can't be set to blank. c) A\n     * transformed price can only be set once to prevent the deployer from changing it after the fact. d) financialProduct\n     * must expose an expirationTimestamp method.\n     */\n    function setFinancialProductTransformedIdentifier(address financialProduct, bytes32 transformedIdentifier)\n        public\n        nonReentrant()\n    {\n        require(transformedIdentifier != \"\", \"Cant set to empty transformation\");\n        require(financialProductTransformedIdentifiers[financialProduct] == \"\", \"Transformation already set\");\n        require(ExpiringContractInterface(financialProduct).expirationTimestamp() != 0, \"Invalid EMP contract\");\n        financialProductTransformedIdentifiers[financialProduct] = transformedIdentifier;\n    }\n\n    /**\n     * @notice Returns the transformed identifier associated with a given financial product address.\n     * @param financialProduct address of the financial product.\n     * @return transformed identifier for the associated financial product.\n     */\n    function getTransformedIdentifierForFinancialProduct(address financialProduct)\n        public\n        view\n        nonReentrantView()\n        returns (bytes32)\n    {\n        return financialProductTransformedIdentifiers[financialProduct];\n    }\n\n    /**\n     * @notice Returns a transformed price identifier if the contract is pre-expiration and no transformation if post.\n     * @param identifier input price identifier to be transformed.\n     * @param requestTime timestamp the identifier is to be used at.\n     * @return transformedPriceIdentifier the input price identifier with the transformation logic applied to it.\n     */\n    function transformPriceIdentifier(bytes32 identifier, uint256 requestTime)\n        public\n        view\n        override\n        nonReentrantView()\n        returns (bytes32)\n    {\n        require(financialProductTransformedIdentifiers[msg.sender] != \"\", \"Caller has no transformation\");\n        // If the request time is before contract expiration then return the transformed identifier. Else, return the\n        // original price identifier.\n        if (requestTime < ExpiringContractInterface(msg.sender).expirationTimestamp()) {\n            return financialProductTransformedIdentifiers[msg.sender];\n        } else {\n            return identifier;\n        }\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/common/financial-product-libraries/expiring-multiparty-libraries/PostExpirationIdentifierTransformationFinancialProductLibrary.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\nimport \"./FinancialProductLibrary.sol\";\nimport \"../../../../common/implementation/Lockable.sol\";\n\n/**\n * @title Post-Expiration Identifier Transformation Financial Product Library\n * @notice Adds custom identifier transformation to enable a financial contract to use two different identifiers, depending\n * on when a price request is made. If the request is made at or after expiration then a transformation is made to the identifier\n * & if it is before expiration then the original identifier is returned. This library enables self referential\n * TWAP identifier to be used on synthetics pre-expiration, in conjunction with a separate identifier at expiration.\n */\ncontract PostExpirationIdentifierTransformationFinancialProductLibrary is FinancialProductLibrary, Lockable {\n    mapping(address => bytes32) financialProductTransformedIdentifiers;\n\n    /**\n     * @notice Enables the deployer of the library to set the transformed identifier for an associated financial product.\n     * @param financialProduct address of the financial product.\n     * @param transformedIdentifier the identifier for the financial product to be used if the contract is post expiration.\n     * @dev Note: a) Any address can set identifier transformations b) The identifier can't be set to blank. c) A\n     * transformed price can only be set once to prevent the deployer from changing it after the fact. d) financialProduct\n     * must expose an expirationTimestamp method.\n     */\n    function setFinancialProductTransformedIdentifier(address financialProduct, bytes32 transformedIdentifier)\n        public\n        nonReentrant()\n    {\n        require(transformedIdentifier != \"\", \"Cant set to empty transformation\");\n        require(financialProductTransformedIdentifiers[financialProduct] == \"\", \"Transformation already set\");\n        require(ExpiringContractInterface(financialProduct).expirationTimestamp() != 0, \"Invalid EMP contract\");\n        financialProductTransformedIdentifiers[financialProduct] = transformedIdentifier;\n    }\n\n    /**\n     * @notice Returns the transformed identifier associated with a given financial product address.\n     * @param financialProduct address of the financial product.\n     * @return transformed identifier for the associated financial product.\n     */\n    function getTransformedIdentifierForFinancialProduct(address financialProduct)\n        public\n        view\n        nonReentrantView()\n        returns (bytes32)\n    {\n        return financialProductTransformedIdentifiers[financialProduct];\n    }\n\n    /**\n     * @notice Returns a transformed price identifier if the contract is post-expiration and no transformation if pre.\n     * @param identifier input price identifier to be transformed.\n     * @param requestTime timestamp the identifier is to be used at.\n     * @return transformedPriceIdentifier the input price identifier with the transformation logic applied to it.\n     */\n    function transformPriceIdentifier(bytes32 identifier, uint256 requestTime)\n        public\n        view\n        override\n        nonReentrantView()\n        returns (bytes32)\n    {\n        require(financialProductTransformedIdentifiers[msg.sender] != \"\", \"Caller has no transformation\");\n        // If the request time is after contract expiration then return the transformed identifier. Else, return the\n        // original price identifier.\n        if (requestTime < ExpiringContractInterface(msg.sender).expirationTimestamp()) {\n            return identifier;\n        } else {\n            return financialProductTransformedIdentifiers[msg.sender];\n        }\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/common/financial-product-libraries/expiring-multiparty-libraries/KpiOptionsFinancialProductLibrary.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\nimport \"./FinancialProductLibrary.sol\";\nimport \"../../../../common/implementation/Lockable.sol\";\n\n/**\n * @title KPI Options Financial Product Library\n * @notice Adds custom tranformation logic to modify the price and collateral requirement behavior of the expiring multi party contract.\n * If a price request is made pre-expiry, the price should always be set to 2 and the collateral requirement should be set to 1.\n * Post-expiry, the collateral requirement is left as 1 and the price is left unchanged.\n */\ncontract KpiOptionsFinancialProductLibrary is FinancialProductLibrary, Lockable {\n    /**\n     * @notice Returns a transformed price for pre-expiry price requests.\n     * @param oraclePrice price from the oracle to be transformed.\n     * @param requestTime timestamp the oraclePrice was requested at.\n     * @return transformedPrice the input oracle price with the price transformation logic applied to it.\n     */\n    function transformPrice(FixedPoint.Unsigned memory oraclePrice, uint256 requestTime)\n        public\n        view\n        override\n        nonReentrantView()\n        returns (FixedPoint.Unsigned memory)\n    {\n        // If price request is made before expiry, return 2. Thus we can keep the contract 100% collateralized with\n        // each token backed 1:2 by collateral currency. Post-expiry, leave unchanged.\n        if (requestTime < ExpiringContractInterface(msg.sender).expirationTimestamp()) {\n            return FixedPoint.fromUnscaledUint(2);\n        } else {\n            return oraclePrice;\n        }\n    }\n\n    /**\n     * @notice Returns a transformed collateral requirement that is set to be equivalent to 2 tokens pre-expiry.\n     * @return transformedCollateralRequirement the input collateral requirement with the transformation logic applied to it.\n     */\n    function transformCollateralRequirement(FixedPoint.Unsigned memory, FixedPoint.Unsigned memory)\n        public\n        view\n        override\n        nonReentrantView()\n        returns (FixedPoint.Unsigned memory)\n    {\n        // Always return 1.\n        return FixedPoint.fromUnscaledUint(1);\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/common/financial-product-libraries/expiring-multiparty-libraries/CoveredCallFinancialProductLibrary.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\nimport \"./FinancialProductLibrary.sol\";\nimport \"../../../../common/implementation/Lockable.sol\";\n\n/**\n * @title Covered Call Financial Product Library.\n * @notice Adds custom price transformation logic to modify the behavior of the expiring multi party contract. The\n * contract holds say 1 WETH in collateral and pays out a portion of that, at expiry, if ETHUSD is above a set strike. If\n * ETHUSD is below that strike, the contract pays out 0. The fraction paid out if above the strike is defined by\n * (oraclePrice - strikePrice) / oraclePrice;\n * Example: expiry is DEC 31. Strike is $400. Each token is backed by 1 WETH.\n * If ETHUSD = $600 at expiry, the call is $200 in the money, and the contract pays out 0.333 WETH (worth $200).\n * If ETHUSD = $800 at expiry, the call is $400 in the money, and the contract pays out 0.5 WETH (worth $400).\n * If ETHUSD =< $400 at expiry, the call is out of the money, and the contract pays out 0 WETH.\n */\ncontract CoveredCallFinancialProductLibrary is FinancialProductLibrary, Lockable {\n    using FixedPoint for FixedPoint.Unsigned;\n\n    mapping(address => FixedPoint.Unsigned) private financialProductStrikes;\n\n    /**\n     * @notice Enables any address to set the strike price for an associated financial product.\n     * @param financialProduct address of the financial product.\n     * @param strikePrice the strike price for the covered call to be applied to the financial product.\n     * @dev Note: a) Any address can set the initial strike price b) A strike price cannot be 0.\n     * c) A strike price can only be set once to prevent the deployer from changing the strike after the fact.\n     * d) For safety, a strike price should be set before depositing any synthetic tokens in a liquidity pool.\n     * e) financialProduct must expose an expirationTimestamp method.\n     */\n    function setFinancialProductStrike(address financialProduct, FixedPoint.Unsigned memory strikePrice)\n        public\n        nonReentrant()\n    {\n        require(strikePrice.isGreaterThan(0), \"Cant set 0 strike\");\n        require(financialProductStrikes[financialProduct].isEqual(0), \"Strike already set\");\n        require(ExpiringContractInterface(financialProduct).expirationTimestamp() != 0, \"Invalid EMP contract\");\n        financialProductStrikes[financialProduct] = strikePrice;\n    }\n\n    /**\n     * @notice Returns the strike price associated with a given financial product address.\n     * @param financialProduct address of the financial product.\n     * @return strikePrice for the associated financial product.\n     */\n    function getStrikeForFinancialProduct(address financialProduct)\n        public\n        view\n        nonReentrantView()\n        returns (FixedPoint.Unsigned memory)\n    {\n        return financialProductStrikes[financialProduct];\n    }\n\n    /**\n     * @notice Returns a transformed price by applying the call option payout structure.\n     * @param oraclePrice price from the oracle to be transformed.\n     * @param requestTime timestamp the oraclePrice was requested at.\n     * @return transformedPrice the input oracle price with the price transformation logic applied to it.\n     */\n    function transformPrice(FixedPoint.Unsigned memory oraclePrice, uint256 requestTime)\n        public\n        view\n        override\n        nonReentrantView()\n        returns (FixedPoint.Unsigned memory)\n    {\n        FixedPoint.Unsigned memory strike = financialProductStrikes[msg.sender];\n        require(strike.isGreaterThan(0), \"Caller has no strike\");\n        // If price request is made before expiry, return 1. Thus we can keep the contract 100% collateralized with\n        // each token backed 1:1 by collateral currency.\n        if (requestTime < ExpiringContractInterface(msg.sender).expirationTimestamp()) {\n            return FixedPoint.fromUnscaledUint(1);\n        }\n        if (oraclePrice.isLessThanOrEqual(strike)) {\n            return FixedPoint.fromUnscaledUint(0);\n        } else {\n            // Token expires to be worth the fraction of a collateral token that's in the money.\n            // eg if ETHUSD is $500 and strike is $400, token is redeemable for 100/500 = 0.2 WETH (worth $100).\n            // Note: oraclePrice cannot be 0 here because it would always satisfy the if above because 0 <= x is always\n            // true.\n            return (oraclePrice.sub(strike)).div(oraclePrice);\n        }\n    }\n\n    /**\n     * @notice Returns a transformed collateral requirement by applying the covered call payout structure.\n     * @return transformedCollateralRequirement the input collateral requirement with the transformation logic applied to it.\n     */\n    function transformCollateralRequirement(FixedPoint.Unsigned memory, FixedPoint.Unsigned memory)\n        public\n        view\n        override\n        nonReentrantView()\n        returns (FixedPoint.Unsigned memory)\n    {\n        FixedPoint.Unsigned memory strike = financialProductStrikes[msg.sender];\n        require(strike.isGreaterThan(0), \"Caller has no strike\");\n\n        // Always return 1 because option must be collateralized by 1 token.\n        return FixedPoint.fromUnscaledUint(1);\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/Voting.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/FixedPoint.sol\";\nimport \"../../common/implementation/Testable.sol\";\nimport \"../interfaces/FinderInterface.sol\";\nimport \"../interfaces/OracleInterface.sol\";\nimport \"../interfaces/OracleAncillaryInterface.sol\";\nimport \"../interfaces/VotingInterface.sol\";\nimport \"../interfaces/VotingAncillaryInterface.sol\";\nimport \"../interfaces/IdentifierWhitelistInterface.sol\";\nimport \"./Registry.sol\";\nimport \"./ResultComputation.sol\";\nimport \"./VoteTiming.sol\";\nimport \"./VotingToken.sol\";\nimport \"./Constants.sol\";\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n/**\n * @title Voting system for Oracle.\n * @dev Handles receiving and resolving price requests via a commit-reveal voting scheme.\n */\ncontract Voting is\n    Testable,\n    Ownable,\n    OracleInterface,\n    OracleAncillaryInterface, // Interface to support ancillary data with price requests.\n    VotingInterface,\n    VotingAncillaryInterface // Interface to support ancillary data with voting rounds.\n{\n    using FixedPoint for FixedPoint.Unsigned;\n    using SafeMath for uint256;\n    using VoteTiming for VoteTiming.Data;\n    using ResultComputation for ResultComputation.Data;\n\n    /****************************************\n     *        VOTING DATA STRUCTURES        *\n     ****************************************/\n\n    // Identifies a unique price request for which the Oracle will always return the same value.\n    // Tracks ongoing votes as well as the result of the vote.\n    struct PriceRequest {\n        bytes32 identifier;\n        uint256 time;\n        // A map containing all votes for this price in various rounds.\n        mapping(uint256 => VoteInstance) voteInstances;\n        // If in the past, this was the voting round where this price was resolved. If current or the upcoming round,\n        // this is the voting round where this price will be voted on, but not necessarily resolved.\n        uint256 lastVotingRound;\n        // The index in the `pendingPriceRequests` that references this PriceRequest. A value of UINT_MAX means that\n        // this PriceRequest is resolved and has been cleaned up from `pendingPriceRequests`.\n        uint256 index;\n        bytes ancillaryData;\n    }\n\n    struct VoteInstance {\n        // Maps (voterAddress) to their submission.\n        mapping(address => VoteSubmission) voteSubmissions;\n        // The data structure containing the computed voting results.\n        ResultComputation.Data resultComputation;\n    }\n\n    struct VoteSubmission {\n        // A bytes32 of `0` indicates no commit or a commit that was already revealed.\n        bytes32 commit;\n        // The hash of the value that was revealed.\n        // Note: this is only used for computation of rewards.\n        bytes32 revealHash;\n    }\n\n    struct Round {\n        uint256 snapshotId; // Voting token snapshot ID for this round.  0 if no snapshot has been taken.\n        FixedPoint.Unsigned inflationRate; // Inflation rate set for this round.\n        FixedPoint.Unsigned gatPercentage; // Gat rate set for this round.\n        uint256 rewardsExpirationTime; // Time that rewards for this round can be claimed until.\n    }\n\n    // Represents the status a price request has.\n    enum RequestStatus {\n        NotRequested, // Was never requested.\n        Active, // Is being voted on in the current round.\n        Resolved, // Was resolved in a previous round.\n        Future // Is scheduled to be voted on in a future round.\n    }\n\n    // Only used as a return value in view methods -- never stored in the contract.\n    struct RequestState {\n        RequestStatus status;\n        uint256 lastVotingRound;\n    }\n\n    /****************************************\n     *          INTERNAL TRACKING           *\n     ****************************************/\n\n    // Maps round numbers to the rounds.\n    mapping(uint256 => Round) public rounds;\n\n    // Maps price request IDs to the PriceRequest struct.\n    mapping(bytes32 => PriceRequest) private priceRequests;\n\n    // Price request ids for price requests that haven't yet been marked as resolved.\n    // These requests may be for future rounds.\n    bytes32[] internal pendingPriceRequests;\n\n    VoteTiming.Data public voteTiming;\n\n    // Percentage of the total token supply that must be used in a vote to\n    // create a valid price resolution. 1 == 100%.\n    FixedPoint.Unsigned public gatPercentage;\n\n    // Global setting for the rate of inflation per vote. This is the percentage of the snapshotted total supply that\n    // should be split among the correct voters.\n    // Note: this value is used to set per-round inflation at the beginning of each round. 1 = 100%.\n    FixedPoint.Unsigned public inflationRate;\n\n    // Time in seconds from the end of the round in which a price request is\n    // resolved that voters can still claim their rewards.\n    uint256 public rewardsExpirationTimeout;\n\n    // Reference to the voting token.\n    VotingToken public votingToken;\n\n    // Reference to the Finder.\n    FinderInterface private finder;\n\n    // If non-zero, this contract has been migrated to this address. All voters and\n    // financial contracts should query the new address only.\n    address public migratedAddress;\n\n    // Max value of an unsigned integer.\n    uint256 private constant UINT_MAX = ~uint256(0);\n\n    // Max length in bytes of ancillary data that can be appended to a price request.\n    // As of December 2020, the current Ethereum gas limit is 12.5 million. This requestPrice function's gas primarily\n    // comes from computing a Keccak-256 hash in _encodePriceRequest and writing a new PriceRequest to\n    // storage. We have empirically determined an ancillary data limit of 8192 bytes that keeps this function\n    // well within the gas limit at ~8 million gas. To learn more about the gas limit and EVM opcode costs go here:\n    // - https://etherscan.io/chart/gaslimit\n    // - https://github.com/djrtwo/evm-opcode-gas-costs\n    uint256 public constant ancillaryBytesLimit = 8192;\n\n    bytes32 public snapshotMessageHash = ECDSA.toEthSignedMessageHash(keccak256(bytes(\"Sign For Snapshot\")));\n\n    /***************************************\n     *                EVENTS                *\n     ****************************************/\n\n    event VoteCommitted(\n        address indexed voter,\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        bytes ancillaryData\n    );\n\n    event EncryptedVote(\n        address indexed voter,\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        bytes ancillaryData,\n        bytes encryptedVote\n    );\n\n    event VoteRevealed(\n        address indexed voter,\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        int256 price,\n        bytes ancillaryData,\n        uint256 numTokens\n    );\n\n    event RewardsRetrieved(\n        address indexed voter,\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        bytes ancillaryData,\n        uint256 numTokens\n    );\n\n    event PriceRequestAdded(uint256 indexed roundId, bytes32 indexed identifier, uint256 time);\n\n    event PriceResolved(\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        int256 price,\n        bytes ancillaryData\n    );\n\n    /**\n     * @notice Construct the Voting contract.\n     * @param _phaseLength length of the commit and reveal phases in seconds.\n     * @param _gatPercentage of the total token supply that must be used in a vote to create a valid price resolution.\n     * @param _inflationRate percentage inflation per round used to increase token supply of correct voters.\n     * @param _rewardsExpirationTimeout timeout, in seconds, within which rewards must be claimed.\n     * @param _votingToken address of the UMA token contract used to commit votes.\n     * @param _finder keeps track of all contracts within the system based on their interfaceName.\n     * @param _timerAddress Contract that stores the current time in a testing environment.\n     * Must be set to 0x0 for production environments that use live time.\n     */\n    constructor(\n        uint256 _phaseLength,\n        FixedPoint.Unsigned memory _gatPercentage,\n        FixedPoint.Unsigned memory _inflationRate,\n        uint256 _rewardsExpirationTimeout,\n        address _votingToken,\n        address _finder,\n        address _timerAddress\n    ) Testable(_timerAddress) {\n        voteTiming.init(_phaseLength);\n        require(_gatPercentage.isLessThanOrEqual(1), \"GAT percentage must be <= 100%\");\n        gatPercentage = _gatPercentage;\n        inflationRate = _inflationRate;\n        votingToken = VotingToken(_votingToken);\n        finder = FinderInterface(_finder);\n        rewardsExpirationTimeout = _rewardsExpirationTimeout;\n    }\n\n    /***************************************\n                    MODIFIERS\n    ****************************************/\n\n    modifier onlyRegisteredContract() {\n        if (migratedAddress != address(0)) {\n            require(msg.sender == migratedAddress, \"Caller must be migrated address\");\n        } else {\n            Registry registry = Registry(finder.getImplementationAddress(OracleInterfaces.Registry));\n            require(registry.isContractRegistered(msg.sender), \"Called must be registered\");\n        }\n        _;\n    }\n\n    modifier onlyIfNotMigrated() {\n        require(migratedAddress == address(0), \"Only call this if not migrated\");\n        _;\n    }\n\n    /****************************************\n     *  PRICE REQUEST AND ACCESS FUNCTIONS  *\n     ****************************************/\n\n    /**\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\n     * @dev Time must be in the past and the identifier must be supported. The length of the ancillary data\n     * is limited such that this method abides by the EVM transaction gas limit.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param time unix timestamp for the price request.\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\n     */\n    function requestPrice(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) public override onlyRegisteredContract() {\n        uint256 blockTime = getCurrentTime();\n        require(time <= blockTime, \"Can only request in past\");\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier), \"Unsupported identifier request\");\n        require(ancillaryData.length <= ancillaryBytesLimit, \"Invalid ancillary data\");\n\n        bytes32 priceRequestId = _encodePriceRequest(identifier, time, ancillaryData);\n        PriceRequest storage priceRequest = priceRequests[priceRequestId];\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(blockTime);\n\n        RequestStatus requestStatus = _getRequestStatus(priceRequest, currentRoundId);\n\n        if (requestStatus == RequestStatus.NotRequested) {\n            // Price has never been requested.\n            // Price requests always go in the next round, so add 1 to the computed current round.\n            uint256 nextRoundId = currentRoundId.add(1);\n\n            PriceRequest storage newPriceRequest = priceRequests[priceRequestId];\n            newPriceRequest.identifier = identifier;\n            newPriceRequest.time = time;\n            newPriceRequest.lastVotingRound = nextRoundId;\n            newPriceRequest.index = pendingPriceRequests.length;\n            newPriceRequest.ancillaryData = ancillaryData;\n\n            pendingPriceRequests.push(priceRequestId);\n            emit PriceRequestAdded(nextRoundId, identifier, time);\n        }\n    }\n\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\n    function requestPrice(bytes32 identifier, uint256 time) public override {\n        requestPrice(identifier, time, \"\");\n    }\n\n    /**\n     * @notice Whether the price for `identifier` and `time` is available.\n     * @dev Time must be in the past and the identifier must be supported.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param time unix timestamp of for the price request.\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\n     * @return _hasPrice bool if the DVM has resolved to a price for the given identifier and timestamp.\n     */\n    function hasPrice(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) public view override onlyRegisteredContract() returns (bool) {\n        (bool _hasPrice, , ) = _getPriceOrError(identifier, time, ancillaryData);\n        return _hasPrice;\n    }\n\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\n    function hasPrice(bytes32 identifier, uint256 time) public view override returns (bool) {\n        return hasPrice(identifier, time, \"\");\n    }\n\n    /**\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\n     * @dev If the price is not available, the method reverts.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param time unix timestamp of for the price request.\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\n     * @return int256 representing the resolved price for the given identifier and timestamp.\n     */\n    function getPrice(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) public view override onlyRegisteredContract() returns (int256) {\n        (bool _hasPrice, int256 price, string memory message) = _getPriceOrError(identifier, time, ancillaryData);\n\n        // If the price wasn't available, revert with the provided message.\n        require(_hasPrice, message);\n        return price;\n    }\n\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\n    function getPrice(bytes32 identifier, uint256 time) public view override returns (int256) {\n        return getPrice(identifier, time, \"\");\n    }\n\n    /**\n     * @notice Gets the status of a list of price requests, identified by their identifier and time.\n     * @dev If the status for a particular request is NotRequested, the lastVotingRound will always be 0.\n     * @param requests array of type PendingRequest which includes an identifier and timestamp for each request.\n     * @return requestStates a list, in the same order as the input list, giving the status of each of the specified price requests.\n     */\n    function getPriceRequestStatuses(PendingRequestAncillary[] memory requests)\n        public\n        view\n        returns (RequestState[] memory)\n    {\n        RequestState[] memory requestStates = new RequestState[](requests.length);\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(getCurrentTime());\n        for (uint256 i = 0; i < requests.length; i++) {\n            PriceRequest storage priceRequest =\n                _getPriceRequest(requests[i].identifier, requests[i].time, requests[i].ancillaryData);\n\n            RequestStatus status = _getRequestStatus(priceRequest, currentRoundId);\n\n            // If it's an active request, its true lastVotingRound is the current one, even if it hasn't been updated.\n            if (status == RequestStatus.Active) {\n                requestStates[i].lastVotingRound = currentRoundId;\n            } else {\n                requestStates[i].lastVotingRound = priceRequest.lastVotingRound;\n            }\n            requestStates[i].status = status;\n        }\n        return requestStates;\n    }\n\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\n    function getPriceRequestStatuses(PendingRequest[] memory requests) public view returns (RequestState[] memory) {\n        PendingRequestAncillary[] memory requestsAncillary = new PendingRequestAncillary[](requests.length);\n\n        for (uint256 i = 0; i < requests.length; i++) {\n            requestsAncillary[i].identifier = requests[i].identifier;\n            requestsAncillary[i].time = requests[i].time;\n            requestsAncillary[i].ancillaryData = \"\";\n        }\n        return getPriceRequestStatuses(requestsAncillary);\n    }\n\n    /****************************************\n     *            VOTING FUNCTIONS          *\n     ****************************************/\n\n    /**\n     * @notice Commit a vote for a price request for `identifier` at `time`.\n     * @dev `identifier`, `time` must correspond to a price request that's currently in the commit phase.\n     * Commits can be changed.\n     * @dev Since transaction data is public, the salt will be revealed with the vote. While this is the system’s expected behavior,\n     * voters should never reuse salts. If someone else is able to guess the voted price and knows that a salt will be reused, then\n     * they can determine the vote pre-reveal.\n     * @param identifier uniquely identifies the committed vote. EG BTC/USD price pair.\n     * @param time unix timestamp of the price being voted on.\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\n     * @param hash keccak256 hash of the `price`, `salt`, voter `address`, `time`, current `roundId`, and `identifier`.\n     */\n    function commitVote(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData,\n        bytes32 hash\n    ) public override onlyIfNotMigrated() {\n        require(hash != bytes32(0), \"Invalid provided hash\");\n        // Current time is required for all vote timing queries.\n        uint256 blockTime = getCurrentTime();\n        require(\n            voteTiming.computeCurrentPhase(blockTime) == VotingAncillaryInterface.Phase.Commit,\n            \"Cannot commit in reveal phase\"\n        );\n\n        // At this point, the computed and last updated round ID should be equal.\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(blockTime);\n\n        PriceRequest storage priceRequest = _getPriceRequest(identifier, time, ancillaryData);\n        require(\n            _getRequestStatus(priceRequest, currentRoundId) == RequestStatus.Active,\n            \"Cannot commit inactive request\"\n        );\n\n        priceRequest.lastVotingRound = currentRoundId;\n        VoteInstance storage voteInstance = priceRequest.voteInstances[currentRoundId];\n        voteInstance.voteSubmissions[msg.sender].commit = hash;\n\n        emit VoteCommitted(msg.sender, currentRoundId, identifier, time, ancillaryData);\n    }\n\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\n    function commitVote(\n        bytes32 identifier,\n        uint256 time,\n        bytes32 hash\n    ) public override onlyIfNotMigrated() {\n        commitVote(identifier, time, \"\", hash);\n    }\n\n    /**\n     * @notice Snapshot the current round's token balances and lock in the inflation rate and GAT.\n     * @dev This function can be called multiple times, but only the first call per round into this function or `revealVote`\n     * will create the round snapshot. Any later calls will be a no-op. Will revert unless called during reveal period.\n     * @param signature  signature required to prove caller is an EOA to prevent flash loans from being included in the\n     * snapshot.\n     */\n    function snapshotCurrentRound(bytes calldata signature)\n        external\n        override(VotingInterface, VotingAncillaryInterface)\n        onlyIfNotMigrated()\n    {\n        uint256 blockTime = getCurrentTime();\n        require(voteTiming.computeCurrentPhase(blockTime) == Phase.Reveal, \"Only snapshot in reveal phase\");\n        // Require public snapshot require signature to ensure caller is an EOA.\n        require(ECDSA.recover(snapshotMessageHash, signature) == msg.sender, \"Signature must match sender\");\n        uint256 roundId = voteTiming.computeCurrentRoundId(blockTime);\n        _freezeRoundVariables(roundId);\n    }\n\n    /**\n     * @notice Reveal a previously committed vote for `identifier` at `time`.\n     * @dev The revealed `price`, `salt`, `address`, `time`, `roundId`, and `identifier`, must hash to the latest `hash`\n     * that `commitVote()` was called with. Only the committer can reveal their vote.\n     * @param identifier voted on in the commit phase. EG BTC/USD price pair.\n     * @param time specifies the unix timestamp of the price being voted on.\n     * @param price voted on during the commit phase.\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\n     * @param salt value used to hide the commitment price during the commit phase.\n     */\n    function revealVote(\n        bytes32 identifier,\n        uint256 time,\n        int256 price,\n        bytes memory ancillaryData,\n        int256 salt\n    ) public override onlyIfNotMigrated() {\n        require(voteTiming.computeCurrentPhase(getCurrentTime()) == Phase.Reveal, \"Cannot reveal in commit phase\");\n        // Note: computing the current round is required to disallow people from revealing an old commit after the round is over.\n        uint256 roundId = voteTiming.computeCurrentRoundId(getCurrentTime());\n\n        PriceRequest storage priceRequest = _getPriceRequest(identifier, time, ancillaryData);\n        VoteInstance storage voteInstance = priceRequest.voteInstances[roundId];\n        VoteSubmission storage voteSubmission = voteInstance.voteSubmissions[msg.sender];\n\n        // Scoping to get rid of a stack too deep error.\n        {\n            // 0 hashes are disallowed in the commit phase, so they indicate a different error.\n            // Cannot reveal an uncommitted or previously revealed hash\n            require(voteSubmission.commit != bytes32(0), \"Invalid hash reveal\");\n            require(\n                keccak256(abi.encodePacked(price, salt, msg.sender, time, ancillaryData, roundId, identifier)) ==\n                    voteSubmission.commit,\n                \"Revealed data != commit hash\"\n            );\n            // To protect against flash loans, we require snapshot be validated as EOA.\n            require(rounds[roundId].snapshotId != 0, \"Round has no snapshot\");\n        }\n\n        // Get the frozen snapshotId\n        uint256 snapshotId = rounds[roundId].snapshotId;\n\n        delete voteSubmission.commit;\n\n        // Get the voter's snapshotted balance. Since balances are returned pre-scaled by 10**18, we can directly\n        // initialize the Unsigned value with the returned uint.\n        FixedPoint.Unsigned memory balance = FixedPoint.Unsigned(votingToken.balanceOfAt(msg.sender, snapshotId));\n\n        // Set the voter's submission.\n        voteSubmission.revealHash = keccak256(abi.encode(price));\n\n        // Add vote to the results.\n        voteInstance.resultComputation.addVote(price, balance);\n\n        emit VoteRevealed(msg.sender, roundId, identifier, time, price, ancillaryData, balance.rawValue);\n    }\n\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\n    function revealVote(\n        bytes32 identifier,\n        uint256 time,\n        int256 price,\n        int256 salt\n    ) public override {\n        revealVote(identifier, time, price, \"\", salt);\n    }\n\n    /**\n     * @notice commits a vote and logs an event with a data blob, typically an encrypted version of the vote\n     * @dev An encrypted version of the vote is emitted in an event `EncryptedVote` to allow off-chain infrastructure to\n     * retrieve the commit. The contents of `encryptedVote` are never used on chain: it is purely for convenience.\n     * @param identifier unique price pair identifier. Eg: BTC/USD price pair.\n     * @param time unix timestamp of for the price request.\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\n     * @param hash keccak256 hash of the price you want to vote for and a `int256 salt`.\n     * @param encryptedVote offchain encrypted blob containing the voters amount, time and salt.\n     */\n    function commitAndEmitEncryptedVote(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData,\n        bytes32 hash,\n        bytes memory encryptedVote\n    ) public override {\n        commitVote(identifier, time, ancillaryData, hash);\n\n        uint256 roundId = voteTiming.computeCurrentRoundId(getCurrentTime());\n        emit EncryptedVote(msg.sender, roundId, identifier, time, ancillaryData, encryptedVote);\n    }\n\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\n    function commitAndEmitEncryptedVote(\n        bytes32 identifier,\n        uint256 time,\n        bytes32 hash,\n        bytes memory encryptedVote\n    ) public override {\n        commitVote(identifier, time, \"\", hash);\n\n        commitAndEmitEncryptedVote(identifier, time, \"\", hash, encryptedVote);\n    }\n\n    /**\n     * @notice Submit a batch of commits in a single transaction.\n     * @dev Using `encryptedVote` is optional. If included then commitment is emitted in an event.\n     * Look at `project-root/common/Constants.js` for the tested maximum number of\n     * commitments that can fit in one transaction.\n     * @param commits struct to encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`.\n     */\n    function batchCommit(CommitmentAncillary[] memory commits) public override {\n        for (uint256 i = 0; i < commits.length; i++) {\n            if (commits[i].encryptedVote.length == 0) {\n                commitVote(commits[i].identifier, commits[i].time, commits[i].ancillaryData, commits[i].hash);\n            } else {\n                commitAndEmitEncryptedVote(\n                    commits[i].identifier,\n                    commits[i].time,\n                    commits[i].ancillaryData,\n                    commits[i].hash,\n                    commits[i].encryptedVote\n                );\n            }\n        }\n    }\n\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\n    function batchCommit(Commitment[] memory commits) public override {\n        CommitmentAncillary[] memory commitsAncillary = new CommitmentAncillary[](commits.length);\n\n        for (uint256 i = 0; i < commits.length; i++) {\n            commitsAncillary[i].identifier = commits[i].identifier;\n            commitsAncillary[i].time = commits[i].time;\n            commitsAncillary[i].ancillaryData = \"\";\n            commitsAncillary[i].hash = commits[i].hash;\n            commitsAncillary[i].encryptedVote = commits[i].encryptedVote;\n        }\n        batchCommit(commitsAncillary);\n    }\n\n    /**\n     * @notice Reveal multiple votes in a single transaction.\n     * Look at `project-root/common/Constants.js` for the tested maximum number of reveals.\n     * that can fit in one transaction.\n     * @dev For more info on reveals, review the comment for `revealVote`.\n     * @param reveals array of the Reveal struct which contains an identifier, time, price and salt.\n     */\n    function batchReveal(RevealAncillary[] memory reveals) public override {\n        for (uint256 i = 0; i < reveals.length; i++) {\n            revealVote(\n                reveals[i].identifier,\n                reveals[i].time,\n                reveals[i].price,\n                reveals[i].ancillaryData,\n                reveals[i].salt\n            );\n        }\n    }\n\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\n    function batchReveal(Reveal[] memory reveals) public override {\n        RevealAncillary[] memory revealsAncillary = new RevealAncillary[](reveals.length);\n\n        for (uint256 i = 0; i < reveals.length; i++) {\n            revealsAncillary[i].identifier = reveals[i].identifier;\n            revealsAncillary[i].time = reveals[i].time;\n            revealsAncillary[i].price = reveals[i].price;\n            revealsAncillary[i].ancillaryData = \"\";\n            revealsAncillary[i].salt = reveals[i].salt;\n        }\n        batchReveal(revealsAncillary);\n    }\n\n    /**\n     * @notice Retrieves rewards owed for a set of resolved price requests.\n     * @dev Can only retrieve rewards if calling for a valid round and if the call is done within the timeout threshold\n     * (not expired). Note that a named return value is used here to avoid a stack to deep error.\n     * @param voterAddress voter for which rewards will be retrieved. Does not have to be the caller.\n     * @param roundId the round from which voting rewards will be retrieved from.\n     * @param toRetrieve array of PendingRequests which rewards are retrieved from.\n     * @return totalRewardToIssue total amount of rewards returned to the voter.\n     */\n    function retrieveRewards(\n        address voterAddress,\n        uint256 roundId,\n        PendingRequestAncillary[] memory toRetrieve\n    ) public override returns (FixedPoint.Unsigned memory totalRewardToIssue) {\n        if (migratedAddress != address(0)) {\n            require(msg.sender == migratedAddress, \"Can only call from migrated\");\n        }\n        require(roundId < voteTiming.computeCurrentRoundId(getCurrentTime()), \"Invalid roundId\");\n\n        Round storage round = rounds[roundId];\n        bool isExpired = getCurrentTime() > round.rewardsExpirationTime;\n        FixedPoint.Unsigned memory snapshotBalance =\n            FixedPoint.Unsigned(votingToken.balanceOfAt(voterAddress, round.snapshotId));\n\n        // Compute the total amount of reward that will be issued for each of the votes in the round.\n        FixedPoint.Unsigned memory snapshotTotalSupply =\n            FixedPoint.Unsigned(votingToken.totalSupplyAt(round.snapshotId));\n        FixedPoint.Unsigned memory totalRewardPerVote = round.inflationRate.mul(snapshotTotalSupply);\n\n        // Keep track of the voter's accumulated token reward.\n        totalRewardToIssue = FixedPoint.Unsigned(0);\n\n        for (uint256 i = 0; i < toRetrieve.length; i++) {\n            PriceRequest storage priceRequest =\n                _getPriceRequest(toRetrieve[i].identifier, toRetrieve[i].time, toRetrieve[i].ancillaryData);\n            VoteInstance storage voteInstance = priceRequest.voteInstances[priceRequest.lastVotingRound];\n            // Only retrieve rewards for votes resolved in same round\n            require(priceRequest.lastVotingRound == roundId, \"Retrieve for votes same round\");\n\n            _resolvePriceRequest(priceRequest, voteInstance);\n\n            if (voteInstance.voteSubmissions[voterAddress].revealHash == 0) {\n                continue;\n            } else if (isExpired) {\n                // Emit a 0 token retrieval on expired rewards.\n                emit RewardsRetrieved(\n                    voterAddress,\n                    roundId,\n                    toRetrieve[i].identifier,\n                    toRetrieve[i].time,\n                    toRetrieve[i].ancillaryData,\n                    0\n                );\n            } else if (\n                voteInstance.resultComputation.wasVoteCorrect(voteInstance.voteSubmissions[voterAddress].revealHash)\n            ) {\n                // The price was successfully resolved during the voter's last voting round, the voter revealed\n                // and was correct, so they are eligible for a reward.\n                // Compute the reward and add to the cumulative reward.\n\n                FixedPoint.Unsigned memory reward =\n                    snapshotBalance.mul(totalRewardPerVote).div(\n                        voteInstance.resultComputation.getTotalCorrectlyVotedTokens()\n                    );\n                totalRewardToIssue = totalRewardToIssue.add(reward);\n\n                // Emit reward retrieval for this vote.\n                emit RewardsRetrieved(\n                    voterAddress,\n                    roundId,\n                    toRetrieve[i].identifier,\n                    toRetrieve[i].time,\n                    toRetrieve[i].ancillaryData,\n                    reward.rawValue\n                );\n            } else {\n                // Emit a 0 token retrieval on incorrect votes.\n                emit RewardsRetrieved(\n                    voterAddress,\n                    roundId,\n                    toRetrieve[i].identifier,\n                    toRetrieve[i].time,\n                    toRetrieve[i].ancillaryData,\n                    0\n                );\n            }\n\n            // Delete the submission to capture any refund and clean up storage.\n            delete voteInstance.voteSubmissions[voterAddress].revealHash;\n        }\n\n        // Issue any accumulated rewards.\n        if (totalRewardToIssue.isGreaterThan(0)) {\n            require(votingToken.mint(voterAddress, totalRewardToIssue.rawValue), \"Voting token issuance failed\");\n        }\n    }\n\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\n    function retrieveRewards(\n        address voterAddress,\n        uint256 roundId,\n        PendingRequest[] memory toRetrieve\n    ) public override returns (FixedPoint.Unsigned memory) {\n        PendingRequestAncillary[] memory toRetrieveAncillary = new PendingRequestAncillary[](toRetrieve.length);\n\n        for (uint256 i = 0; i < toRetrieve.length; i++) {\n            toRetrieveAncillary[i].identifier = toRetrieve[i].identifier;\n            toRetrieveAncillary[i].time = toRetrieve[i].time;\n            toRetrieveAncillary[i].ancillaryData = \"\";\n        }\n\n        return retrieveRewards(voterAddress, roundId, toRetrieveAncillary);\n    }\n\n    /****************************************\n     *        VOTING GETTER FUNCTIONS       *\n     ****************************************/\n\n    /**\n     * @notice Gets the queries that are being voted on this round.\n     * @return pendingRequests array containing identifiers of type `PendingRequest`.\n     * and timestamps for all pending requests.\n     */\n    function getPendingRequests()\n        external\n        view\n        override(VotingInterface, VotingAncillaryInterface)\n        returns (PendingRequestAncillary[] memory)\n    {\n        uint256 blockTime = getCurrentTime();\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(blockTime);\n\n        // Solidity memory arrays aren't resizable (and reading storage is expensive). Hence this hackery to filter\n        // `pendingPriceRequests` only to those requests that have an Active RequestStatus.\n        PendingRequestAncillary[] memory unresolved = new PendingRequestAncillary[](pendingPriceRequests.length);\n        uint256 numUnresolved = 0;\n\n        for (uint256 i = 0; i < pendingPriceRequests.length; i++) {\n            PriceRequest storage priceRequest = priceRequests[pendingPriceRequests[i]];\n            if (_getRequestStatus(priceRequest, currentRoundId) == RequestStatus.Active) {\n                unresolved[numUnresolved] = PendingRequestAncillary({\n                    identifier: priceRequest.identifier,\n                    time: priceRequest.time,\n                    ancillaryData: priceRequest.ancillaryData\n                });\n                numUnresolved++;\n            }\n        }\n\n        PendingRequestAncillary[] memory pendingRequests = new PendingRequestAncillary[](numUnresolved);\n        for (uint256 i = 0; i < numUnresolved; i++) {\n            pendingRequests[i] = unresolved[i];\n        }\n        return pendingRequests;\n    }\n\n    /**\n     * @notice Returns the current voting phase, as a function of the current time.\n     * @return Phase to indicate the current phase. Either { Commit, Reveal, NUM_PHASES_PLACEHOLDER }.\n     */\n    function getVotePhase() external view override(VotingInterface, VotingAncillaryInterface) returns (Phase) {\n        return voteTiming.computeCurrentPhase(getCurrentTime());\n    }\n\n    /**\n     * @notice Returns the current round ID, as a function of the current time.\n     * @return uint256 representing the unique round ID.\n     */\n    function getCurrentRoundId() external view override(VotingInterface, VotingAncillaryInterface) returns (uint256) {\n        return voteTiming.computeCurrentRoundId(getCurrentTime());\n    }\n\n    /****************************************\n     *        OWNER ADMIN FUNCTIONS         *\n     ****************************************/\n\n    /**\n     * @notice Disables this Voting contract in favor of the migrated one.\n     * @dev Can only be called by the contract owner.\n     * @param newVotingAddress the newly migrated contract address.\n     */\n    function setMigrated(address newVotingAddress)\n        external\n        override(VotingInterface, VotingAncillaryInterface)\n        onlyOwner\n    {\n        migratedAddress = newVotingAddress;\n    }\n\n    /**\n     * @notice Resets the inflation rate. Note: this change only applies to rounds that have not yet begun.\n     * @dev This method is public because calldata structs are not currently supported by solidity.\n     * @param newInflationRate sets the next round's inflation rate.\n     */\n    function setInflationRate(FixedPoint.Unsigned memory newInflationRate)\n        public\n        override(VotingInterface, VotingAncillaryInterface)\n        onlyOwner\n    {\n        inflationRate = newInflationRate;\n    }\n\n    /**\n     * @notice Resets the Gat percentage. Note: this change only applies to rounds that have not yet begun.\n     * @dev This method is public because calldata structs are not currently supported by solidity.\n     * @param newGatPercentage sets the next round's Gat percentage.\n     */\n    function setGatPercentage(FixedPoint.Unsigned memory newGatPercentage)\n        public\n        override(VotingInterface, VotingAncillaryInterface)\n        onlyOwner\n    {\n        require(newGatPercentage.isLessThan(1), \"GAT percentage must be < 100%\");\n        gatPercentage = newGatPercentage;\n    }\n\n    /**\n     * @notice Resets the rewards expiration timeout.\n     * @dev This change only applies to rounds that have not yet begun.\n     * @param NewRewardsExpirationTimeout how long a caller can wait before choosing to withdraw their rewards.\n     */\n    function setRewardsExpirationTimeout(uint256 NewRewardsExpirationTimeout)\n        public\n        override(VotingInterface, VotingAncillaryInterface)\n        onlyOwner\n    {\n        rewardsExpirationTimeout = NewRewardsExpirationTimeout;\n    }\n\n    /****************************************\n     *    PRIVATE AND INTERNAL FUNCTIONS    *\n     ****************************************/\n\n    // Returns the price for a given identifer. Three params are returns: bool if there was an error, int to represent\n    // the resolved price and a string which is filled with an error message, if there was an error or \"\".\n    function _getPriceOrError(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    )\n        private\n        view\n        returns (\n            bool,\n            int256,\n            string memory\n        )\n    {\n        PriceRequest storage priceRequest = _getPriceRequest(identifier, time, ancillaryData);\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(getCurrentTime());\n\n        RequestStatus requestStatus = _getRequestStatus(priceRequest, currentRoundId);\n        if (requestStatus == RequestStatus.Active) {\n            return (false, 0, \"Current voting round not ended\");\n        } else if (requestStatus == RequestStatus.Resolved) {\n            VoteInstance storage voteInstance = priceRequest.voteInstances[priceRequest.lastVotingRound];\n            (, int256 resolvedPrice) =\n                voteInstance.resultComputation.getResolvedPrice(_computeGat(priceRequest.lastVotingRound));\n            return (true, resolvedPrice, \"\");\n        } else if (requestStatus == RequestStatus.Future) {\n            return (false, 0, \"Price is still to be voted on\");\n        } else {\n            return (false, 0, \"Price was never requested\");\n        }\n    }\n\n    function _getPriceRequest(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) private view returns (PriceRequest storage) {\n        return priceRequests[_encodePriceRequest(identifier, time, ancillaryData)];\n    }\n\n    function _encodePriceRequest(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData\n    ) private pure returns (bytes32) {\n        return keccak256(abi.encode(identifier, time, ancillaryData));\n    }\n\n    function _freezeRoundVariables(uint256 roundId) private {\n        Round storage round = rounds[roundId];\n        // Only on the first reveal should the snapshot be captured for that round.\n        if (round.snapshotId == 0) {\n            // There is no snapshot ID set, so create one.\n            round.snapshotId = votingToken.snapshot();\n\n            // Set the round inflation rate to the current global inflation rate.\n            rounds[roundId].inflationRate = inflationRate;\n\n            // Set the round gat percentage to the current global gat rate.\n            rounds[roundId].gatPercentage = gatPercentage;\n\n            // Set the rewards expiration time based on end of time of this round and the current global timeout.\n            rounds[roundId].rewardsExpirationTime = voteTiming.computeRoundEndTime(roundId).add(\n                rewardsExpirationTimeout\n            );\n        }\n    }\n\n    function _resolvePriceRequest(PriceRequest storage priceRequest, VoteInstance storage voteInstance) private {\n        if (priceRequest.index == UINT_MAX) {\n            return;\n        }\n        (bool isResolved, int256 resolvedPrice) =\n            voteInstance.resultComputation.getResolvedPrice(_computeGat(priceRequest.lastVotingRound));\n        require(isResolved, \"Can't resolve unresolved request\");\n\n        // Delete the resolved price request from pendingPriceRequests.\n        uint256 lastIndex = pendingPriceRequests.length - 1;\n        PriceRequest storage lastPriceRequest = priceRequests[pendingPriceRequests[lastIndex]];\n        lastPriceRequest.index = priceRequest.index;\n        pendingPriceRequests[priceRequest.index] = pendingPriceRequests[lastIndex];\n        pendingPriceRequests.pop();\n\n        priceRequest.index = UINT_MAX;\n        emit PriceResolved(\n            priceRequest.lastVotingRound,\n            priceRequest.identifier,\n            priceRequest.time,\n            resolvedPrice,\n            priceRequest.ancillaryData\n        );\n    }\n\n    function _computeGat(uint256 roundId) private view returns (FixedPoint.Unsigned memory) {\n        uint256 snapshotId = rounds[roundId].snapshotId;\n        if (snapshotId == 0) {\n            // No snapshot - return max value to err on the side of caution.\n            return FixedPoint.Unsigned(UINT_MAX);\n        }\n\n        // Grab the snapshotted supply from the voting token. It's already scaled by 10**18, so we can directly\n        // initialize the Unsigned value with the returned uint.\n        FixedPoint.Unsigned memory snapshottedSupply = FixedPoint.Unsigned(votingToken.totalSupplyAt(snapshotId));\n\n        // Multiply the total supply at the snapshot by the gatPercentage to get the GAT in number of tokens.\n        return snapshottedSupply.mul(rounds[roundId].gatPercentage);\n    }\n\n    function _getRequestStatus(PriceRequest storage priceRequest, uint256 currentRoundId)\n        private\n        view\n        returns (RequestStatus)\n    {\n        if (priceRequest.lastVotingRound == 0) {\n            return RequestStatus.NotRequested;\n        } else if (priceRequest.lastVotingRound < currentRoundId) {\n            VoteInstance storage voteInstance = priceRequest.voteInstances[priceRequest.lastVotingRound];\n            (bool isResolved, ) =\n                voteInstance.resultComputation.getResolvedPrice(_computeGat(priceRequest.lastVotingRound));\n            return isResolved ? RequestStatus.Resolved : RequestStatus.Active;\n        } else if (priceRequest.lastVotingRound == currentRoundId) {\n            return RequestStatus.Active;\n        } else {\n            // Means than priceRequest.lastVotingRound > currentRoundId\n            return RequestStatus.Future;\n        }\n    }\n\n    function _getIdentifierWhitelist() private view returns (IdentifierWhitelistInterface supportedIdentifiers) {\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/VoteTiming.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"../interfaces/VotingInterface.sol\";\n\n/**\n * @title Library to compute rounds and phases for an equal length commit-reveal voting cycle.\n */\nlibrary VoteTiming {\n    using SafeMath for uint256;\n\n    struct Data {\n        uint256 phaseLength;\n    }\n\n    /**\n     * @notice Initializes the data object. Sets the phase length based on the input.\n     */\n    function init(Data storage data, uint256 phaseLength) internal {\n        // This should have a require message but this results in an internal Solidity error.\n        require(phaseLength > 0);\n        data.phaseLength = phaseLength;\n    }\n\n    /**\n     * @notice Computes the roundID based off the current time as floor(timestamp/roundLength).\n     * @dev The round ID depends on the global timestamp but not on the lifetime of the system.\n     * The consequence is that the initial round ID starts at an arbitrary number (that increments, as expected, for subsequent rounds) instead of zero or one.\n     * @param data input data object.\n     * @param currentTime input unix timestamp used to compute the current roundId.\n     * @return roundId defined as a function of the currentTime and `phaseLength` from `data`.\n     */\n    function computeCurrentRoundId(Data storage data, uint256 currentTime) internal view returns (uint256) {\n        uint256 roundLength = data.phaseLength.mul(uint256(VotingAncillaryInterface.Phase.NUM_PHASES_PLACEHOLDER));\n        return currentTime.div(roundLength);\n    }\n\n    /**\n     * @notice compute the round end time as a function of the round Id.\n     * @param data input data object.\n     * @param roundId uniquely identifies the current round.\n     * @return timestamp unix time of when the current round will end.\n     */\n    function computeRoundEndTime(Data storage data, uint256 roundId) internal view returns (uint256) {\n        uint256 roundLength = data.phaseLength.mul(uint256(VotingAncillaryInterface.Phase.NUM_PHASES_PLACEHOLDER));\n        return roundLength.mul(roundId.add(1));\n    }\n\n    /**\n     * @notice Computes the current phase based only on the current time.\n     * @param data input data object.\n     * @param currentTime input unix timestamp used to compute the current roundId.\n     * @return current voting phase based on current time and vote phases configuration.\n     */\n    function computeCurrentPhase(Data storage data, uint256 currentTime)\n        internal\n        view\n        returns (VotingAncillaryInterface.Phase)\n    {\n        // This employs some hacky casting. We could make this an if-statement if we're worried about type safety.\n        return\n            VotingAncillaryInterface.Phase(\n                currentTime.div(data.phaseLength).mod(uint256(VotingAncillaryInterface.Phase.NUM_PHASES_PLACEHOLDER))\n            );\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/test/VotingTest.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../Voting.sol\";\nimport \"../../../common/implementation/FixedPoint.sol\";\n\n// Test contract used to access internal variables in the Voting contract.\ncontract VotingTest is Voting {\n    constructor(\n        uint256 _phaseLength,\n        FixedPoint.Unsigned memory _gatPercentage,\n        FixedPoint.Unsigned memory _inflationRate,\n        uint256 _rewardsExpirationTimeout,\n        address _votingToken,\n        address _finder,\n        address _timerAddress\n    )\n        Voting(\n            _phaseLength,\n            _gatPercentage,\n            _inflationRate,\n            _rewardsExpirationTimeout,\n            _votingToken,\n            _finder,\n            _timerAddress\n        )\n    {}\n\n    function getPendingPriceRequestsArray() external view returns (bytes32[] memory) {\n        return pendingPriceRequests;\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/ProposerV2.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./Finder.sol\";\nimport \"./GovernorV2.sol\";\nimport \"./Constants.sol\";\nimport \"./Voting.sol\";\nimport \"./AdminIdentifierLib.sol\";\nimport \"../../common/implementation/Lockable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title Proposer contract that allows anyone to make governance proposals with a bond.\n */\ncontract ProposerV2 is Ownable, Testable, Lockable {\n    using SafeERC20 for IERC20;\n    IERC20 public token;\n    uint256 public bond;\n    GovernorV2 public governor;\n    Finder public finder;\n\n    struct BondedProposal {\n        address sender;\n        // 64 bits to save a storage slot.\n        uint64 time;\n        uint256 lockedBond;\n        bytes ancillaryData;\n    }\n    mapping(uint256 => BondedProposal) public bondedProposals;\n\n    event BondSet(uint256 bond);\n    event ProposalResolved(uint256 indexed id, bool success);\n\n    /**\n     * @notice Construct the Proposer contract.\n     * @param _token the ERC20 token that the bond is paid in.\n     * @param _bond the bond amount.\n     * @param _governor the governor contract that this contract makes proposals to.\n     * @param _finder the finder contract used to look up addresses.\n     * @param _timer the timer contract to control the output of getCurrentTime(). Set to 0x0 if in production.\n     */\n    constructor(\n        IERC20 _token,\n        uint256 _bond,\n        GovernorV2 _governor,\n        Finder _finder,\n        address _timer\n    ) Testable(_timer) {\n        token = _token;\n        governor = _governor;\n        finder = _finder;\n        setBond(_bond);\n        transferOwnership(address(_governor));\n    }\n\n    /**\n     * @notice Propose a new set of governance transactions for vote.\n     * @dev Pulls bond from the caller.\n     * @param transactions list of transactions for the governor to execute.\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\n     * @return id the id of the governor proposal.\n     */\n    function propose(GovernorV2.Transaction[] memory transactions, bytes memory ancillaryData)\n        external\n        nonReentrant()\n        returns (uint256 id)\n    {\n        id = governor.numProposals();\n        token.safeTransferFrom(msg.sender, address(this), bond);\n        bondedProposals[id] = BondedProposal({\n            sender: msg.sender,\n            lockedBond: bond,\n            time: uint64(getCurrentTime()),\n            ancillaryData: ancillaryData\n        });\n        governor.propose(transactions, ancillaryData);\n    }\n\n    /**\n     * @notice Resolves a proposal by checking the status of the request in the Voting contract.\n     * @dev For the resolution to work correctly, this contract must be a registered contract in the DVM.\n     * @param id proposal id.\n     */\n    function resolveProposal(uint256 id) external nonReentrant() {\n        BondedProposal memory bondedProposal = bondedProposals[id];\n        Voting voting = Voting(finder.getImplementationAddress(OracleInterfaces.Oracle));\n        require(\n            voting.hasPrice(\n                AdminIdentifierLib._constructIdentifier(id),\n                bondedProposal.time,\n                bondedProposal.ancillaryData\n            ),\n            \"No price resolved\"\n        );\n        if (\n            voting.getPrice(\n                AdminIdentifierLib._constructIdentifier(id),\n                bondedProposal.time,\n                bondedProposal.ancillaryData\n            ) != 0\n        ) {\n            token.safeTransfer(bondedProposal.sender, bondedProposal.lockedBond);\n            emit ProposalResolved(id, true);\n        } else {\n            token.safeTransfer(finder.getImplementationAddress(OracleInterfaces.Store), bondedProposal.lockedBond);\n            emit ProposalResolved(id, false);\n        }\n        delete bondedProposals[id];\n    }\n\n    /**\n     * @notice Admin method to set the bond amount.\n     * @dev Admin is intended to be the governance system, itself.\n     * @param _bond the new bond.\n     */\n    function setBond(uint256 _bond) public nonReentrant() onlyOwner() {\n        bond = _bond;\n        emit BondSet(_bond);\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/Finder.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/FinderInterface.sol\";\n\n/**\n * @title Provides addresses of the live contracts implementing certain interfaces.\n * @dev Examples of interfaces with implementations that Finder locates are the Oracle and Store interfaces.\n */\ncontract Finder is FinderInterface, Ownable {\n    mapping(bytes32 => address) public interfacesImplemented;\n\n    event InterfaceImplementationChanged(bytes32 indexed interfaceName, address indexed newImplementationAddress);\n\n    /**\n     * @notice Updates the address of the contract that implements `interfaceName`.\n     * @param interfaceName bytes32 of the interface name that is either changed or registered.\n     * @param implementationAddress address of the implementation contract.\n     */\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress)\n        external\n        override\n        onlyOwner\n    {\n        interfacesImplemented[interfaceName] = implementationAddress;\n\n        emit InterfaceImplementationChanged(interfaceName, implementationAddress);\n    }\n\n    /**\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\n     * @param interfaceName queried interface.\n     * @return implementationAddress address of the defined interface.\n     */\n    function getImplementationAddress(bytes32 interfaceName) external view override returns (address) {\n        address implementationAddress = interfacesImplemented[interfaceName];\n        require(implementationAddress != address(0x0), \"Implementation not found\");\n        return implementationAddress;\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/GovernorV2.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/MultiRole.sol\";\nimport \"../../common/implementation/FixedPoint.sol\";\nimport \"../../common/implementation/Testable.sol\";\nimport \"../interfaces/FinderInterface.sol\";\nimport \"../interfaces/IdentifierWhitelistInterface.sol\";\nimport \"../interfaces/OracleGovernanceInterface.sol\";\nimport \"./Constants.sol\";\nimport \"./AdminIdentifierLib.sol\";\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/**\n * @title Takes proposals for certain governance actions and allows UMA token holders to vote on them.\n */\ncontract GovernorV2 is MultiRole, Testable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    /****************************************\n     *     INTERNAL VARIABLES AND STORAGE   *\n     ****************************************/\n\n    enum Roles {\n        Owner, // Can set the proposer.\n        Proposer // Address that can make proposals.\n    }\n\n    struct Transaction {\n        address to;\n        uint256 value;\n        bytes data;\n    }\n\n    struct Proposal {\n        Transaction[] transactions;\n        uint256 requestTime;\n        bytes ancillaryData;\n    }\n\n    FinderInterface private finder;\n    Proposal[] public proposals;\n\n    /****************************************\n     *                EVENTS                *\n     ****************************************/\n\n    // Emitted when a new proposal is created.\n    event NewProposal(uint256 indexed id, Transaction[] transactions);\n\n    // Emitted when an existing proposal is executed.\n    event ProposalExecuted(uint256 indexed id, uint256 transactionIndex);\n\n    /**\n     * @notice Construct the Governor contract.\n     * @param _finderAddress keeps track of all contracts within the system based on their interfaceName.\n     * @param _startingId the initial proposal id that the contract will begin incrementing from.\n     * @param _timerAddress Contract that stores the current time in a testing environment.\n     * Must be set to 0x0 for production environments that use live time.\n     */\n    constructor(\n        address _finderAddress,\n        uint256 _startingId,\n        address _timerAddress\n    ) Testable(_timerAddress) {\n        finder = FinderInterface(_finderAddress);\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\n        _createExclusiveRole(uint256(Roles.Proposer), uint256(Roles.Owner), msg.sender);\n\n        // Ensure the startingId is not set unreasonably high to avoid it being set such that new proposals overwrite\n        // other storage slots in the contract.\n        uint256 maxStartingId = 10**18;\n        require(_startingId <= maxStartingId, \"Cannot set startingId larger than 10^18\");\n\n        // This just sets the initial length of the array to the startingId since modifying length directly has been\n        // disallowed in solidity 0.6.\n        assembly {\n            sstore(proposals.slot, _startingId)\n        }\n    }\n\n    /****************************************\n     *          PROPOSAL ACTIONS            *\n     ****************************************/\n\n    /**\n     * @notice Proposes a new governance action. Can only be called by the holder of the Proposer role.\n     * @param transactions list of transactions that are being proposed.\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\n     * @dev You can create the data portion of each transaction by doing the following:\n     * ```\n     * const truffleContractInstance = await TruffleContract.deployed()\n     * const data = truffleContractInstance.methods.methodToCall(arg1, arg2).encodeABI()\n     * ```\n     * Note: this method must be public because of a solidity limitation that\n     * disallows structs arrays to be passed to external functions.\n     */\n    function propose(Transaction[] memory transactions, bytes memory ancillaryData)\n        public\n        onlyRoleHolder(uint256(Roles.Proposer))\n    {\n        uint256 id = proposals.length;\n        uint256 time = getCurrentTime();\n\n        // Note: doing all of this array manipulation manually is necessary because directly setting an array of\n        // structs in storage to an an array of structs in memory is currently not implemented in solidity :/.\n\n        // Add a zero-initialized element to the proposals array.\n        proposals.push();\n\n        // Initialize the new proposal.\n        Proposal storage proposal = proposals[id];\n        proposal.requestTime = time;\n        proposal.ancillaryData = ancillaryData;\n\n        // Initialize the transaction array.\n        for (uint256 i = 0; i < transactions.length; i++) {\n            require(transactions[i].to != address(0), \"The `to` address cannot be 0x0\");\n            // If the transaction has any data with it the recipient must be a contract, not an EOA.\n            if (transactions[i].data.length > 0) {\n                require(transactions[i].to.isContract(), \"EOA can't accept tx with data\");\n            }\n            proposal.transactions.push(transactions[i]);\n        }\n\n        bytes32 identifier = AdminIdentifierLib._constructIdentifier(id);\n\n        // Request a vote on this proposal in the DVM.\n        _getOracle().requestGovernanceAction(identifier, time, ancillaryData);\n\n        emit NewProposal(id, transactions);\n    }\n\n    /**\n     * @notice Executes a proposed governance action that has been approved by voters.\n     * @dev This can be called by any address. Caller is expected to send enough ETH to execute payable transactions.\n     * @param id unique id for the executed proposal.\n     * @param transactionIndex unique transaction index for the executed proposal.\n     */\n    function executeProposal(uint256 id, uint256 transactionIndex) external payable {\n        Proposal storage proposal = proposals[id];\n        int256 price =\n            _getOracle().getPrice(\n                AdminIdentifierLib._constructIdentifier(id),\n                proposal.requestTime,\n                proposal.ancillaryData\n            );\n\n        Transaction memory transaction = proposal.transactions[transactionIndex];\n\n        require(\n            transactionIndex == 0 || proposal.transactions[transactionIndex.sub(1)].to == address(0),\n            \"Previous tx not yet executed\"\n        );\n        require(transaction.to != address(0), \"Tx already executed\");\n        require(price != 0, \"Proposal was rejected\");\n        require(msg.value == transaction.value, \"Must send exact amount of ETH\");\n\n        // Delete the transaction before execution to avoid any potential re-entrancy issues.\n        delete proposal.transactions[transactionIndex];\n\n        require(_executeCall(transaction.to, transaction.value, transaction.data), \"Tx execution failed\");\n\n        emit ProposalExecuted(id, transactionIndex);\n    }\n\n    /****************************************\n     *       GOVERNOR STATE GETTERS         *\n     ****************************************/\n\n    /**\n     * @notice Gets the total number of proposals (includes executed and non-executed).\n     * @return uint256 representing the current number of proposals.\n     */\n    function numProposals() external view returns (uint256) {\n        return proposals.length;\n    }\n\n    /**\n     * @notice Gets the proposal data for a particular id.\n     * @dev after a proposal is executed, its data will be zeroed out, except for the request time.\n     * @param id uniquely identify the identity of the proposal.\n     * @return proposal struct containing transactions[] and requestTime.\n     */\n    function getProposal(uint256 id) external view returns (Proposal memory) {\n        return proposals[id];\n    }\n\n    /****************************************\n     *      PRIVATE GETTERS AND FUNCTIONS   *\n     ****************************************/\n\n    function _executeCall(\n        address to,\n        uint256 value,\n        bytes memory data\n    ) private returns (bool) {\n        // Mostly copied from:\n        // solhint-disable-next-line max-line-length\n        // https://github.com/gnosis/safe-contracts/blob/59cfdaebcd8b87a0a32f87b50fead092c10d3a05/contracts/base/Executor.sol#L23-L31\n        // solhint-disable-next-line no-inline-assembly\n\n        bool success;\n        assembly {\n            let inputData := add(data, 0x20)\n            let inputDataSize := mload(data)\n            success := call(gas(), to, value, inputData, inputDataSize, 0, 0)\n        }\n        return success;\n    }\n\n    function _getOracle() private view returns (OracleGovernanceInterface) {\n        return OracleGovernanceInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\n    }\n\n    function _getIdentifierWhitelist() private view returns (IdentifierWhitelistInterface supportedIdentifiers) {\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/Proposer.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./Finder.sol\";\nimport \"./Governor.sol\";\nimport \"./Constants.sol\";\nimport \"./Voting.sol\";\nimport \"./AdminIdentifierLib.sol\";\nimport \"../../common/implementation/Lockable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title Proposer contract that allows anyone to make governance proposals with a bond.\n */\ncontract Proposer is Ownable, Testable, Lockable {\n    using SafeERC20 for IERC20;\n    IERC20 public token;\n    uint256 public bond;\n    Governor public governor;\n    Finder public finder;\n\n    struct BondedProposal {\n        address sender;\n        // 64 bits to save a storage slot.\n        uint64 time;\n        uint256 lockedBond;\n    }\n    mapping(uint256 => BondedProposal) public bondedProposals;\n\n    event BondSet(uint256 bond);\n    event ProposalResolved(uint256 indexed id, bool success);\n\n    /**\n     * @notice Construct the Proposer contract.\n     * @param _token the ERC20 token that the bond is paid in.\n     * @param _bond the bond amount.\n     * @param _governor the governor contract that this contract makes proposals to.\n     * @param _finder the finder contract used to look up addresses.\n     * @param _timer the timer contract to control the output of getCurrentTime(). Set to 0x0 if in production.\n     */\n    constructor(\n        IERC20 _token,\n        uint256 _bond,\n        Governor _governor,\n        Finder _finder,\n        address _timer\n    ) Testable(_timer) {\n        token = _token;\n        governor = _governor;\n        finder = _finder;\n        setBond(_bond);\n        transferOwnership(address(_governor));\n    }\n\n    /**\n     * @notice Propose a new set of governance transactions for vote.\n     * @dev Pulls bond from the caller.\n     * @param transactions list of transactions for the governor to execute.\n     * @return id the id of the governor proposal.\n     */\n    function propose(Governor.Transaction[] memory transactions) external nonReentrant() returns (uint256 id) {\n        id = governor.numProposals();\n        token.safeTransferFrom(msg.sender, address(this), bond);\n        bondedProposals[id] = BondedProposal({ sender: msg.sender, lockedBond: bond, time: uint64(getCurrentTime()) });\n        governor.propose(transactions);\n    }\n\n    /**\n     * @notice Resolves a proposal by checking the status of the request in the Voting contract.\n     * @dev For the resolution to work correctly, this contract must be a registered contract in the DVM.\n     * @param id proposal id.\n     */\n    function resolveProposal(uint256 id) external nonReentrant() {\n        BondedProposal storage bondedProposal = bondedProposals[id];\n        Voting voting = Voting(finder.getImplementationAddress(OracleInterfaces.Oracle));\n        require(\n            voting.hasPrice(AdminIdentifierLib._constructIdentifier(id), bondedProposal.time, \"\"),\n            \"No price resolved\"\n        );\n        if (voting.getPrice(AdminIdentifierLib._constructIdentifier(id), bondedProposal.time, \"\") != 0) {\n            token.safeTransfer(bondedProposal.sender, bondedProposal.lockedBond);\n            emit ProposalResolved(id, true);\n        } else {\n            token.safeTransfer(finder.getImplementationAddress(OracleInterfaces.Store), bondedProposal.lockedBond);\n            emit ProposalResolved(id, false);\n        }\n        delete bondedProposals[id];\n    }\n\n    /**\n     * @notice Admin method to set the bond amount.\n     * @dev Admin is intended to be the governance system, itself.\n     * @param _bond the new bond.\n     */\n    function setBond(uint256 _bond) public nonReentrant() onlyOwner() {\n        bond = _bond;\n        emit BondSet(_bond);\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/Governor.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/MultiRole.sol\";\nimport \"../../common/implementation/FixedPoint.sol\";\nimport \"../../common/implementation/Testable.sol\";\nimport \"../interfaces/FinderInterface.sol\";\nimport \"../interfaces/IdentifierWhitelistInterface.sol\";\nimport \"../interfaces/OracleInterface.sol\";\nimport \"./Constants.sol\";\nimport \"./AdminIdentifierLib.sol\";\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/**\n * @title Takes proposals for certain governance actions and allows UMA token holders to vote on them.\n */\ncontract Governor is MultiRole, Testable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    /****************************************\n     *     INTERNAL VARIABLES AND STORAGE   *\n     ****************************************/\n\n    enum Roles {\n        Owner, // Can set the proposer.\n        Proposer // Address that can make proposals.\n    }\n\n    struct Transaction {\n        address to;\n        uint256 value;\n        bytes data;\n    }\n\n    struct Proposal {\n        Transaction[] transactions;\n        uint256 requestTime;\n    }\n\n    FinderInterface private finder;\n    Proposal[] public proposals;\n\n    /****************************************\n     *                EVENTS                *\n     ****************************************/\n\n    // Emitted when a new proposal is created.\n    event NewProposal(uint256 indexed id, Transaction[] transactions);\n\n    // Emitted when an existing proposal is executed.\n    event ProposalExecuted(uint256 indexed id, uint256 transactionIndex);\n\n    /**\n     * @notice Construct the Governor contract.\n     * @param _finderAddress keeps track of all contracts within the system based on their interfaceName.\n     * @param _startingId the initial proposal id that the contract will begin incrementing from.\n     * @param _timerAddress Contract that stores the current time in a testing environment.\n     * Must be set to 0x0 for production environments that use live time.\n     */\n    constructor(\n        address _finderAddress,\n        uint256 _startingId,\n        address _timerAddress\n    ) Testable(_timerAddress) {\n        finder = FinderInterface(_finderAddress);\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\n        _createExclusiveRole(uint256(Roles.Proposer), uint256(Roles.Owner), msg.sender);\n\n        // Ensure the startingId is not set unreasonably high to avoid it being set such that new proposals overwrite\n        // other storage slots in the contract.\n        uint256 maxStartingId = 10**18;\n        require(_startingId <= maxStartingId, \"Cannot set startingId larger than 10^18\");\n\n        // This just sets the initial length of the array to the startingId since modifying length directly has been\n        // disallowed in solidity 0.6.\n        assembly {\n            sstore(proposals.slot, _startingId)\n        }\n    }\n\n    /****************************************\n     *          PROPOSAL ACTIONS            *\n     ****************************************/\n\n    /**\n     * @notice Proposes a new governance action. Can only be called by the holder of the Proposer role.\n     * @param transactions list of transactions that are being proposed.\n     * @dev You can create the data portion of each transaction by doing the following:\n     * ```\n     * const truffleContractInstance = await TruffleContract.deployed()\n     * const data = truffleContractInstance.methods.methodToCall(arg1, arg2).encodeABI()\n     * ```\n     * Note: this method must be public because of a solidity limitation that\n     * disallows structs arrays to be passed to external functions.\n     */\n    function propose(Transaction[] memory transactions) public onlyRoleHolder(uint256(Roles.Proposer)) {\n        uint256 id = proposals.length;\n        uint256 time = getCurrentTime();\n\n        // Note: doing all of this array manipulation manually is necessary because directly setting an array of\n        // structs in storage to an an array of structs in memory is currently not implemented in solidity :/.\n\n        // Add a zero-initialized element to the proposals array.\n        proposals.push();\n\n        // Initialize the new proposal.\n        Proposal storage proposal = proposals[id];\n        proposal.requestTime = time;\n\n        // Initialize the transaction array.\n        for (uint256 i = 0; i < transactions.length; i++) {\n            require(transactions[i].to != address(0), \"The `to` address cannot be 0x0\");\n            // If the transaction has any data with it the recipient must be a contract, not an EOA.\n            if (transactions[i].data.length > 0) {\n                require(transactions[i].to.isContract(), \"EOA can't accept tx with data\");\n            }\n            proposal.transactions.push(transactions[i]);\n        }\n\n        bytes32 identifier = AdminIdentifierLib._constructIdentifier(id);\n\n        // Request a vote on this proposal in the DVM.\n        OracleInterface oracle = _getOracle();\n        IdentifierWhitelistInterface supportedIdentifiers = _getIdentifierWhitelist();\n        supportedIdentifiers.addSupportedIdentifier(identifier);\n\n        oracle.requestPrice(identifier, time);\n        supportedIdentifiers.removeSupportedIdentifier(identifier);\n\n        emit NewProposal(id, transactions);\n    }\n\n    /**\n     * @notice Executes a proposed governance action that has been approved by voters.\n     * @dev This can be called by any address. Caller is expected to send enough ETH to execute payable transactions.\n     * @param id unique id for the executed proposal.\n     * @param transactionIndex unique transaction index for the executed proposal.\n     */\n    function executeProposal(uint256 id, uint256 transactionIndex) external payable {\n        Proposal storage proposal = proposals[id];\n        int256 price = _getOracle().getPrice(AdminIdentifierLib._constructIdentifier(id), proposal.requestTime);\n\n        Transaction memory transaction = proposal.transactions[transactionIndex];\n\n        require(\n            transactionIndex == 0 || proposal.transactions[transactionIndex.sub(1)].to == address(0),\n            \"Previous tx not yet executed\"\n        );\n        require(transaction.to != address(0), \"Tx already executed\");\n        require(price != 0, \"Proposal was rejected\");\n        require(msg.value == transaction.value, \"Must send exact amount of ETH\");\n\n        // Delete the transaction before execution to avoid any potential re-entrancy issues.\n        delete proposal.transactions[transactionIndex];\n\n        require(_executeCall(transaction.to, transaction.value, transaction.data), \"Tx execution failed\");\n\n        emit ProposalExecuted(id, transactionIndex);\n    }\n\n    /****************************************\n     *       GOVERNOR STATE GETTERS         *\n     ****************************************/\n\n    /**\n     * @notice Gets the total number of proposals (includes executed and non-executed).\n     * @return uint256 representing the current number of proposals.\n     */\n    function numProposals() external view returns (uint256) {\n        return proposals.length;\n    }\n\n    /**\n     * @notice Gets the proposal data for a particular id.\n     * @dev after a proposal is executed, its data will be zeroed out, except for the request time.\n     * @param id uniquely identify the identity of the proposal.\n     * @return proposal struct containing transactions[] and requestTime.\n     */\n    function getProposal(uint256 id) external view returns (Proposal memory) {\n        return proposals[id];\n    }\n\n    /****************************************\n     *      PRIVATE GETTERS AND FUNCTIONS   *\n     ****************************************/\n\n    function _executeCall(\n        address to,\n        uint256 value,\n        bytes memory data\n    ) private returns (bool) {\n        // Mostly copied from:\n        // solhint-disable-next-line max-line-length\n        // https://github.com/gnosis/safe-contracts/blob/59cfdaebcd8b87a0a32f87b50fead092c10d3a05/contracts/base/Executor.sol#L23-L31\n        // solhint-disable-next-line no-inline-assembly\n\n        bool success;\n        assembly {\n            let inputData := add(data, 0x20)\n            let inputDataSize := mload(data)\n            success := call(gas(), to, value, inputData, inputDataSize, 0, 0)\n        }\n        return success;\n    }\n\n    function _getOracle() private view returns (OracleInterface) {\n        return OracleInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\n    }\n\n    function _getIdentifierWhitelist() private view returns (IdentifierWhitelistInterface supportedIdentifiers) {\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/test/GovernorTest.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../Governor.sol\";\nimport \"../AdminIdentifierLib.sol\";\n\n// GovernorTest exposes internal methods in the Governor for testing.\ncontract GovernorTest is Governor {\n    constructor(address _timerAddress) Governor(address(0), 0, _timerAddress) {}\n\n    function addPrefix(\n        bytes32 input,\n        bytes32 prefix,\n        uint256 prefixLength\n    ) external pure returns (bytes32) {\n        return AdminIdentifierLib._addPrefix(input, prefix, prefixLength);\n    }\n\n    function uintToUtf8(uint256 v) external pure returns (bytes32 ret) {\n        return AdminIdentifierLib._uintToUtf8(v);\n    }\n\n    function constructIdentifier(uint256 id) external pure returns (bytes32 identifier) {\n        return AdminIdentifierLib._constructIdentifier(id);\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/test/VoteTimingTest.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/VotingInterface.sol\";\nimport \"../VoteTiming.sol\";\n\n// Wraps the library VoteTiming for testing purposes.\ncontract VoteTimingTest {\n    using VoteTiming for VoteTiming.Data;\n\n    VoteTiming.Data public voteTiming;\n\n    constructor(uint256 phaseLength) {\n        wrapInit(phaseLength);\n    }\n\n    function wrapComputeCurrentRoundId(uint256 currentTime) external view returns (uint256) {\n        return voteTiming.computeCurrentRoundId(currentTime);\n    }\n\n    function wrapComputeCurrentPhase(uint256 currentTime) external view returns (VotingAncillaryInterface.Phase) {\n        return voteTiming.computeCurrentPhase(currentTime);\n    }\n\n    function wrapInit(uint256 phaseLength) public {\n        voteTiming.init(phaseLength);\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/perpetual-multiparty/PerpetualPositionManager.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../../common/implementation/FixedPoint.sol\";\nimport \"../../common/interfaces/ExpandedIERC20.sol\";\n\nimport \"../../oracle/interfaces/OracleInterface.sol\";\nimport \"../../oracle/interfaces/IdentifierWhitelistInterface.sol\";\nimport \"../../oracle/implementation/Constants.sol\";\n\nimport \"../common/FundingRateApplier.sol\";\n\n/**\n * @title Financial contract with priceless position management.\n * @notice Handles positions for multiple sponsors in an optimistic (i.e., priceless) way without relying\n * on a price feed. On construction, deploys a new ERC20, managed by this contract, that is the synthetic token.\n */\n\ncontract PerpetualPositionManager is FundingRateApplier {\n    using SafeMath for uint256;\n    using FixedPoint for FixedPoint.Unsigned;\n    using SafeERC20 for IERC20;\n    using SafeERC20 for ExpandedIERC20;\n\n    /****************************************\n     *  PRICELESS POSITION DATA STRUCTURES  *\n     ****************************************/\n\n    // Represents a single sponsor's position. All collateral is held by this contract.\n    // This struct acts as bookkeeping for how much of that collateral is allocated to each sponsor.\n    struct PositionData {\n        FixedPoint.Unsigned tokensOutstanding;\n        // Tracks pending withdrawal requests. A withdrawal request is pending if `withdrawalRequestPassTimestamp != 0`.\n        uint256 withdrawalRequestPassTimestamp;\n        FixedPoint.Unsigned withdrawalRequestAmount;\n        // Raw collateral value. This value should never be accessed directly -- always use _getFeeAdjustedCollateral().\n        // To add or remove collateral, use _addCollateral() and _removeCollateral().\n        FixedPoint.Unsigned rawCollateral;\n    }\n\n    // Maps sponsor addresses to their positions. Each sponsor can have only one position.\n    mapping(address => PositionData) public positions;\n\n    // Keep track of the total collateral and tokens across all positions to enable calculating the\n    // global collateralization ratio without iterating over all positions.\n    FixedPoint.Unsigned public totalTokensOutstanding;\n\n    // Similar to the rawCollateral in PositionData, this value should not be used directly.\n    // _getFeeAdjustedCollateral(), _addCollateral() and _removeCollateral() must be used to access and adjust.\n    FixedPoint.Unsigned public rawTotalPositionCollateral;\n\n    // Synthetic token created by this contract.\n    ExpandedIERC20 public tokenCurrency;\n\n    // Unique identifier for DVM price feed ticker.\n    bytes32 public priceIdentifier;\n\n    // Time that has to elapse for a withdrawal request to be considered passed, if no liquidations occur.\n    // !!Note: The lower the withdrawal liveness value, the more risk incurred by the contract.\n    //       Extremely low liveness values increase the chance that opportunistic invalid withdrawal requests\n    //       expire without liquidation, thereby increasing the insolvency risk for the contract as a whole. An insolvent\n    //       contract is extremely risky for any sponsor or synthetic token holder for the contract.\n    uint256 public withdrawalLiveness;\n\n    // Minimum number of tokens in a sponsor's position.\n    FixedPoint.Unsigned public minSponsorTokens;\n\n    // Expiry price pulled from the DVM in the case of an emergency shutdown.\n    FixedPoint.Unsigned public emergencyShutdownPrice;\n\n    /****************************************\n     *                EVENTS                *\n     ****************************************/\n\n    event Deposit(address indexed sponsor, uint256 indexed collateralAmount);\n    event Withdrawal(address indexed sponsor, uint256 indexed collateralAmount);\n    event RequestWithdrawal(address indexed sponsor, uint256 indexed collateralAmount);\n    event RequestWithdrawalExecuted(address indexed sponsor, uint256 indexed collateralAmount);\n    event RequestWithdrawalCanceled(address indexed sponsor, uint256 indexed collateralAmount);\n    event PositionCreated(address indexed sponsor, uint256 indexed collateralAmount, uint256 indexed tokenAmount);\n    event NewSponsor(address indexed sponsor);\n    event EndedSponsorPosition(address indexed sponsor);\n    event Redeem(address indexed sponsor, uint256 indexed collateralAmount, uint256 indexed tokenAmount);\n    event Repay(address indexed sponsor, uint256 indexed numTokensRepaid, uint256 indexed newTokenCount);\n    event EmergencyShutdown(address indexed caller, uint256 shutdownTimestamp);\n    event SettleEmergencyShutdown(\n        address indexed caller,\n        uint256 indexed collateralReturned,\n        uint256 indexed tokensBurned\n    );\n\n    /****************************************\n     *               MODIFIERS              *\n     ****************************************/\n\n    modifier onlyCollateralizedPosition(address sponsor) {\n        _onlyCollateralizedPosition(sponsor);\n        _;\n    }\n\n    modifier noPendingWithdrawal(address sponsor) {\n        _positionHasNoPendingWithdrawal(sponsor);\n        _;\n    }\n\n    /**\n     * @notice Construct the PerpetualPositionManager.\n     * @dev Deployer of this contract should consider carefully which parties have ability to mint and burn\n     * the synthetic tokens referenced by `_tokenAddress`. This contract's security assumes that no external accounts\n     * can mint new tokens, which could be used to steal all of this contract's locked collateral.\n     * We recommend to only use synthetic token contracts whose sole Owner role (the role capable of adding & removing roles)\n     * is assigned to this contract, whose sole Minter role is assigned to this contract, and whose\n     * total supply is 0 prior to construction of this contract.\n     * @param _withdrawalLiveness liveness delay, in seconds, for pending withdrawals.\n     * @param _collateralAddress ERC20 token used as collateral for all positions.\n     * @param _tokenAddress ERC20 token used as synthetic token.\n     * @param _finderAddress UMA protocol Finder used to discover other protocol contracts.\n     * @param _priceIdentifier registered in the DVM for the synthetic.\n     * @param _fundingRateIdentifier Unique identifier for DVM price feed ticker for child financial contract.\n     * @param _minSponsorTokens minimum number of tokens that must exist at any time in a position.\n     * @param _tokenScaling initial scaling to apply to the token value (i.e. scales the tracking index).\n     * @param _timerAddress Contract that stores the current time in a testing environment. Set to 0x0 for production.\n     */\n    constructor(\n        uint256 _withdrawalLiveness,\n        address _collateralAddress,\n        address _tokenAddress,\n        address _finderAddress,\n        bytes32 _priceIdentifier,\n        bytes32 _fundingRateIdentifier,\n        FixedPoint.Unsigned memory _minSponsorTokens,\n        address _configStoreAddress,\n        FixedPoint.Unsigned memory _tokenScaling,\n        address _timerAddress\n    )\n        FundingRateApplier(\n            _fundingRateIdentifier,\n            _collateralAddress,\n            _finderAddress,\n            _configStoreAddress,\n            _tokenScaling,\n            _timerAddress\n        )\n    {\n        require(_getIdentifierWhitelist().isIdentifierSupported(_priceIdentifier));\n\n        withdrawalLiveness = _withdrawalLiveness;\n        tokenCurrency = ExpandedIERC20(_tokenAddress);\n        minSponsorTokens = _minSponsorTokens;\n        priceIdentifier = _priceIdentifier;\n    }\n\n    /****************************************\n     *          POSITION FUNCTIONS          *\n     ****************************************/\n\n    /**\n     * @notice Transfers `collateralAmount` of `collateralCurrency` into the specified sponsor's position.\n     * @dev Increases the collateralization level of a position after creation. This contract must be approved to spend\n     * at least `collateralAmount` of `collateralCurrency`.\n     * @param sponsor the sponsor to credit the deposit to.\n     * @param collateralAmount total amount of collateral tokens to be sent to the sponsor's position.\n     */\n    function depositTo(address sponsor, FixedPoint.Unsigned memory collateralAmount)\n        public\n        notEmergencyShutdown()\n        noPendingWithdrawal(sponsor)\n        fees()\n        nonReentrant()\n    {\n        require(collateralAmount.isGreaterThan(0));\n        PositionData storage positionData = _getPositionData(sponsor);\n\n        // Increase the position and global collateral balance by collateral amount.\n        _incrementCollateralBalances(positionData, collateralAmount);\n\n        emit Deposit(sponsor, collateralAmount.rawValue);\n\n        // Move collateral currency from sender to contract.\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), collateralAmount.rawValue);\n    }\n\n    /**\n     * @notice Transfers `collateralAmount` of `collateralCurrency` into the caller's position.\n     * @dev Increases the collateralization level of a position after creation. This contract must be approved to spend\n     * at least `collateralAmount` of `collateralCurrency`.\n     * @param collateralAmount total amount of collateral tokens to be sent to the sponsor's position.\n     */\n    function deposit(FixedPoint.Unsigned memory collateralAmount) public {\n        // This is just a thin wrapper over depositTo that specified the sender as the sponsor.\n        depositTo(msg.sender, collateralAmount);\n    }\n\n    /**\n     * @notice Transfers `collateralAmount` of `collateralCurrency` from the sponsor's position to the sponsor.\n     * @dev Reverts if the withdrawal puts this position's collateralization ratio below the global collateralization\n     * ratio. In that case, use `requestWithdrawal`. Might not withdraw the full requested amount to account for precision loss.\n     * @param collateralAmount is the amount of collateral to withdraw.\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\n     */\n    function withdraw(FixedPoint.Unsigned memory collateralAmount)\n        public\n        notEmergencyShutdown()\n        noPendingWithdrawal(msg.sender)\n        fees()\n        nonReentrant()\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\n    {\n        require(collateralAmount.isGreaterThan(0));\n        PositionData storage positionData = _getPositionData(msg.sender);\n\n        // Decrement the sponsor's collateral and global collateral amounts. Check the GCR between decrement to ensure\n        // position remains above the GCR within the withdrawal. If this is not the case the caller must submit a request.\n        amountWithdrawn = _decrementCollateralBalancesCheckGCR(positionData, collateralAmount);\n\n        emit Withdrawal(msg.sender, amountWithdrawn.rawValue);\n\n        // Move collateral currency from contract to sender.\n        // Note: that we move the amount of collateral that is decreased from rawCollateral (inclusive of fees)\n        // instead of the user requested amount. This eliminates precision loss that could occur\n        // where the user withdraws more collateral than rawCollateral is decremented by.\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\n    }\n\n    /**\n     * @notice Starts a withdrawal request that, if passed, allows the sponsor to withdraw from their position.\n     * @dev The request will be pending for `withdrawalLiveness`, during which the position can be liquidated.\n     * @param collateralAmount the amount of collateral requested to withdraw\n     */\n    function requestWithdrawal(FixedPoint.Unsigned memory collateralAmount)\n        public\n        notEmergencyShutdown()\n        noPendingWithdrawal(msg.sender)\n        nonReentrant()\n    {\n        PositionData storage positionData = _getPositionData(msg.sender);\n        require(\n            collateralAmount.isGreaterThan(0) &&\n                collateralAmount.isLessThanOrEqual(_getFeeAdjustedCollateral(positionData.rawCollateral))\n        );\n\n        // Update the position object for the user.\n        positionData.withdrawalRequestPassTimestamp = getCurrentTime().add(withdrawalLiveness);\n        positionData.withdrawalRequestAmount = collateralAmount;\n\n        emit RequestWithdrawal(msg.sender, collateralAmount.rawValue);\n    }\n\n    /**\n     * @notice After a passed withdrawal request (i.e., by a call to `requestWithdrawal` and waiting\n     * `withdrawalLiveness`), withdraws `positionData.withdrawalRequestAmount` of collateral currency.\n     * @dev Might not withdraw the full requested amount in order to account for precision loss or if the full requested\n     * amount exceeds the collateral in the position (due to paying fees).\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\n     */\n    function withdrawPassedRequest()\n        external\n        notEmergencyShutdown()\n        fees()\n        nonReentrant()\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\n    {\n        PositionData storage positionData = _getPositionData(msg.sender);\n        require(\n            positionData.withdrawalRequestPassTimestamp != 0 &&\n                positionData.withdrawalRequestPassTimestamp <= getCurrentTime()\n        );\n\n        // If withdrawal request amount is > position collateral, then withdraw the full collateral amount.\n        // This situation is possible due to fees charged since the withdrawal was originally requested.\n        FixedPoint.Unsigned memory amountToWithdraw = positionData.withdrawalRequestAmount;\n        if (positionData.withdrawalRequestAmount.isGreaterThan(_getFeeAdjustedCollateral(positionData.rawCollateral))) {\n            amountToWithdraw = _getFeeAdjustedCollateral(positionData.rawCollateral);\n        }\n\n        // Decrement the sponsor's collateral and global collateral amounts.\n        amountWithdrawn = _decrementCollateralBalances(positionData, amountToWithdraw);\n\n        // Reset withdrawal request by setting withdrawal amount and withdrawal timestamp to 0.\n        _resetWithdrawalRequest(positionData);\n\n        // Transfer approved withdrawal amount from the contract to the caller.\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\n\n        emit RequestWithdrawalExecuted(msg.sender, amountWithdrawn.rawValue);\n    }\n\n    /**\n     * @notice Cancels a pending withdrawal request.\n     */\n    function cancelWithdrawal() external notEmergencyShutdown() nonReentrant() {\n        PositionData storage positionData = _getPositionData(msg.sender);\n        // No pending withdrawal require message removed to save bytecode.\n        require(positionData.withdrawalRequestPassTimestamp != 0);\n\n        emit RequestWithdrawalCanceled(msg.sender, positionData.withdrawalRequestAmount.rawValue);\n\n        // Reset withdrawal request by setting withdrawal amount and withdrawal timestamp to 0.\n        _resetWithdrawalRequest(positionData);\n    }\n\n    /**\n     * @notice Creates tokens by creating a new position or by augmenting an existing position. Pulls `collateralAmount\n     * ` into the sponsor's position and mints `numTokens` of `tokenCurrency`.\n     * @dev This contract must have the Minter role for the `tokenCurrency`.\n     * @dev Reverts if minting these tokens would put the position's collateralization ratio below the\n     * global collateralization ratio. This contract must be approved to spend at least `collateralAmount` of\n     * `collateralCurrency`.\n     * @param collateralAmount is the number of collateral tokens to collateralize the position with\n     * @param numTokens is the number of tokens to mint from the position.\n     */\n    function create(FixedPoint.Unsigned memory collateralAmount, FixedPoint.Unsigned memory numTokens)\n        public\n        notEmergencyShutdown()\n        fees()\n        nonReentrant()\n    {\n        PositionData storage positionData = positions[msg.sender];\n\n        // Either the new create ratio or the resultant position CR must be above the current GCR.\n        require(\n            (_checkCollateralization(\n                _getFeeAdjustedCollateral(positionData.rawCollateral).add(collateralAmount),\n                positionData.tokensOutstanding.add(numTokens)\n            ) || _checkCollateralization(collateralAmount, numTokens))\n        );\n\n        require(positionData.withdrawalRequestPassTimestamp == 0);\n        if (positionData.tokensOutstanding.isEqual(0)) {\n            require(numTokens.isGreaterThanOrEqual(minSponsorTokens));\n            emit NewSponsor(msg.sender);\n        }\n\n        // Increase the position and global collateral balance by collateral amount.\n        _incrementCollateralBalances(positionData, collateralAmount);\n\n        // Add the number of tokens created to the position's outstanding tokens.\n        positionData.tokensOutstanding = positionData.tokensOutstanding.add(numTokens);\n\n        totalTokensOutstanding = totalTokensOutstanding.add(numTokens);\n\n        emit PositionCreated(msg.sender, collateralAmount.rawValue, numTokens.rawValue);\n\n        // Transfer tokens into the contract from caller and mint corresponding synthetic tokens to the caller's address.\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), collateralAmount.rawValue);\n\n        // Note: revert reason removed to save bytecode.\n        require(tokenCurrency.mint(msg.sender, numTokens.rawValue));\n    }\n\n    /**\n     * @notice Burns `numTokens` of `tokenCurrency` and sends back the proportional amount of `collateralCurrency`.\n     * @dev Can only be called by a token sponsor. Might not redeem the full proportional amount of collateral\n     * in order to account for precision loss. This contract must be approved to spend at least `numTokens` of\n     * `tokenCurrency`.\n     * @dev This contract must have the Burner role for the `tokenCurrency`.\n     * @param numTokens is the number of tokens to be burnt for a commensurate amount of collateral.\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\n     */\n    function redeem(FixedPoint.Unsigned memory numTokens)\n        public\n        notEmergencyShutdown()\n        noPendingWithdrawal(msg.sender)\n        fees()\n        nonReentrant()\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\n    {\n        PositionData storage positionData = _getPositionData(msg.sender);\n        require(numTokens.isLessThanOrEqual(positionData.tokensOutstanding));\n\n        FixedPoint.Unsigned memory fractionRedeemed = numTokens.div(positionData.tokensOutstanding);\n        FixedPoint.Unsigned memory collateralRedeemed =\n            fractionRedeemed.mul(_getFeeAdjustedCollateral(positionData.rawCollateral));\n\n        // If redemption returns all tokens the sponsor has then we can delete their position. Else, downsize.\n        if (positionData.tokensOutstanding.isEqual(numTokens)) {\n            amountWithdrawn = _deleteSponsorPosition(msg.sender);\n        } else {\n            // Decrement the sponsor's collateral and global collateral amounts.\n            amountWithdrawn = _decrementCollateralBalances(positionData, collateralRedeemed);\n\n            // Decrease the sponsors position tokens size. Ensure it is above the min sponsor size.\n            FixedPoint.Unsigned memory newTokenCount = positionData.tokensOutstanding.sub(numTokens);\n            require(newTokenCount.isGreaterThanOrEqual(minSponsorTokens));\n            positionData.tokensOutstanding = newTokenCount;\n\n            // Update the totalTokensOutstanding after redemption.\n            totalTokensOutstanding = totalTokensOutstanding.sub(numTokens);\n        }\n\n        emit Redeem(msg.sender, amountWithdrawn.rawValue, numTokens.rawValue);\n\n        // Transfer collateral from contract to caller and burn callers synthetic tokens.\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\n        tokenCurrency.safeTransferFrom(msg.sender, address(this), numTokens.rawValue);\n        tokenCurrency.burn(numTokens.rawValue);\n    }\n\n    /**\n     * @notice Burns `numTokens` of `tokenCurrency` to decrease sponsors position size, without sending back `collateralCurrency`.\n     * This is done by a sponsor to increase position CR. Resulting size is bounded by minSponsorTokens.\n     * @dev Can only be called by token sponsor. This contract must be approved to spend `numTokens` of `tokenCurrency`.\n     * @dev This contract must have the Burner role for the `tokenCurrency`.\n     * @param numTokens is the number of tokens to be burnt from the sponsor's debt position.\n     */\n    function repay(FixedPoint.Unsigned memory numTokens)\n        public\n        notEmergencyShutdown()\n        noPendingWithdrawal(msg.sender)\n        fees()\n        nonReentrant()\n    {\n        PositionData storage positionData = _getPositionData(msg.sender);\n        require(numTokens.isLessThanOrEqual(positionData.tokensOutstanding));\n\n        // Decrease the sponsors position tokens size. Ensure it is above the min sponsor size.\n        FixedPoint.Unsigned memory newTokenCount = positionData.tokensOutstanding.sub(numTokens);\n        require(newTokenCount.isGreaterThanOrEqual(minSponsorTokens));\n        positionData.tokensOutstanding = newTokenCount;\n\n        // Update the totalTokensOutstanding after redemption.\n        totalTokensOutstanding = totalTokensOutstanding.sub(numTokens);\n\n        emit Repay(msg.sender, numTokens.rawValue, newTokenCount.rawValue);\n\n        // Transfer the tokens back from the sponsor and burn them.\n        tokenCurrency.safeTransferFrom(msg.sender, address(this), numTokens.rawValue);\n        tokenCurrency.burn(numTokens.rawValue);\n    }\n\n    /**\n     * @notice If the contract is emergency shutdown then all token holders and sponsors can redeem their tokens or\n     * remaining collateral for underlying at the prevailing price defined by a DVM vote.\n     * @dev This burns all tokens from the caller of `tokenCurrency` and sends back the resolved settlement value of\n     * `collateralCurrency`. Might not redeem the full proportional amount of collateral in order to account for\n     * precision loss. This contract must be approved to spend `tokenCurrency` at least up to the caller's full balance.\n     * @dev This contract must have the Burner role for the `tokenCurrency`.\n     * @dev Note that this function does not call the updateFundingRate modifier to update the funding rate as this\n     * function is only called after an emergency shutdown & there should be no funding rate updates after the shutdown.\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\n     */\n    function settleEmergencyShutdown()\n        external\n        isEmergencyShutdown()\n        fees()\n        nonReentrant()\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\n    {\n        // Set the emergency shutdown price as resolved from the DVM. If DVM has not resolved will revert.\n        if (emergencyShutdownPrice.isEqual(FixedPoint.fromUnscaledUint(0))) {\n            emergencyShutdownPrice = _getOracleEmergencyShutdownPrice();\n        }\n\n        // Get caller's tokens balance and calculate amount of underlying entitled to them.\n        FixedPoint.Unsigned memory tokensToRedeem = FixedPoint.Unsigned(tokenCurrency.balanceOf(msg.sender));\n        FixedPoint.Unsigned memory totalRedeemableCollateral =\n            _getFundingRateAppliedTokenDebt(tokensToRedeem).mul(emergencyShutdownPrice);\n\n        // If the caller is a sponsor with outstanding collateral they are also entitled to their excess collateral after their debt.\n        PositionData storage positionData = positions[msg.sender];\n        if (_getFeeAdjustedCollateral(positionData.rawCollateral).isGreaterThan(0)) {\n            // Calculate the underlying entitled to a token sponsor. This is collateral - debt in underlying with\n            // the funding rate applied to the outstanding token debt.\n\n            FixedPoint.Unsigned memory tokenDebtValueInCollateral =\n                _getFundingRateAppliedTokenDebt(positionData.tokensOutstanding).mul(emergencyShutdownPrice);\n            FixedPoint.Unsigned memory positionCollateral = _getFeeAdjustedCollateral(positionData.rawCollateral);\n\n            // If the debt is greater than the remaining collateral, they cannot redeem anything.\n            FixedPoint.Unsigned memory positionRedeemableCollateral =\n                tokenDebtValueInCollateral.isLessThan(positionCollateral)\n                    ? positionCollateral.sub(tokenDebtValueInCollateral)\n                    : FixedPoint.Unsigned(0);\n\n            // Add the number of redeemable tokens for the sponsor to their total redeemable collateral.\n            totalRedeemableCollateral = totalRedeemableCollateral.add(positionRedeemableCollateral);\n\n            // Reset the position state as all the value has been removed after settlement.\n            delete positions[msg.sender];\n            emit EndedSponsorPosition(msg.sender);\n        }\n\n        // Take the min of the remaining collateral and the collateral \"owed\". If the contract is undercapitalized,\n        // the caller will get as much collateral as the contract can pay out.\n        FixedPoint.Unsigned memory payout =\n            FixedPoint.min(_getFeeAdjustedCollateral(rawTotalPositionCollateral), totalRedeemableCollateral);\n\n        // Decrement total contract collateral and outstanding debt.\n        amountWithdrawn = _removeCollateral(rawTotalPositionCollateral, payout);\n        totalTokensOutstanding = totalTokensOutstanding.sub(tokensToRedeem);\n\n        emit SettleEmergencyShutdown(msg.sender, amountWithdrawn.rawValue, tokensToRedeem.rawValue);\n\n        // Transfer tokens & collateral and burn the redeemed tokens.\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\n        tokenCurrency.safeTransferFrom(msg.sender, address(this), tokensToRedeem.rawValue);\n        tokenCurrency.burn(tokensToRedeem.rawValue);\n    }\n\n    /****************************************\n     *        GLOBAL STATE FUNCTIONS        *\n     ****************************************/\n\n    /**\n     * @notice Premature contract settlement under emergency circumstances.\n     * @dev Only the governor can call this function as they are permissioned within the `FinancialContractAdmin`.\n     * Upon emergency shutdown, the contract settlement time is set to the shutdown time. This enables withdrawal\n     * to occur via the `settleEmergencyShutdown` function.\n     */\n    function emergencyShutdown() external override notEmergencyShutdown() fees() nonReentrant() {\n        // Note: revert reason removed to save bytecode.\n        require(msg.sender == _getFinancialContractsAdminAddress());\n\n        emergencyShutdownTimestamp = getCurrentTime();\n        _requestOraclePrice(emergencyShutdownTimestamp);\n\n        emit EmergencyShutdown(msg.sender, emergencyShutdownTimestamp);\n    }\n\n    /**\n     * @notice Theoretically supposed to pay fees and move money between margin accounts to make sure they\n     * reflect the NAV of the contract. However, this functionality doesn't apply to this contract.\n     * @dev This is supposed to be implemented by any contract that inherits `AdministrateeInterface` and callable\n     * only by the Governor contract. This method is therefore minimally implemented in this contract and does nothing.\n     */\n    function remargin() external pure override {\n        return;\n    }\n\n    /**\n     * @notice Accessor method for a sponsor's collateral.\n     * @dev This is necessary because the struct returned by the positions() method shows\n     * rawCollateral, which isn't a user-readable value.\n     * @dev This method accounts for pending regular fees that have not yet been withdrawn from this contract, for\n     * example if the `lastPaymentTime != currentTime`.\n     * @param sponsor address whose collateral amount is retrieved.\n     * @return collateralAmount amount of collateral within a sponsors position.\n     */\n    function getCollateral(address sponsor)\n        external\n        view\n        nonReentrantView()\n        returns (FixedPoint.Unsigned memory collateralAmount)\n    {\n        // Note: do a direct access to avoid the validity check.\n        return _getPendingRegularFeeAdjustedCollateral(_getFeeAdjustedCollateral(positions[sponsor].rawCollateral));\n    }\n\n    /**\n     * @notice Accessor method for the total collateral stored within the PerpetualPositionManager.\n     * @return totalCollateral amount of all collateral within the position manager.\n     */\n    function totalPositionCollateral()\n        external\n        view\n        nonReentrantView()\n        returns (FixedPoint.Unsigned memory totalCollateral)\n    {\n        return _getPendingRegularFeeAdjustedCollateral(_getFeeAdjustedCollateral(rawTotalPositionCollateral));\n    }\n\n    function getFundingRateAppliedTokenDebt(FixedPoint.Unsigned memory rawTokenDebt)\n        external\n        view\n        nonReentrantView()\n        returns (FixedPoint.Unsigned memory totalCollateral)\n    {\n        return _getFundingRateAppliedTokenDebt(rawTokenDebt);\n    }\n\n    /****************************************\n     *          INTERNAL FUNCTIONS          *\n     ****************************************/\n\n    // Reduces a sponsor's position and global counters by the specified parameters. Handles deleting the entire\n    // position if the entire position is being removed. Does not make any external transfers.\n    function _reduceSponsorPosition(\n        address sponsor,\n        FixedPoint.Unsigned memory tokensToRemove,\n        FixedPoint.Unsigned memory collateralToRemove,\n        FixedPoint.Unsigned memory withdrawalAmountToRemove\n    ) internal {\n        PositionData storage positionData = _getPositionData(sponsor);\n\n        // If the entire position is being removed, delete it instead.\n        if (\n            tokensToRemove.isEqual(positionData.tokensOutstanding) &&\n            _getFeeAdjustedCollateral(positionData.rawCollateral).isEqual(collateralToRemove)\n        ) {\n            _deleteSponsorPosition(sponsor);\n            return;\n        }\n\n        // Decrement the sponsor's collateral and global collateral amounts.\n        _decrementCollateralBalances(positionData, collateralToRemove);\n\n        // Ensure that the sponsor will meet the min position size after the reduction.\n        positionData.tokensOutstanding = positionData.tokensOutstanding.sub(tokensToRemove);\n        require(positionData.tokensOutstanding.isGreaterThanOrEqual(minSponsorTokens));\n\n        // Decrement the position's withdrawal amount.\n        positionData.withdrawalRequestAmount = positionData.withdrawalRequestAmount.sub(withdrawalAmountToRemove);\n\n        // Decrement the total outstanding tokens in the overall contract.\n        totalTokensOutstanding = totalTokensOutstanding.sub(tokensToRemove);\n    }\n\n    // Deletes a sponsor's position and updates global counters. Does not make any external transfers.\n    function _deleteSponsorPosition(address sponsor) internal returns (FixedPoint.Unsigned memory) {\n        PositionData storage positionToLiquidate = _getPositionData(sponsor);\n\n        FixedPoint.Unsigned memory startingGlobalCollateral = _getFeeAdjustedCollateral(rawTotalPositionCollateral);\n\n        // Remove the collateral and outstanding from the overall total position.\n        rawTotalPositionCollateral = rawTotalPositionCollateral.sub(positionToLiquidate.rawCollateral);\n        totalTokensOutstanding = totalTokensOutstanding.sub(positionToLiquidate.tokensOutstanding);\n\n        // Reset the sponsors position to have zero outstanding and collateral.\n        delete positions[sponsor];\n\n        emit EndedSponsorPosition(sponsor);\n\n        // Return fee-adjusted amount of collateral deleted from position.\n        return startingGlobalCollateral.sub(_getFeeAdjustedCollateral(rawTotalPositionCollateral));\n    }\n\n    function _pfc() internal view virtual override returns (FixedPoint.Unsigned memory) {\n        return _getFeeAdjustedCollateral(rawTotalPositionCollateral);\n    }\n\n    function _getPositionData(address sponsor)\n        internal\n        view\n        onlyCollateralizedPosition(sponsor)\n        returns (PositionData storage)\n    {\n        return positions[sponsor];\n    }\n\n    function _getIdentifierWhitelist() internal view returns (IdentifierWhitelistInterface) {\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\n    }\n\n    function _getOracle() internal view returns (OracleInterface) {\n        return OracleInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\n    }\n\n    function _getFinancialContractsAdminAddress() internal view returns (address) {\n        return finder.getImplementationAddress(OracleInterfaces.FinancialContractsAdmin);\n    }\n\n    // Requests a price for `priceIdentifier` at `requestedTime` from the Oracle.\n    function _requestOraclePrice(uint256 requestedTime) internal {\n        _getOracle().requestPrice(priceIdentifier, requestedTime);\n    }\n\n    // Fetches a resolved Oracle price from the Oracle. Reverts if the Oracle hasn't resolved for this request.\n    function _getOraclePrice(uint256 requestedTime) internal view returns (FixedPoint.Unsigned memory price) {\n        // Create an instance of the oracle and get the price. If the price is not resolved revert.\n        int256 oraclePrice = _getOracle().getPrice(priceIdentifier, requestedTime);\n\n        // For now we don't want to deal with negative prices in positions.\n        if (oraclePrice < 0) {\n            oraclePrice = 0;\n        }\n        return FixedPoint.Unsigned(uint256(oraclePrice));\n    }\n\n    // Fetches a resolved Oracle price from the Oracle. Reverts if the Oracle hasn't resolved for this request.\n    function _getOracleEmergencyShutdownPrice() internal view returns (FixedPoint.Unsigned memory) {\n        return _getOraclePrice(emergencyShutdownTimestamp);\n    }\n\n    // Reset withdrawal request by setting the withdrawal request and withdrawal timestamp to 0.\n    function _resetWithdrawalRequest(PositionData storage positionData) internal {\n        positionData.withdrawalRequestAmount = FixedPoint.fromUnscaledUint(0);\n        positionData.withdrawalRequestPassTimestamp = 0;\n    }\n\n    // Ensure individual and global consistency when increasing collateral balances. Returns the change to the position.\n    function _incrementCollateralBalances(\n        PositionData storage positionData,\n        FixedPoint.Unsigned memory collateralAmount\n    ) internal returns (FixedPoint.Unsigned memory) {\n        _addCollateral(positionData.rawCollateral, collateralAmount);\n        return _addCollateral(rawTotalPositionCollateral, collateralAmount);\n    }\n\n    // Ensure individual and global consistency when decrementing collateral balances. Returns the change to the\n    // position. We elect to return the amount that the global collateral is decreased by, rather than the individual\n    // position's collateral, because we need to maintain the invariant that the global collateral is always\n    // <= the collateral owned by the contract to avoid reverts on withdrawals. The amount returned = amount withdrawn.\n    function _decrementCollateralBalances(\n        PositionData storage positionData,\n        FixedPoint.Unsigned memory collateralAmount\n    ) internal returns (FixedPoint.Unsigned memory) {\n        _removeCollateral(positionData.rawCollateral, collateralAmount);\n        return _removeCollateral(rawTotalPositionCollateral, collateralAmount);\n    }\n\n    // Ensure individual and global consistency when decrementing collateral balances. Returns the change to the position.\n    // This function is similar to the _decrementCollateralBalances function except this function checks position GCR\n    // between the decrements. This ensures that collateral removal will not leave the position undercollateralized.\n    function _decrementCollateralBalancesCheckGCR(\n        PositionData storage positionData,\n        FixedPoint.Unsigned memory collateralAmount\n    ) internal returns (FixedPoint.Unsigned memory) {\n        _removeCollateral(positionData.rawCollateral, collateralAmount);\n        require(_checkPositionCollateralization(positionData));\n        return _removeCollateral(rawTotalPositionCollateral, collateralAmount);\n    }\n\n    // These internal functions are supposed to act identically to modifiers, but re-used modifiers\n    // unnecessarily increase contract bytecode size.\n    // source: https://blog.polymath.network/solidity-tips-and-tricks-to-save-gas-and-reduce-bytecode-size-c44580b218e6\n    function _onlyCollateralizedPosition(address sponsor) internal view {\n        require(_getFeeAdjustedCollateral(positions[sponsor].rawCollateral).isGreaterThan(0));\n    }\n\n    // Note: This checks whether an already existing position has a pending withdrawal. This cannot be used on the\n    // `create` method because it is possible that `create` is called on a new position (i.e. one without any collateral\n    // or tokens outstanding) which would fail the `onlyCollateralizedPosition` modifier on `_getPositionData`.\n    function _positionHasNoPendingWithdrawal(address sponsor) internal view {\n        require(_getPositionData(sponsor).withdrawalRequestPassTimestamp == 0);\n    }\n\n    /****************************************\n     *          PRIVATE FUNCTIONS          *\n     ****************************************/\n\n    function _checkPositionCollateralization(PositionData storage positionData) private view returns (bool) {\n        return\n            _checkCollateralization(\n                _getFeeAdjustedCollateral(positionData.rawCollateral),\n                positionData.tokensOutstanding\n            );\n    }\n\n    // Checks whether the provided `collateral` and `numTokens` have a collateralization ratio above the global\n    // collateralization ratio.\n    function _checkCollateralization(FixedPoint.Unsigned memory collateral, FixedPoint.Unsigned memory numTokens)\n        private\n        view\n        returns (bool)\n    {\n        FixedPoint.Unsigned memory global =\n            _getCollateralizationRatio(_getFeeAdjustedCollateral(rawTotalPositionCollateral), totalTokensOutstanding);\n        FixedPoint.Unsigned memory thisChange = _getCollateralizationRatio(collateral, numTokens);\n        return !global.isGreaterThan(thisChange);\n    }\n\n    function _getCollateralizationRatio(FixedPoint.Unsigned memory collateral, FixedPoint.Unsigned memory numTokens)\n        private\n        pure\n        returns (FixedPoint.Unsigned memory ratio)\n    {\n        return numTokens.isLessThanOrEqual(0) ? FixedPoint.fromUnscaledUint(0) : collateral.div(numTokens);\n    }\n\n    function _getTokenAddress() internal view override returns (address) {\n        return address(tokenCurrency);\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/common/FundingRateApplier.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../../common/implementation/Lockable.sol\";\nimport \"../../common/implementation/FixedPoint.sol\";\nimport \"../../common/implementation/Testable.sol\";\nimport \"../../common/implementation/AncillaryData.sol\";\n\nimport \"../../oracle/implementation/Constants.sol\";\nimport \"../../oracle/interfaces/OptimisticOracleInterface.sol\";\nimport \"../perpetual-multiparty/ConfigStoreInterface.sol\";\n\nimport \"./EmergencyShutdownable.sol\";\nimport \"./FeePayer.sol\";\n\n/**\n * @title FundingRateApplier contract.\n * @notice Provides funding rate payment functionality for the Perpetual contract.\n */\n\nabstract contract FundingRateApplier is EmergencyShutdownable, FeePayer {\n    using FixedPoint for FixedPoint.Unsigned;\n    using FixedPoint for FixedPoint.Signed;\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    /****************************************\n     * FUNDING RATE APPLIER DATA STRUCTURES *\n     ****************************************/\n\n    struct FundingRate {\n        // Current funding rate value.\n        FixedPoint.Signed rate;\n        // Identifier to retrieve the funding rate.\n        bytes32 identifier;\n        // Tracks the cumulative funding payments that have been paid to the sponsors.\n        // The multiplier starts at 1, and is updated by computing cumulativeFundingRateMultiplier * (1 + effectivePayment).\n        // Put another way, the cumulativeFeeMultiplier is (1 + effectivePayment1) * (1 + effectivePayment2) ...\n        // For example:\n        // The cumulativeFundingRateMultiplier should start at 1.\n        // If a 1% funding payment is paid to sponsors, the multiplier should update to 1.01.\n        // If another 1% fee is charged, the multiplier should be 1.01^2 (1.0201).\n        FixedPoint.Unsigned cumulativeMultiplier;\n        // Most recent time that the funding rate was updated.\n        uint256 updateTime;\n        // Most recent time that the funding rate was applied and changed the cumulative multiplier.\n        uint256 applicationTime;\n        // The time for the active (if it exists) funding rate proposal. 0 otherwise.\n        uint256 proposalTime;\n    }\n\n    FundingRate public fundingRate;\n\n    // Remote config store managed an owner.\n    ConfigStoreInterface public configStore;\n\n    /****************************************\n     *                EVENTS                *\n     ****************************************/\n\n    event FundingRateUpdated(int256 newFundingRate, uint256 indexed updateTime, uint256 reward);\n\n    /****************************************\n     *              MODIFIERS               *\n     ****************************************/\n\n    // This is overridden to both pay fees (which is done by applyFundingRate()) and apply the funding rate.\n    modifier fees override {\n        // Note: the funding rate is applied on every fee-accruing transaction, where the total change is simply the\n        // rate applied linearly since the last update. This implies that the compounding rate depends on the frequency\n        // of update transactions that have this modifier, and it never reaches the ideal of continuous compounding.\n        // This approximate-compounding pattern is common in the Ethereum ecosystem because of the complexity of\n        // compounding data on-chain.\n        applyFundingRate();\n        _;\n    }\n\n    // Note: this modifier is intended to be used if the caller intends to _only_ pay regular fees.\n    modifier paysRegularFees {\n        payRegularFees();\n        _;\n    }\n\n    /**\n     * @notice Constructs the FundingRateApplier contract. Called by child contracts.\n     * @param _fundingRateIdentifier identifier that tracks the funding rate of this contract.\n     * @param _collateralAddress address of the collateral token.\n     * @param _finderAddress Finder used to discover financial-product-related contracts.\n     * @param _configStoreAddress address of the remote configuration store managed by an external owner.\n     * @param _tokenScaling initial scaling to apply to the token value (i.e. scales the tracking index).\n     * @param _timerAddress address of the timer contract in test envs, otherwise 0x0.\n     */\n    constructor(\n        bytes32 _fundingRateIdentifier,\n        address _collateralAddress,\n        address _finderAddress,\n        address _configStoreAddress,\n        FixedPoint.Unsigned memory _tokenScaling,\n        address _timerAddress\n    ) FeePayer(_collateralAddress, _finderAddress, _timerAddress) EmergencyShutdownable() {\n        uint256 currentTime = getCurrentTime();\n        fundingRate.updateTime = currentTime;\n        fundingRate.applicationTime = currentTime;\n\n        // Seed the cumulative multiplier with the token scaling, from which it will be scaled as funding rates are\n        // applied over time.\n        fundingRate.cumulativeMultiplier = _tokenScaling;\n\n        fundingRate.identifier = _fundingRateIdentifier;\n        configStore = ConfigStoreInterface(_configStoreAddress);\n    }\n\n    /**\n     * @notice This method takes 3 distinct actions:\n     * 1. Pays out regular fees.\n     * 2. If possible, resolves the outstanding funding rate proposal, pulling the result in and paying out the rewards.\n     * 3. Applies the prevailing funding rate over the most recent period.\n     */\n    function applyFundingRate() public paysRegularFees() nonReentrant() {\n        _applyEffectiveFundingRate();\n    }\n\n    /**\n     * @notice Proposes a new funding rate. Proposer receives a reward if correct.\n     * @param rate funding rate being proposed.\n     * @param timestamp time at which the funding rate was computed.\n     */\n    function proposeFundingRate(FixedPoint.Signed memory rate, uint256 timestamp)\n        external\n        fees()\n        nonReentrant()\n        returns (FixedPoint.Unsigned memory totalBond)\n    {\n        require(fundingRate.proposalTime == 0);\n        _validateFundingRate(rate);\n\n        // Timestamp must be after the last funding rate update time, within the last 30 minutes.\n        uint256 currentTime = getCurrentTime();\n        uint256 updateTime = fundingRate.updateTime;\n        require(timestamp > updateTime && timestamp >= currentTime.sub(_getConfig().proposalTimePastLimit));\n\n        // Set the proposal time in order to allow this contract to track this request.\n        fundingRate.proposalTime = timestamp;\n\n        OptimisticOracleInterface optimisticOracle = _getOptimisticOracle();\n\n        // Set up optimistic oracle.\n        bytes32 identifier = fundingRate.identifier;\n        bytes memory ancillaryData = _getAncillaryData();\n        // Note: requestPrice will revert if `timestamp` is less than the current block timestamp.\n        optimisticOracle.requestPrice(identifier, timestamp, ancillaryData, collateralCurrency, 0);\n        totalBond = FixedPoint.Unsigned(\n            optimisticOracle.setBond(\n                identifier,\n                timestamp,\n                ancillaryData,\n                _pfc().mul(_getConfig().proposerBondPercentage).rawValue\n            )\n        );\n\n        // Pull bond from caller and send to optimistic oracle.\n        if (totalBond.isGreaterThan(0)) {\n            collateralCurrency.safeTransferFrom(msg.sender, address(this), totalBond.rawValue);\n            collateralCurrency.safeIncreaseAllowance(address(optimisticOracle), totalBond.rawValue);\n        }\n\n        optimisticOracle.proposePriceFor(\n            msg.sender,\n            address(this),\n            identifier,\n            timestamp,\n            ancillaryData,\n            rate.rawValue\n        );\n    }\n\n    // Returns a token amount scaled by the current funding rate multiplier.\n    // Note: if the contract has paid fees since it was deployed, the raw value should be larger than the returned value.\n    function _getFundingRateAppliedTokenDebt(FixedPoint.Unsigned memory rawTokenDebt)\n        internal\n        view\n        returns (FixedPoint.Unsigned memory tokenDebt)\n    {\n        return rawTokenDebt.mul(fundingRate.cumulativeMultiplier);\n    }\n\n    function _getOptimisticOracle() internal view returns (OptimisticOracleInterface) {\n        return OptimisticOracleInterface(finder.getImplementationAddress(OracleInterfaces.OptimisticOracle));\n    }\n\n    function _getConfig() internal returns (ConfigStoreInterface.ConfigSettings memory) {\n        return configStore.updateAndGetCurrentConfig();\n    }\n\n    function _updateFundingRate() internal {\n        uint256 proposalTime = fundingRate.proposalTime;\n        // If there is no pending proposal then do nothing. Otherwise check to see if we can update the funding rate.\n        if (proposalTime != 0) {\n            // Attempt to update the funding rate.\n            OptimisticOracleInterface optimisticOracle = _getOptimisticOracle();\n            bytes32 identifier = fundingRate.identifier;\n            bytes memory ancillaryData = _getAncillaryData();\n\n            // Try to get the price from the optimistic oracle. This call will revert if the request has not resolved\n            // yet. If the request has not resolved yet, then we need to do additional checks to see if we should\n            // \"forget\" the pending proposal and allow new proposals to update the funding rate.\n            try optimisticOracle.settleAndGetPrice(identifier, proposalTime, ancillaryData) returns (int256 price) {\n                // If successful, determine if the funding rate state needs to be updated.\n                // If the request is more recent than the last update then we should update it.\n                uint256 lastUpdateTime = fundingRate.updateTime;\n                if (proposalTime >= lastUpdateTime) {\n                    // Update funding rates\n                    fundingRate.rate = FixedPoint.Signed(price);\n                    fundingRate.updateTime = proposalTime;\n\n                    // If there was no dispute, send a reward.\n                    FixedPoint.Unsigned memory reward = FixedPoint.fromUnscaledUint(0);\n                    OptimisticOracleInterface.Request memory request =\n                        optimisticOracle.getRequest(address(this), identifier, proposalTime, ancillaryData);\n                    if (request.disputer == address(0)) {\n                        reward = _pfc().mul(_getConfig().rewardRatePerSecond).mul(proposalTime.sub(lastUpdateTime));\n                        if (reward.isGreaterThan(0)) {\n                            _adjustCumulativeFeeMultiplier(reward, _pfc());\n                            collateralCurrency.safeTransfer(request.proposer, reward.rawValue);\n                        }\n                    }\n\n                    // This event will only be emitted after the fundingRate struct's \"updateTime\" has been set\n                    // to the latest proposal's proposalTime, indicating that the proposal has been published.\n                    // So, it suffices to just emit fundingRate.updateTime here.\n                    emit FundingRateUpdated(fundingRate.rate.rawValue, fundingRate.updateTime, reward.rawValue);\n                }\n\n                // Set proposal time to 0 since this proposal has now been resolved.\n                fundingRate.proposalTime = 0;\n            } catch {\n                // Stop tracking and allow other proposals to come in if:\n                // - The requester address is empty, indicating that the Oracle does not know about this funding rate\n                //   request. This is possible if the Oracle is replaced while the price request is still pending.\n                // - The request has been disputed.\n                OptimisticOracleInterface.Request memory request =\n                    optimisticOracle.getRequest(address(this), identifier, proposalTime, ancillaryData);\n                if (request.disputer != address(0) || request.proposer == address(0)) {\n                    fundingRate.proposalTime = 0;\n                }\n            }\n        }\n    }\n\n    // Constraining the range of funding rates limits the PfC for any dishonest proposer and enhances the\n    // perpetual's security. For example, let's examine the case where the max and min funding rates\n    // are equivalent to +/- 500%/year. This 1000% funding rate range allows a 8.6% profit from corruption for a\n    // proposer who can deter honest proposers for 74 hours:\n    // 1000%/year / 360 days / 24 hours * 74 hours max attack time = ~ 8.6%.\n    // How would attack work? Imagine that the market is very volatile currently and that the \"true\" funding\n    // rate for the next 74 hours is -500%, but a dishonest proposer successfully proposes a rate of +500%\n    // (after a two hour liveness) and disputes honest proposers for the next 72 hours. This results in a funding\n    // rate error of 1000% for 74 hours, until the DVM can set the funding rate back to its correct value.\n    function _validateFundingRate(FixedPoint.Signed memory rate) internal {\n        require(\n            rate.isLessThanOrEqual(_getConfig().maxFundingRate) &&\n                rate.isGreaterThanOrEqual(_getConfig().minFundingRate)\n        );\n    }\n\n    // Fetches a funding rate from the Store, determines the period over which to compute an effective fee,\n    // and multiplies the current multiplier by the effective fee.\n    // A funding rate < 1 will reduce the multiplier, and a funding rate of > 1 will increase the multiplier.\n    // Note: 1 is set as the neutral rate because there are no negative numbers in FixedPoint, so we decide to treat\n    // values < 1 as \"negative\".\n    function _applyEffectiveFundingRate() internal {\n        // If contract is emergency shutdown, then the funding rate multiplier should no longer change.\n        if (emergencyShutdownTimestamp != 0) {\n            return;\n        }\n\n        uint256 currentTime = getCurrentTime();\n        uint256 paymentPeriod = currentTime.sub(fundingRate.applicationTime);\n\n        _updateFundingRate(); // Update the funding rate if there is a resolved proposal.\n        fundingRate.cumulativeMultiplier = _calculateEffectiveFundingRate(\n            paymentPeriod,\n            fundingRate.rate,\n            fundingRate.cumulativeMultiplier\n        );\n\n        fundingRate.applicationTime = currentTime;\n    }\n\n    function _calculateEffectiveFundingRate(\n        uint256 paymentPeriodSeconds,\n        FixedPoint.Signed memory fundingRatePerSecond,\n        FixedPoint.Unsigned memory currentCumulativeFundingRateMultiplier\n    ) internal pure returns (FixedPoint.Unsigned memory newCumulativeFundingRateMultiplier) {\n        // Note: this method uses named return variables to save a little bytecode.\n\n        // The overall formula that this function is performing:\n        //   newCumulativeFundingRateMultiplier =\n        //   (1 + (fundingRatePerSecond * paymentPeriodSeconds)) * currentCumulativeFundingRateMultiplier.\n        FixedPoint.Signed memory ONE = FixedPoint.fromUnscaledInt(1);\n\n        // Multiply the per-second rate over the number of seconds that have elapsed to get the period rate.\n        FixedPoint.Signed memory periodRate = fundingRatePerSecond.mul(SafeCast.toInt256(paymentPeriodSeconds));\n\n        // Add one to create the multiplier to scale the existing fee multiplier.\n        FixedPoint.Signed memory signedPeriodMultiplier = ONE.add(periodRate);\n\n        // Max with 0 to ensure the multiplier isn't negative, then cast to an Unsigned.\n        FixedPoint.Unsigned memory unsignedPeriodMultiplier =\n            FixedPoint.fromSigned(FixedPoint.max(signedPeriodMultiplier, FixedPoint.fromUnscaledInt(0)));\n\n        // Multiply the existing cumulative funding rate multiplier by the computed period multiplier to get the new\n        // cumulative funding rate multiplier.\n        newCumulativeFundingRateMultiplier = currentCumulativeFundingRateMultiplier.mul(unsignedPeriodMultiplier);\n    }\n\n    /**\n     * @dev We do not need to check that the ancillary data length is less than the hardcoded max length in the\n     * OptimisticOracle because the length of the ancillary data is fixed in this function.\n     */\n    function _getAncillaryData() internal view returns (bytes memory) {\n        // When ancillary data is passed to the optimistic oracle, it should be tagged with the token address\n        // whose funding rate it's trying to get so that financial contracts can re-use the same identifier for\n        // multiple funding rate products.\n        return AncillaryData.appendKeyValueAddress(\"\", \"tokenAddress\", _getTokenAddress());\n    }\n\n    function _getTokenAddress() internal view virtual returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248) {\n        require(value >= type(int248).min && value <= type(int248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return int248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240) {\n        require(value >= type(int240).min && value <= type(int240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return int240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232) {\n        require(value >= type(int232).min && value <= type(int232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return int232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224) {\n        require(value >= type(int224).min && value <= type(int224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return int224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216) {\n        require(value >= type(int216).min && value <= type(int216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return int216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208) {\n        require(value >= type(int208).min && value <= type(int208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return int208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200) {\n        require(value >= type(int200).min && value <= type(int200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return int200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192) {\n        require(value >= type(int192).min && value <= type(int192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return int192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184) {\n        require(value >= type(int184).min && value <= type(int184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return int184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176) {\n        require(value >= type(int176).min && value <= type(int176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return int176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168) {\n        require(value >= type(int168).min && value <= type(int168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return int168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160) {\n        require(value >= type(int160).min && value <= type(int160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return int160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152) {\n        require(value >= type(int152).min && value <= type(int152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return int152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144) {\n        require(value >= type(int144).min && value <= type(int144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return int144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136) {\n        require(value >= type(int136).min && value <= type(int136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return int136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120) {\n        require(value >= type(int120).min && value <= type(int120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return int120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112) {\n        require(value >= type(int112).min && value <= type(int112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return int112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104) {\n        require(value >= type(int104).min && value <= type(int104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return int104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96) {\n        require(value >= type(int96).min && value <= type(int96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return int96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88) {\n        require(value >= type(int88).min && value <= type(int88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return int88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80) {\n        require(value >= type(int80).min && value <= type(int80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return int80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72) {\n        require(value >= type(int72).min && value <= type(int72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return int72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56) {\n        require(value >= type(int56).min && value <= type(int56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return int56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48) {\n        require(value >= type(int48).min && value <= type(int48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return int48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40) {\n        require(value >= type(int40).min && value <= type(int40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return int40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24) {\n        require(value >= type(int24).min && value <= type(int24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return int24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/perpetual-multiparty/ConfigStoreInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/FixedPoint.sol\";\n\ninterface ConfigStoreInterface {\n    // All of the configuration settings available for querying by a perpetual.\n    struct ConfigSettings {\n        // Liveness period (in seconds) for an update to currentConfig to become official.\n        uint256 timelockLiveness;\n        // Reward rate paid to successful proposers. Percentage of 1 E.g., .1 is 10%.\n        FixedPoint.Unsigned rewardRatePerSecond;\n        // Bond % (of given contract's PfC) that must be staked by proposers. Percentage of 1, e.g. 0.0005 is 0.05%.\n        FixedPoint.Unsigned proposerBondPercentage;\n        // Maximum funding rate % per second that can be proposed.\n        FixedPoint.Signed maxFundingRate;\n        // Minimum funding rate % per second that can be proposed.\n        FixedPoint.Signed minFundingRate;\n        // Funding rate proposal timestamp cannot be more than this amount of seconds in the past from the latest\n        // update time.\n        uint256 proposalTimePastLimit;\n    }\n\n    function updateAndGetCurrentConfig() external returns (ConfigSettings memory);\n}\n"
    },
    "contracts/UMA/financial-templates/common/EmergencyShutdownable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/**\n * @title EmergencyShutdownable contract.\n * @notice Any contract that inherits this contract will have an emergency shutdown timestamp state variable.\n * This contract provides modifiers that can be used by children contracts to determine if the contract is\n * in the shutdown state. The child contract is expected to implement the logic that happens\n * once a shutdown occurs.\n */\n\nabstract contract EmergencyShutdownable {\n    using SafeMath for uint256;\n\n    /****************************************\n     * EMERGENCY SHUTDOWN DATA STRUCTURES *\n     ****************************************/\n\n    // Timestamp used in case of emergency shutdown. 0 if no shutdown has been triggered.\n    uint256 public emergencyShutdownTimestamp;\n\n    /****************************************\n     *              MODIFIERS               *\n     ****************************************/\n\n    modifier notEmergencyShutdown() {\n        _notEmergencyShutdown();\n        _;\n    }\n\n    modifier isEmergencyShutdown() {\n        _isEmergencyShutdown();\n        _;\n    }\n\n    /****************************************\n     *          EXTERNAL FUNCTIONS          *\n     ****************************************/\n\n    constructor() {\n        emergencyShutdownTimestamp = 0;\n    }\n\n    /****************************************\n     *          INTERNAL FUNCTIONS          *\n     ****************************************/\n\n    function _notEmergencyShutdown() internal view {\n        // Note: removed require string to save bytecode.\n        require(emergencyShutdownTimestamp == 0);\n    }\n\n    function _isEmergencyShutdown() internal view {\n        // Note: removed require string to save bytecode.\n        require(emergencyShutdownTimestamp != 0);\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/perpetual-multiparty/ConfigStore.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./ConfigStoreInterface.sol\";\nimport \"../../common/implementation/Testable.sol\";\nimport \"../../common/implementation/Lockable.sol\";\nimport \"../../common/implementation/FixedPoint.sol\";\n\n/**\n * @notice ConfigStore stores configuration settings for a perpetual contract and provides an interface for it\n * to query settings such as reward rates, proposal bond sizes, etc. The configuration settings can be upgraded\n * by a privileged account and the upgraded changes are timelocked.\n */\ncontract ConfigStore is ConfigStoreInterface, Testable, Lockable, Ownable {\n    using SafeMath for uint256;\n    using FixedPoint for FixedPoint.Unsigned;\n\n    /****************************************\n     *        STORE DATA STRUCTURES         *\n     ****************************************/\n\n    // Make currentConfig private to force user to call getCurrentConfig, which returns the pendingConfig\n    // if its liveness has expired.\n    ConfigStoreInterface.ConfigSettings private currentConfig;\n\n    // Beginning on `pendingPassedTimestamp`, the `pendingConfig` can be published as the current config.\n    ConfigStoreInterface.ConfigSettings public pendingConfig;\n    uint256 public pendingPassedTimestamp;\n\n    /****************************************\n     *                EVENTS                *\n     ****************************************/\n\n    event ProposedNewConfigSettings(\n        address indexed proposer,\n        uint256 rewardRatePerSecond,\n        uint256 proposerBondPercentage,\n        uint256 timelockLiveness,\n        int256 maxFundingRate,\n        int256 minFundingRate,\n        uint256 proposalTimePastLimit,\n        uint256 proposalPassedTimestamp\n    );\n    event ChangedConfigSettings(\n        uint256 rewardRatePerSecond,\n        uint256 proposerBondPercentage,\n        uint256 timelockLiveness,\n        int256 maxFundingRate,\n        int256 minFundingRate,\n        uint256 proposalTimePastLimit\n    );\n\n    /****************************************\n     *                MODIFIERS             *\n     ****************************************/\n\n    // Update config settings if possible.\n    modifier updateConfig() {\n        _updateConfig();\n        _;\n    }\n\n    /**\n     * @notice Construct the Config Store. An initial configuration is provided and set on construction.\n     * @param _initialConfig Configuration settings to initialize `currentConfig` with.\n     * @param _timerAddress Address of testable Timer contract.\n     */\n    constructor(ConfigSettings memory _initialConfig, address _timerAddress) Testable(_timerAddress) {\n        _validateConfig(_initialConfig);\n        currentConfig = _initialConfig;\n    }\n\n    /**\n     * @notice Returns current config or pending config if pending liveness has expired.\n     * @return ConfigSettings config settings that calling financial contract should view as \"live\".\n     */\n    function updateAndGetCurrentConfig()\n        external\n        override\n        updateConfig()\n        nonReentrant()\n        returns (ConfigStoreInterface.ConfigSettings memory)\n    {\n        return currentConfig;\n    }\n\n    /**\n     * @notice Propose new configuration settings. New settings go into effect after a liveness period passes.\n     * @param newConfig Configuration settings to publish after `currentConfig.timelockLiveness` passes from block.timestamp.\n     * @dev Callable only by owner. Calling this while there is already a pending proposal will overwrite the pending proposal.\n     */\n    function proposeNewConfig(ConfigSettings memory newConfig) external onlyOwner() nonReentrant() updateConfig() {\n        _validateConfig(newConfig);\n\n        // Warning: This overwrites a pending proposal!\n        pendingConfig = newConfig;\n\n        // Use current config's liveness period to timelock this proposal.\n        pendingPassedTimestamp = getCurrentTime().add(currentConfig.timelockLiveness);\n\n        emit ProposedNewConfigSettings(\n            msg.sender,\n            newConfig.rewardRatePerSecond.rawValue,\n            newConfig.proposerBondPercentage.rawValue,\n            newConfig.timelockLiveness,\n            newConfig.maxFundingRate.rawValue,\n            newConfig.minFundingRate.rawValue,\n            newConfig.proposalTimePastLimit,\n            pendingPassedTimestamp\n        );\n    }\n\n    /**\n     * @notice Publish any pending configuration settings if there is a pending proposal that has passed liveness.\n     */\n    function publishPendingConfig() external nonReentrant() updateConfig() {}\n\n    /****************************************\n     *         INTERNAL FUNCTIONS           *\n     ****************************************/\n\n    // Check if pending proposal can overwrite the current config.\n    function _updateConfig() internal {\n        // If liveness has passed, publish proposed configuration settings.\n        if (_pendingProposalPassed()) {\n            currentConfig = pendingConfig;\n\n            _deletePendingConfig();\n\n            emit ChangedConfigSettings(\n                currentConfig.rewardRatePerSecond.rawValue,\n                currentConfig.proposerBondPercentage.rawValue,\n                currentConfig.timelockLiveness,\n                currentConfig.maxFundingRate.rawValue,\n                currentConfig.minFundingRate.rawValue,\n                currentConfig.proposalTimePastLimit\n            );\n        }\n    }\n\n    function _deletePendingConfig() internal {\n        delete pendingConfig;\n        pendingPassedTimestamp = 0;\n    }\n\n    function _pendingProposalPassed() internal view returns (bool) {\n        return (pendingPassedTimestamp != 0 && pendingPassedTimestamp <= getCurrentTime());\n    }\n\n    // Use this method to constrain values with which you can set ConfigSettings.\n    function _validateConfig(ConfigStoreInterface.ConfigSettings memory config) internal pure {\n        // We don't set limits on proposal timestamps because there are already natural limits:\n        // - Future: price requests to the OptimisticOracle must be in the past---we can't add further constraints.\n        // - Past: proposal times must always be after the last update time, and  a reasonable past limit would be 30\n        //   mins, meaning that no proposal timestamp can be more than 30 minutes behind the current time.\n\n        // Make sure timelockLiveness is not too long, otherwise contract might not be able to fix itself\n        // before a vulnerability drains its collateral.\n        require(config.timelockLiveness <= 7 days && config.timelockLiveness >= 1 days, \"Invalid timelockLiveness\");\n\n        // The reward rate should be modified as needed to incentivize honest proposers appropriately.\n        // Additionally, the rate should be less than 100% a year => 100% / 360 days / 24 hours / 60 mins / 60 secs\n        // = 0.0000033\n        FixedPoint.Unsigned memory maxRewardRatePerSecond = FixedPoint.fromUnscaledUint(33).div(1e7);\n        require(config.rewardRatePerSecond.isLessThan(maxRewardRatePerSecond), \"Invalid rewardRatePerSecond\");\n\n        // We don't set a limit on the proposer bond because it is a defense against dishonest proposers. If a proposer\n        // were to successfully propose a very high or low funding rate, then their PfC would be very high. The proposer\n        // could theoretically keep their \"evil\" funding rate alive indefinitely by continuously disputing honest\n        // proposers, so we would want to be able to set the proposal bond (equal to the dispute bond) higher than their\n        // PfC for each proposal liveness window. The downside of not limiting this is that the config store owner\n        // can set it arbitrarily high and preclude a new funding rate from ever coming in. We suggest setting the\n        // proposal bond based on the configuration's funding rate range like in this discussion:\n        // https://github.com/UMAprotocol/protocol/issues/2039#issuecomment-719734383\n\n        // We also don't set a limit on the funding rate max/min because we might need to allow very high magnitude\n        // funding rates in extraordinarily volatile market situations. Note, that even though we do not bound\n        // the max/min, we still recommend that the deployer of this contract set the funding rate max/min values\n        // to bound the PfC of a dishonest proposer. A reasonable range might be the equivalent of [+200%/year, -200%/year].\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/perpetual-multiparty/PerpetualCreator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/interfaces/ExpandedIERC20.sol\";\nimport \"../../common/interfaces/IERC20Standard.sol\";\nimport \"../../oracle/implementation/ContractCreator.sol\";\nimport \"../../common/implementation/Testable.sol\";\nimport \"../../common/implementation/AddressWhitelist.sol\";\nimport \"../../common/implementation/Lockable.sol\";\nimport \"../common/TokenFactory.sol\";\nimport \"../common/SyntheticToken.sol\";\nimport \"./PerpetualLib.sol\";\nimport \"./ConfigStore.sol\";\n\n/**\n * @title Perpetual Contract creator.\n * @notice Factory contract to create and register new instances of perpetual contracts.\n * Responsible for constraining the parameters used to construct a new perpetual. This creator contains a number of constraints\n * that are applied to newly created contract. These constraints can evolve over time and are\n * initially constrained to conservative values in this first iteration. Technically there is nothing in the\n * Perpetual contract requiring these constraints. However, because `createPerpetual()` is intended\n * to be the only way to create valid financial contracts that are registered with the DVM (via _registerContract),\n  we can enforce deployment configurations here.\n */\ncontract PerpetualCreator is ContractCreator, Testable, Lockable {\n    using FixedPoint for FixedPoint.Unsigned;\n\n    /****************************************\n     *     PERP CREATOR DATA STRUCTURES      *\n     ****************************************/\n\n    // Immutable params for perpetual contract.\n    struct Params {\n        address collateralAddress;\n        bytes32 priceFeedIdentifier;\n        bytes32 fundingRateIdentifier;\n        string syntheticName;\n        string syntheticSymbol;\n        FixedPoint.Unsigned collateralRequirement;\n        FixedPoint.Unsigned disputeBondPercentage;\n        FixedPoint.Unsigned sponsorDisputeRewardPercentage;\n        FixedPoint.Unsigned disputerDisputeRewardPercentage;\n        FixedPoint.Unsigned minSponsorTokens;\n        FixedPoint.Unsigned tokenScaling;\n        uint256 withdrawalLiveness;\n        uint256 liquidationLiveness;\n    }\n    // Address of TokenFactory used to create a new synthetic token.\n    address public tokenFactoryAddress;\n\n    event CreatedPerpetual(address indexed perpetualAddress, address indexed deployerAddress);\n    event CreatedConfigStore(address indexed configStoreAddress, address indexed ownerAddress);\n\n    /**\n     * @notice Constructs the Perpetual contract.\n     * @param _finderAddress UMA protocol Finder used to discover other protocol contracts.\n     * @param _tokenFactoryAddress ERC20 token factory used to deploy synthetic token instances.\n     * @param _timerAddress Contract that stores the current time in a testing environment.\n     */\n    constructor(\n        address _finderAddress,\n        address _tokenFactoryAddress,\n        address _timerAddress\n    ) ContractCreator(_finderAddress) Testable(_timerAddress) nonReentrant() {\n        tokenFactoryAddress = _tokenFactoryAddress;\n    }\n\n    /**\n     * @notice Creates an instance of perpetual and registers it within the registry.\n     * @param params is a `ConstructorParams` object from Perpetual.\n     * @return address of the deployed contract.\n     */\n    function createPerpetual(Params memory params, ConfigStore.ConfigSettings memory configSettings)\n        public\n        nonReentrant()\n        returns (address)\n    {\n        require(bytes(params.syntheticName).length != 0, \"Missing synthetic name\");\n        require(bytes(params.syntheticSymbol).length != 0, \"Missing synthetic symbol\");\n\n        // Create new config settings store for this contract and reset ownership to the deployer.\n        ConfigStore configStore = new ConfigStore(configSettings, timerAddress);\n        configStore.transferOwnership(msg.sender);\n        emit CreatedConfigStore(address(configStore), configStore.owner());\n\n        // Create a new synthetic token using the params.\n        TokenFactory tf = TokenFactory(tokenFactoryAddress);\n\n        // If the collateral token does not have a `decimals()` method,\n        // then a default precision of 18 will be applied to the newly created synthetic token.\n        uint8 syntheticDecimals = _getSyntheticDecimals(params.collateralAddress);\n        ExpandedIERC20 tokenCurrency = tf.createToken(params.syntheticName, params.syntheticSymbol, syntheticDecimals);\n        address derivative = PerpetualLib.deploy(_convertParams(params, tokenCurrency, address(configStore)));\n\n        // Give permissions to new derivative contract and then hand over ownership.\n        tokenCurrency.addMinter(derivative);\n        tokenCurrency.addBurner(derivative);\n        tokenCurrency.resetOwner(derivative);\n\n        _registerContract(new address[](0), derivative);\n\n        emit CreatedPerpetual(derivative, msg.sender);\n\n        return derivative;\n    }\n\n    /****************************************\n     *          PRIVATE FUNCTIONS           *\n     ****************************************/\n\n    // Converts createPerpetual params to Perpetual constructor params.\n    function _convertParams(\n        Params memory params,\n        ExpandedIERC20 newTokenCurrency,\n        address configStore\n    ) private view returns (Perpetual.ConstructorParams memory constructorParams) {\n        // Known from creator deployment.\n        constructorParams.finderAddress = finderAddress;\n        constructorParams.timerAddress = timerAddress;\n\n        // Enforce configuration constraints.\n        require(params.withdrawalLiveness != 0, \"Withdrawal liveness cannot be 0\");\n        require(params.liquidationLiveness != 0, \"Liquidation liveness cannot be 0\");\n        _requireWhitelistedCollateral(params.collateralAddress);\n\n        // We don't want perpetual deployers to be able to intentionally or unintentionally set\n        // liveness periods that could induce arithmetic overflow, but we also don't want\n        // to be opinionated about what livenesses are \"correct\", so we will somewhat\n        // arbitrarily set the liveness upper bound to 100 years (5200 weeks). In practice, liveness\n        // periods even greater than a few days would make the perpetual unusable for most users.\n        require(params.withdrawalLiveness < 5200 weeks, \"Withdrawal liveness too large\");\n        require(params.liquidationLiveness < 5200 weeks, \"Liquidation liveness too large\");\n\n        // To avoid precision loss or overflows, prevent the token scaling from being too large or too small.\n        FixedPoint.Unsigned memory minScaling = FixedPoint.Unsigned(1e8); // 1e-10\n        FixedPoint.Unsigned memory maxScaling = FixedPoint.Unsigned(1e28); // 1e10\n        require(\n            params.tokenScaling.isGreaterThan(minScaling) && params.tokenScaling.isLessThan(maxScaling),\n            \"Invalid tokenScaling\"\n        );\n\n        // Input from function call.\n        constructorParams.configStoreAddress = configStore;\n        constructorParams.tokenAddress = address(newTokenCurrency);\n        constructorParams.collateralAddress = params.collateralAddress;\n        constructorParams.priceFeedIdentifier = params.priceFeedIdentifier;\n        constructorParams.fundingRateIdentifier = params.fundingRateIdentifier;\n        constructorParams.collateralRequirement = params.collateralRequirement;\n        constructorParams.disputeBondPercentage = params.disputeBondPercentage;\n        constructorParams.sponsorDisputeRewardPercentage = params.sponsorDisputeRewardPercentage;\n        constructorParams.disputerDisputeRewardPercentage = params.disputerDisputeRewardPercentage;\n        constructorParams.minSponsorTokens = params.minSponsorTokens;\n        constructorParams.withdrawalLiveness = params.withdrawalLiveness;\n        constructorParams.liquidationLiveness = params.liquidationLiveness;\n        constructorParams.tokenScaling = params.tokenScaling;\n    }\n\n    // IERC20Standard.decimals() will revert if the collateral contract has not implemented the decimals() method,\n    // which is possible since the method is only an OPTIONAL method in the ERC20 standard:\n    // https://eips.ethereum.org/EIPS/eip-20#methods.\n    function _getSyntheticDecimals(address _collateralAddress) public view returns (uint8 decimals) {\n        try IERC20Standard(_collateralAddress).decimals() returns (uint8 _decimals) {\n            return _decimals;\n        } catch {\n            return 18;\n        }\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/ContractCreator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interfaces/FinderInterface.sol\";\nimport \"../../common/implementation/AddressWhitelist.sol\";\nimport \"./Registry.sol\";\nimport \"./Constants.sol\";\n\n/**\n * @title Base contract for all financial contract creators\n */\nabstract contract ContractCreator {\n    address internal finderAddress;\n\n    constructor(address _finderAddress) {\n        finderAddress = _finderAddress;\n    }\n\n    function _requireWhitelistedCollateral(address collateralAddress) internal view {\n        FinderInterface finder = FinderInterface(finderAddress);\n        AddressWhitelist collateralWhitelist =\n            AddressWhitelist(finder.getImplementationAddress(OracleInterfaces.CollateralWhitelist));\n        require(collateralWhitelist.isOnWhitelist(collateralAddress), \"Collateral not whitelisted\");\n    }\n\n    function _registerContract(address[] memory parties, address contractToRegister) internal {\n        FinderInterface finder = FinderInterface(finderAddress);\n        Registry registry = Registry(finder.getImplementationAddress(OracleInterfaces.Registry));\n        registry.registerContract(parties, contractToRegister);\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/common/TokenFactory.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./SyntheticToken.sol\";\nimport \"../../common/interfaces/ExpandedIERC20.sol\";\nimport \"../../common/implementation/Lockable.sol\";\n\n/**\n * @title Factory for creating new mintable and burnable tokens.\n */\n\ncontract TokenFactory is Lockable {\n    /**\n     * @notice Create a new token and return it to the caller.\n     * @dev The caller will become the only minter and burner and the new owner capable of assigning the roles.\n     * @param tokenName used to describe the new token.\n     * @param tokenSymbol short ticker abbreviation of the name. Ideally < 5 chars.\n     * @param tokenDecimals used to define the precision used in the token's numerical representation.\n     * @return newToken an instance of the newly created token interface.\n     */\n    function createToken(\n        string calldata tokenName,\n        string calldata tokenSymbol,\n        uint8 tokenDecimals\n    ) external nonReentrant() returns (ExpandedIERC20 newToken) {\n        SyntheticToken mintableToken = new SyntheticToken(tokenName, tokenSymbol, tokenDecimals);\n        mintableToken.resetOwner(msg.sender);\n        newToken = ExpandedIERC20(address(mintableToken));\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/common/SyntheticToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\nimport \"../../common/implementation/ExpandedERC20.sol\";\nimport \"../../common/implementation/Lockable.sol\";\n\n/**\n * @title Burnable and mintable ERC20.\n * @dev The contract deployer will initially be the only minter, burner and owner capable of adding new roles.\n */\n\ncontract SyntheticToken is ExpandedERC20, Lockable {\n    /**\n     * @notice Constructs the SyntheticToken.\n     * @param tokenName The name which describes the new token.\n     * @param tokenSymbol The ticker abbreviation of the name. Ideally < 5 chars.\n     * @param tokenDecimals The number of decimals to define token precision.\n     */\n    constructor(\n        string memory tokenName,\n        string memory tokenSymbol,\n        uint8 tokenDecimals\n    ) ExpandedERC20(tokenName, tokenSymbol, tokenDecimals) nonReentrant() {}\n\n    /**\n     * @notice Add Minter role to account.\n     * @dev The caller must have the Owner role.\n     * @param account The address to which the Minter role is added.\n     */\n    function addMinter(address account) external override nonReentrant() {\n        addMember(uint256(Roles.Minter), account);\n    }\n\n    /**\n     * @notice Remove Minter role from account.\n     * @dev The caller must have the Owner role.\n     * @param account The address from which the Minter role is removed.\n     */\n    function removeMinter(address account) external nonReentrant() {\n        removeMember(uint256(Roles.Minter), account);\n    }\n\n    /**\n     * @notice Add Burner role to account.\n     * @dev The caller must have the Owner role.\n     * @param account The address to which the Burner role is added.\n     */\n    function addBurner(address account) external override nonReentrant() {\n        addMember(uint256(Roles.Burner), account);\n    }\n\n    /**\n     * @notice Removes Burner role from account.\n     * @dev The caller must have the Owner role.\n     * @param account The address from which the Burner role is removed.\n     */\n    function removeBurner(address account) external nonReentrant() {\n        removeMember(uint256(Roles.Burner), account);\n    }\n\n    /**\n     * @notice Reset Owner role to account.\n     * @dev The caller must have the Owner role.\n     * @param account The new holder of the Owner role.\n     */\n    function resetOwner(address account) external override nonReentrant() {\n        resetMember(uint256(Roles.Owner), account);\n    }\n\n    /**\n     * @notice Checks if a given account holds the Minter role.\n     * @param account The address which is checked for the Minter role.\n     * @return bool True if the provided account is a Minter.\n     */\n    function isMinter(address account) public view nonReentrantView() returns (bool) {\n        return holdsRole(uint256(Roles.Minter), account);\n    }\n\n    /**\n     * @notice Checks if a given account holds the Burner role.\n     * @param account The address which is checked for the Burner role.\n     * @return bool True if the provided account is a Burner.\n     */\n    function isBurner(address account) public view nonReentrantView() returns (bool) {\n        return holdsRole(uint256(Roles.Burner), account);\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/perpetual-multiparty/PerpetualLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./Perpetual.sol\";\n\n/**\n * @title Provides convenient Perpetual Multi Party contract utilities.\n * @dev Using this library to deploy Perpetuals allows calling contracts to avoid importing the full bytecode.\n */\nlibrary PerpetualLib {\n    /**\n     * @notice Returns address of new Perpetual deployed with given `params` configuration.\n     * @dev Caller will need to register new Perpetual with the Registry to begin requesting prices. Caller is also\n     * responsible for enforcing constraints on `params`.\n     * @param params is a `ConstructorParams` object from Perpetual.\n     * @return address of the deployed Perpetual contract\n     */\n    function deploy(Perpetual.ConstructorParams memory params) public returns (address) {\n        Perpetual derivative = new Perpetual(params);\n        return address(derivative);\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/perpetual-multiparty/Perpetual.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./PerpetualLiquidatable.sol\";\n\n/**\n * @title Perpetual Multiparty Contract.\n * @notice Convenient wrapper for Liquidatable.\n */\ncontract Perpetual is PerpetualLiquidatable {\n    /**\n     * @notice Constructs the Perpetual contract.\n     * @param params struct to define input parameters for construction of Liquidatable. Some params\n     * are fed directly into the PositionManager's constructor within the inheritance tree.\n     */\n    constructor(ConstructorParams memory params)\n        PerpetualLiquidatable(params)\n    // Note: since there is no logic here, there is no need to add a re-entrancy guard.\n    {\n\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./PerpetualPositionManager.sol\";\n\nimport \"../../common/implementation/FixedPoint.sol\";\n\n/**\n * @title PerpetualLiquidatable\n * @notice Adds logic to a position-managing contract that enables callers to liquidate an undercollateralized position.\n * @dev The liquidation has a liveness period before expiring successfully, during which someone can \"dispute\" the\n * liquidation, which sends a price request to the relevant Oracle to settle the final collateralization ratio based on\n * a DVM price. The contract enforces dispute rewards in order to incentivize disputers to correctly dispute false\n * liquidations and compensate position sponsors who had their position incorrectly liquidated. Importantly, a\n * prospective disputer must deposit a dispute bond that they can lose in the case of an unsuccessful dispute.\n * NOTE: this contract does _not_ work with ERC777 collateral currencies or any others that call into the receiver on\n * transfer(). Using an ERC777 token would allow a user to maliciously grief other participants (while also losing\n * money themselves).\n */\ncontract PerpetualLiquidatable is PerpetualPositionManager {\n    using FixedPoint for FixedPoint.Unsigned;\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using SafeERC20 for ExpandedIERC20;\n\n    /****************************************\n     *     LIQUIDATION DATA STRUCTURES      *\n     ****************************************/\n\n    // Because of the check in withdrawable(), the order of these enum values should not change.\n    enum Status { Uninitialized, NotDisputed, Disputed, DisputeSucceeded, DisputeFailed }\n\n    struct LiquidationData {\n        // Following variables set upon creation of liquidation:\n        address sponsor; // Address of the liquidated position's sponsor\n        address liquidator; // Address who created this liquidation\n        Status state; // Liquidated (and expired or not), Pending a Dispute, or Dispute has resolved\n        uint256 liquidationTime; // Time when liquidation is initiated, needed to get price from Oracle\n        // Following variables determined by the position that is being liquidated:\n        FixedPoint.Unsigned tokensOutstanding; // Synthetic tokens required to be burned by liquidator to initiate dispute\n        FixedPoint.Unsigned lockedCollateral; // Collateral locked by contract and released upon expiry or post-dispute\n        // Amount of collateral being liquidated, which could be different from\n        // lockedCollateral if there were pending withdrawals at the time of liquidation\n        FixedPoint.Unsigned liquidatedCollateral;\n        // Unit value (starts at 1) that is used to track the fees per unit of collateral over the course of the liquidation.\n        FixedPoint.Unsigned rawUnitCollateral;\n        // Following variable set upon initiation of a dispute:\n        address disputer; // Person who is disputing a liquidation\n        // Following variable set upon a resolution of a dispute:\n        FixedPoint.Unsigned settlementPrice; // Final price as determined by an Oracle following a dispute\n        FixedPoint.Unsigned finalFee;\n    }\n\n    // Define the contract's constructor parameters as a struct to enable more variables to be specified.\n    // This is required to enable more params, over and above Solidity's limits.\n    struct ConstructorParams {\n        // Params for PerpetualPositionManager only.\n        uint256 withdrawalLiveness;\n        address configStoreAddress;\n        address collateralAddress;\n        address tokenAddress;\n        address finderAddress;\n        address timerAddress;\n        bytes32 priceFeedIdentifier;\n        bytes32 fundingRateIdentifier;\n        FixedPoint.Unsigned minSponsorTokens;\n        FixedPoint.Unsigned tokenScaling;\n        // Params specifically for PerpetualLiquidatable.\n        uint256 liquidationLiveness;\n        FixedPoint.Unsigned collateralRequirement;\n        FixedPoint.Unsigned disputeBondPercentage;\n        FixedPoint.Unsigned sponsorDisputeRewardPercentage;\n        FixedPoint.Unsigned disputerDisputeRewardPercentage;\n    }\n\n    // This struct is used in the `withdrawLiquidation` method that disperses liquidation and dispute rewards.\n    // `payToX` stores the total collateral to withdraw from the contract to pay X. This value might differ\n    // from `paidToX` due to precision loss between accounting for the `rawCollateral` versus the\n    // fee-adjusted collateral. These variables are stored within a struct to avoid the stack too deep error.\n    struct RewardsData {\n        FixedPoint.Unsigned payToSponsor;\n        FixedPoint.Unsigned payToLiquidator;\n        FixedPoint.Unsigned payToDisputer;\n        FixedPoint.Unsigned paidToSponsor;\n        FixedPoint.Unsigned paidToLiquidator;\n        FixedPoint.Unsigned paidToDisputer;\n    }\n\n    // Liquidations are unique by ID per sponsor\n    mapping(address => LiquidationData[]) public liquidations;\n\n    // Total collateral in liquidation.\n    FixedPoint.Unsigned public rawLiquidationCollateral;\n\n    // Immutable contract parameters:\n    // Amount of time for pending liquidation before expiry.\n    // !!Note: The lower the liquidation liveness value, the more risk incurred by sponsors.\n    //       Extremely low liveness values increase the chance that opportunistic invalid liquidations\n    //       expire without dispute, thereby decreasing the usability for sponsors and increasing the risk\n    //       for the contract as a whole. An insolvent contract is extremely risky for any sponsor or synthetic\n    //       token holder for the contract.\n    uint256 public liquidationLiveness;\n    // Required collateral:TRV ratio for a position to be considered sufficiently collateralized.\n    FixedPoint.Unsigned public collateralRequirement;\n    // Percent of a Liquidation/Position's lockedCollateral to be deposited by a potential disputer\n    // Represented as a multiplier, for example 1.5e18 = \"150%\" and 0.05e18 = \"5%\"\n    FixedPoint.Unsigned public disputeBondPercentage;\n    // Percent of oraclePrice paid to sponsor in the Disputed state (i.e. following a successful dispute)\n    // Represented as a multiplier, see above.\n    FixedPoint.Unsigned public sponsorDisputeRewardPercentage;\n    // Percent of oraclePrice paid to disputer in the Disputed state (i.e. following a successful dispute)\n    // Represented as a multiplier, see above.\n    FixedPoint.Unsigned public disputerDisputeRewardPercentage;\n\n    /****************************************\n     *                EVENTS                *\n     ****************************************/\n\n    event LiquidationCreated(\n        address indexed sponsor,\n        address indexed liquidator,\n        uint256 indexed liquidationId,\n        uint256 tokensOutstanding,\n        uint256 lockedCollateral,\n        uint256 liquidatedCollateral,\n        uint256 liquidationTime\n    );\n    event LiquidationDisputed(\n        address indexed sponsor,\n        address indexed liquidator,\n        address indexed disputer,\n        uint256 liquidationId,\n        uint256 disputeBondAmount\n    );\n    event DisputeSettled(\n        address indexed caller,\n        address indexed sponsor,\n        address indexed liquidator,\n        address disputer,\n        uint256 liquidationId,\n        bool disputeSucceeded\n    );\n    event LiquidationWithdrawn(\n        address indexed caller,\n        uint256 paidToLiquidator,\n        uint256 paidToDisputer,\n        uint256 paidToSponsor,\n        Status indexed liquidationStatus,\n        uint256 settlementPrice\n    );\n\n    /****************************************\n     *              MODIFIERS               *\n     ****************************************/\n\n    modifier disputable(uint256 liquidationId, address sponsor) {\n        _disputable(liquidationId, sponsor);\n        _;\n    }\n\n    modifier withdrawable(uint256 liquidationId, address sponsor) {\n        _withdrawable(liquidationId, sponsor);\n        _;\n    }\n\n    /**\n     * @notice Constructs the liquidatable contract.\n     * @param params struct to define input parameters for construction of Liquidatable. Some params\n     * are fed directly into the PositionManager's constructor within the inheritance tree.\n     */\n    constructor(ConstructorParams memory params)\n        PerpetualPositionManager(\n            params.withdrawalLiveness,\n            params.collateralAddress,\n            params.tokenAddress,\n            params.finderAddress,\n            params.priceFeedIdentifier,\n            params.fundingRateIdentifier,\n            params.minSponsorTokens,\n            params.configStoreAddress,\n            params.tokenScaling,\n            params.timerAddress\n        )\n    {\n        require(params.collateralRequirement.isGreaterThan(1));\n        require(params.sponsorDisputeRewardPercentage.add(params.disputerDisputeRewardPercentage).isLessThan(1));\n\n        // Set liquidatable specific variables.\n        liquidationLiveness = params.liquidationLiveness;\n        collateralRequirement = params.collateralRequirement;\n        disputeBondPercentage = params.disputeBondPercentage;\n        sponsorDisputeRewardPercentage = params.sponsorDisputeRewardPercentage;\n        disputerDisputeRewardPercentage = params.disputerDisputeRewardPercentage;\n    }\n\n    /****************************************\n     *        LIQUIDATION FUNCTIONS         *\n     ****************************************/\n\n    /**\n     * @notice Liquidates the sponsor's position if the caller has enough\n     * synthetic tokens to retire the position's outstanding tokens. Liquidations above\n     * a minimum size also reset an ongoing \"slow withdrawal\"'s liveness.\n     * @dev This method generates an ID that will uniquely identify liquidation for the sponsor. This contract must be\n     * approved to spend at least `tokensLiquidated` of `tokenCurrency` and at least `finalFeeBond` of `collateralCurrency`.\n     * @dev This contract must have the Burner role for the `tokenCurrency`.\n     * @param sponsor address of the sponsor to liquidate.\n     * @param minCollateralPerToken abort the liquidation if the position's collateral per token is below this value.\n     * @param maxCollateralPerToken abort the liquidation if the position's collateral per token exceeds this value.\n     * @param maxTokensToLiquidate max number of tokens to liquidate.\n     * @param deadline abort the liquidation if the transaction is mined after this timestamp.\n     * @return liquidationId ID of the newly created liquidation.\n     * @return tokensLiquidated amount of synthetic tokens removed and liquidated from the `sponsor`'s position.\n     * @return finalFeeBond amount of collateral to be posted by liquidator and returned if not disputed successfully.\n     */\n    function createLiquidation(\n        address sponsor,\n        FixedPoint.Unsigned calldata minCollateralPerToken,\n        FixedPoint.Unsigned calldata maxCollateralPerToken,\n        FixedPoint.Unsigned calldata maxTokensToLiquidate,\n        uint256 deadline\n    )\n        external\n        notEmergencyShutdown()\n        fees()\n        nonReentrant()\n        returns (\n            uint256 liquidationId,\n            FixedPoint.Unsigned memory tokensLiquidated,\n            FixedPoint.Unsigned memory finalFeeBond\n        )\n    {\n        // Check that this transaction was mined pre-deadline.\n        require(getCurrentTime() <= deadline);\n\n        // Retrieve Position data for sponsor\n        PositionData storage positionToLiquidate = _getPositionData(sponsor);\n\n        tokensLiquidated = FixedPoint.min(maxTokensToLiquidate, positionToLiquidate.tokensOutstanding);\n        require(tokensLiquidated.isGreaterThan(0));\n\n        // Starting values for the Position being liquidated. If withdrawal request amount is > position's collateral,\n        // then set this to 0, otherwise set it to (startCollateral - withdrawal request amount).\n        FixedPoint.Unsigned memory startCollateral = _getFeeAdjustedCollateral(positionToLiquidate.rawCollateral);\n        FixedPoint.Unsigned memory startCollateralNetOfWithdrawal = FixedPoint.fromUnscaledUint(0);\n        if (positionToLiquidate.withdrawalRequestAmount.isLessThanOrEqual(startCollateral)) {\n            startCollateralNetOfWithdrawal = startCollateral.sub(positionToLiquidate.withdrawalRequestAmount);\n        }\n\n        // Scoping to get rid of a stack too deep error.\n        {\n            FixedPoint.Unsigned memory startTokens = positionToLiquidate.tokensOutstanding;\n\n            // The Position's collateralization ratio must be between [minCollateralPerToken, maxCollateralPerToken].\n            require(maxCollateralPerToken.mul(startTokens).isGreaterThanOrEqual(startCollateralNetOfWithdrawal));\n            // minCollateralPerToken >= startCollateralNetOfWithdrawal / startTokens.\n            require(minCollateralPerToken.mul(startTokens).isLessThanOrEqual(startCollateralNetOfWithdrawal));\n        }\n\n        // Compute final fee at time of liquidation.\n        finalFeeBond = _computeFinalFees();\n\n        // These will be populated within the scope below.\n        FixedPoint.Unsigned memory lockedCollateral;\n        FixedPoint.Unsigned memory liquidatedCollateral;\n\n        // Scoping to get rid of a stack too deep error. The amount of tokens to remove from the position\n        // are not funding-rate adjusted because the multiplier only affects their redemption value, not their\n        // notional.\n        {\n            FixedPoint.Unsigned memory ratio = tokensLiquidated.div(positionToLiquidate.tokensOutstanding);\n\n            // The actual amount of collateral that gets moved to the liquidation.\n            lockedCollateral = startCollateral.mul(ratio);\n\n            // For purposes of disputes, it's actually this liquidatedCollateral value that's used. This value is net of\n            // withdrawal requests.\n            liquidatedCollateral = startCollateralNetOfWithdrawal.mul(ratio);\n\n            // Part of the withdrawal request is also removed. Ideally:\n            // liquidatedCollateral + withdrawalAmountToRemove = lockedCollateral.\n            FixedPoint.Unsigned memory withdrawalAmountToRemove =\n                positionToLiquidate.withdrawalRequestAmount.mul(ratio);\n            _reduceSponsorPosition(sponsor, tokensLiquidated, lockedCollateral, withdrawalAmountToRemove);\n        }\n\n        // Add to the global liquidation collateral count.\n        _addCollateral(rawLiquidationCollateral, lockedCollateral.add(finalFeeBond));\n\n        // Construct liquidation object.\n        // Note: All dispute-related values are zeroed out until a dispute occurs. liquidationId is the index of the new\n        // LiquidationData that is pushed into the array, which is equal to the current length of the array pre-push.\n        liquidationId = liquidations[sponsor].length;\n        liquidations[sponsor].push(\n            LiquidationData({\n                sponsor: sponsor,\n                liquidator: msg.sender,\n                state: Status.NotDisputed,\n                liquidationTime: getCurrentTime(),\n                tokensOutstanding: _getFundingRateAppliedTokenDebt(tokensLiquidated),\n                lockedCollateral: lockedCollateral,\n                liquidatedCollateral: liquidatedCollateral,\n                rawUnitCollateral: _convertToRawCollateral(FixedPoint.fromUnscaledUint(1)),\n                disputer: address(0),\n                settlementPrice: FixedPoint.fromUnscaledUint(0),\n                finalFee: finalFeeBond\n            })\n        );\n\n        // If this liquidation is a subsequent liquidation on the position, and the liquidation size is larger than\n        // some \"griefing threshold\", then re-set the liveness. This enables a liquidation against a withdraw request to be\n        // \"dragged out\" if the position is very large and liquidators need time to gather funds. The griefing threshold\n        // is enforced so that liquidations for trivially small # of tokens cannot drag out an honest sponsor's slow withdrawal.\n\n        // We arbitrarily set the \"griefing threshold\" to `minSponsorTokens` because it is the only parameter\n        // denominated in token currency units and we can avoid adding another parameter.\n        FixedPoint.Unsigned memory griefingThreshold = minSponsorTokens;\n        if (\n            positionToLiquidate.withdrawalRequestPassTimestamp > 0 && // The position is undergoing a slow withdrawal.\n            positionToLiquidate.withdrawalRequestPassTimestamp > getCurrentTime() && // The slow withdrawal has not yet expired.\n            tokensLiquidated.isGreaterThanOrEqual(griefingThreshold) // The liquidated token count is above a \"griefing threshold\".\n        ) {\n            positionToLiquidate.withdrawalRequestPassTimestamp = getCurrentTime().add(withdrawalLiveness);\n        }\n\n        emit LiquidationCreated(\n            sponsor,\n            msg.sender,\n            liquidationId,\n            _getFundingRateAppliedTokenDebt(tokensLiquidated).rawValue,\n            lockedCollateral.rawValue,\n            liquidatedCollateral.rawValue,\n            getCurrentTime()\n        );\n\n        // Destroy tokens\n        tokenCurrency.safeTransferFrom(msg.sender, address(this), tokensLiquidated.rawValue);\n        tokenCurrency.burn(tokensLiquidated.rawValue);\n\n        // Pull final fee from liquidator.\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), finalFeeBond.rawValue);\n    }\n\n    /**\n     * @notice Disputes a liquidation, if the caller has enough collateral to post a dispute bond and pay a fixed final\n     * fee charged on each price request.\n     * @dev Can only dispute a liquidation before the liquidation expires and if there are no other pending disputes.\n     * This contract must be approved to spend at least the dispute bond amount of `collateralCurrency`. This dispute\n     * bond amount is calculated from `disputeBondPercentage` times the collateral in the liquidation.\n     * @param liquidationId of the disputed liquidation.\n     * @param sponsor the address of the sponsor whose liquidation is being disputed.\n     * @return totalPaid amount of collateral charged to disputer (i.e. final fee bond + dispute bond).\n     */\n    function dispute(uint256 liquidationId, address sponsor)\n        external\n        disputable(liquidationId, sponsor)\n        fees()\n        nonReentrant()\n        returns (FixedPoint.Unsigned memory totalPaid)\n    {\n        LiquidationData storage disputedLiquidation = _getLiquidationData(sponsor, liquidationId);\n\n        // Multiply by the unit collateral so the dispute bond is a percentage of the locked collateral after fees.\n        FixedPoint.Unsigned memory disputeBondAmount =\n            disputedLiquidation.lockedCollateral.mul(disputeBondPercentage).mul(\n                _getFeeAdjustedCollateral(disputedLiquidation.rawUnitCollateral)\n            );\n        _addCollateral(rawLiquidationCollateral, disputeBondAmount);\n\n        // Request a price from DVM. Liquidation is pending dispute until DVM returns a price.\n        disputedLiquidation.state = Status.Disputed;\n        disputedLiquidation.disputer = msg.sender;\n\n        // Enqueue a request with the DVM.\n        _requestOraclePrice(disputedLiquidation.liquidationTime);\n\n        emit LiquidationDisputed(\n            sponsor,\n            disputedLiquidation.liquidator,\n            msg.sender,\n            liquidationId,\n            disputeBondAmount.rawValue\n        );\n        totalPaid = disputeBondAmount.add(disputedLiquidation.finalFee);\n\n        // Pay the final fee for requesting price from the DVM.\n        _payFinalFees(msg.sender, disputedLiquidation.finalFee);\n\n        // Transfer the dispute bond amount from the caller to this contract.\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), disputeBondAmount.rawValue);\n    }\n\n    /**\n     * @notice After a dispute has settled or after a non-disputed liquidation has expired,\n     * anyone can call this method to disperse payments to the sponsor, liquidator, and disputer.\n     * @dev If the dispute SUCCEEDED: the sponsor, liquidator, and disputer are eligible for payment.\n     * If the dispute FAILED: only the liquidator receives payment. This method deletes the liquidation data.\n     * This method will revert if rewards have already been dispersed.\n     * @param liquidationId uniquely identifies the sponsor's liquidation.\n     * @param sponsor address of the sponsor associated with the liquidation.\n     * @return data about rewards paid out.\n     */\n    function withdrawLiquidation(uint256 liquidationId, address sponsor)\n        public\n        withdrawable(liquidationId, sponsor)\n        fees()\n        nonReentrant()\n        returns (RewardsData memory)\n    {\n        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);\n\n        // Settles the liquidation if necessary. This call will revert if the price has not resolved yet.\n        _settle(liquidationId, sponsor);\n\n        // Calculate rewards as a function of the TRV.\n        // Note1: all payouts are scaled by the unit collateral value so all payouts are charged the fees pro rata.\n        // Note2: the tokenRedemptionValue uses the tokensOutstanding which was calculated using the funding rate at\n        // liquidation time from _getFundingRateAppliedTokenDebt. Therefore the TRV considers the full debt value at that time.\n        FixedPoint.Unsigned memory feeAttenuation = _getFeeAdjustedCollateral(liquidation.rawUnitCollateral);\n        FixedPoint.Unsigned memory settlementPrice = liquidation.settlementPrice;\n        FixedPoint.Unsigned memory tokenRedemptionValue =\n            liquidation.tokensOutstanding.mul(settlementPrice).mul(feeAttenuation);\n        FixedPoint.Unsigned memory collateral = liquidation.lockedCollateral.mul(feeAttenuation);\n        FixedPoint.Unsigned memory disputerDisputeReward = disputerDisputeRewardPercentage.mul(tokenRedemptionValue);\n        FixedPoint.Unsigned memory sponsorDisputeReward = sponsorDisputeRewardPercentage.mul(tokenRedemptionValue);\n        FixedPoint.Unsigned memory disputeBondAmount = collateral.mul(disputeBondPercentage);\n        FixedPoint.Unsigned memory finalFee = liquidation.finalFee.mul(feeAttenuation);\n\n        // There are three main outcome states: either the dispute succeeded, failed or was not updated.\n        // Based on the state, different parties of a liquidation receive different amounts.\n        // After assigning rewards based on the liquidation status, decrease the total collateral held in this contract\n        // by the amount to pay each party. The actual amounts withdrawn might differ if _removeCollateral causes\n        // precision loss.\n        RewardsData memory rewards;\n        if (liquidation.state == Status.DisputeSucceeded) {\n            // If the dispute is successful then all three users should receive rewards:\n\n            // Pay DISPUTER: disputer reward + dispute bond + returned final fee\n            rewards.payToDisputer = disputerDisputeReward.add(disputeBondAmount).add(finalFee);\n\n            // Pay SPONSOR: remaining collateral (collateral - TRV) + sponsor reward\n            rewards.payToSponsor = sponsorDisputeReward.add(collateral.sub(tokenRedemptionValue));\n\n            // Pay LIQUIDATOR: TRV - dispute reward - sponsor reward\n            // If TRV > Collateral, then subtract rewards from collateral\n            // NOTE: This should never be below zero since we prevent (sponsorDisputePercentage+disputerDisputePercentage) >= 0 in\n            // the constructor when these params are set.\n            rewards.payToLiquidator = tokenRedemptionValue.sub(sponsorDisputeReward).sub(disputerDisputeReward);\n\n            // Transfer rewards and debit collateral\n            rewards.paidToLiquidator = _removeCollateral(rawLiquidationCollateral, rewards.payToLiquidator);\n            rewards.paidToSponsor = _removeCollateral(rawLiquidationCollateral, rewards.payToSponsor);\n            rewards.paidToDisputer = _removeCollateral(rawLiquidationCollateral, rewards.payToDisputer);\n\n            collateralCurrency.safeTransfer(liquidation.disputer, rewards.paidToDisputer.rawValue);\n            collateralCurrency.safeTransfer(liquidation.liquidator, rewards.paidToLiquidator.rawValue);\n            collateralCurrency.safeTransfer(liquidation.sponsor, rewards.paidToSponsor.rawValue);\n\n            // In the case of a failed dispute only the liquidator can withdraw.\n        } else if (liquidation.state == Status.DisputeFailed) {\n            // Pay LIQUIDATOR: collateral + dispute bond + returned final fee\n            rewards.payToLiquidator = collateral.add(disputeBondAmount).add(finalFee);\n\n            // Transfer rewards and debit collateral\n            rewards.paidToLiquidator = _removeCollateral(rawLiquidationCollateral, rewards.payToLiquidator);\n\n            collateralCurrency.safeTransfer(liquidation.liquidator, rewards.paidToLiquidator.rawValue);\n\n            // If the state is pre-dispute but time has passed liveness then there was no dispute. We represent this\n            // state as a dispute failed and the liquidator can withdraw.\n        } else if (liquidation.state == Status.NotDisputed) {\n            // Pay LIQUIDATOR: collateral + returned final fee\n            rewards.payToLiquidator = collateral.add(finalFee);\n\n            // Transfer rewards and debit collateral\n            rewards.paidToLiquidator = _removeCollateral(rawLiquidationCollateral, rewards.payToLiquidator);\n\n            collateralCurrency.safeTransfer(liquidation.liquidator, rewards.paidToLiquidator.rawValue);\n        }\n\n        emit LiquidationWithdrawn(\n            msg.sender,\n            rewards.paidToLiquidator.rawValue,\n            rewards.paidToDisputer.rawValue,\n            rewards.paidToSponsor.rawValue,\n            liquidation.state,\n            settlementPrice.rawValue\n        );\n\n        // Free up space after collateral is withdrawn by removing the liquidation object from the array.\n        delete liquidations[sponsor][liquidationId];\n\n        return rewards;\n    }\n\n    /**\n     * @notice Gets all liquidation information for a given sponsor address.\n     * @param sponsor address of the position sponsor.\n     * @return liquidationData array of all liquidation information for the given sponsor address.\n     */\n    function getLiquidations(address sponsor)\n        external\n        view\n        nonReentrantView()\n        returns (LiquidationData[] memory liquidationData)\n    {\n        return liquidations[sponsor];\n    }\n\n    /****************************************\n     *          INTERNAL FUNCTIONS          *\n     ****************************************/\n\n    // This settles a liquidation if it is in the Disputed state. If not, it will immediately return.\n    // If the liquidation is in the Disputed state, but a price is not available, this will revert.\n    function _settle(uint256 liquidationId, address sponsor) internal {\n        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);\n\n        // Settlement only happens when state == Disputed and will only happen once per liquidation.\n        // If this liquidation is not ready to be settled, this method should return immediately.\n        if (liquidation.state != Status.Disputed) {\n            return;\n        }\n\n        // Get the returned price from the oracle. If this has not yet resolved will revert.\n        liquidation.settlementPrice = _getOraclePrice(liquidation.liquidationTime);\n\n        // Find the value of the tokens in the underlying collateral.\n        FixedPoint.Unsigned memory tokenRedemptionValue =\n            liquidation.tokensOutstanding.mul(liquidation.settlementPrice);\n\n        // The required collateral is the value of the tokens in underlying * required collateral ratio.\n        FixedPoint.Unsigned memory requiredCollateral = tokenRedemptionValue.mul(collateralRequirement);\n\n        // If the position has more than the required collateral it is solvent and the dispute is valid (liquidation is invalid)\n        // Note that this check uses the liquidatedCollateral not the lockedCollateral as this considers withdrawals.\n        bool disputeSucceeded = liquidation.liquidatedCollateral.isGreaterThanOrEqual(requiredCollateral);\n        liquidation.state = disputeSucceeded ? Status.DisputeSucceeded : Status.DisputeFailed;\n\n        emit DisputeSettled(\n            msg.sender,\n            sponsor,\n            liquidation.liquidator,\n            liquidation.disputer,\n            liquidationId,\n            disputeSucceeded\n        );\n    }\n\n    function _pfc() internal view override returns (FixedPoint.Unsigned memory) {\n        return super._pfc().add(_getFeeAdjustedCollateral(rawLiquidationCollateral));\n    }\n\n    function _getLiquidationData(address sponsor, uint256 liquidationId)\n        internal\n        view\n        returns (LiquidationData storage liquidation)\n    {\n        LiquidationData[] storage liquidationArray = liquidations[sponsor];\n\n        // Revert if the caller is attempting to access an invalid liquidation\n        // (one that has never been created or one has never been initialized).\n        require(\n            liquidationId < liquidationArray.length && liquidationArray[liquidationId].state != Status.Uninitialized\n        );\n        return liquidationArray[liquidationId];\n    }\n\n    function _getLiquidationExpiry(LiquidationData storage liquidation) internal view returns (uint256) {\n        return liquidation.liquidationTime.add(liquidationLiveness);\n    }\n\n    // These internal functions are supposed to act identically to modifiers, but re-used modifiers\n    // unnecessarily increase contract bytecode size.\n    // source: https://blog.polymath.network/solidity-tips-and-tricks-to-save-gas-and-reduce-bytecode-size-c44580b218e6\n    function _disputable(uint256 liquidationId, address sponsor) internal view {\n        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);\n        require((getCurrentTime() < _getLiquidationExpiry(liquidation)) && (liquidation.state == Status.NotDisputed));\n    }\n\n    function _withdrawable(uint256 liquidationId, address sponsor) internal view {\n        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);\n        Status state = liquidation.state;\n\n        // Must be disputed or the liquidation has passed expiry.\n        require(\n            (state > Status.NotDisputed) ||\n                ((_getLiquidationExpiry(liquidation) <= getCurrentTime()) && (state == Status.NotDisputed))\n        );\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/expiring-multiparty/ExpiringMultiPartyCreator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/interfaces/ExpandedIERC20.sol\";\nimport \"../../common/interfaces/IERC20Standard.sol\";\nimport \"../../oracle/implementation/ContractCreator.sol\";\nimport \"../../common/implementation/Testable.sol\";\nimport \"../../common/implementation/AddressWhitelist.sol\";\nimport \"../../common/implementation/Lockable.sol\";\nimport \"../common/TokenFactory.sol\";\nimport \"../common/SyntheticToken.sol\";\nimport \"./ExpiringMultiPartyLib.sol\";\n\n/**\n * @title Expiring Multi Party Contract creator.\n * @notice Factory contract to create and register new instances of expiring multiparty contracts.\n * Responsible for constraining the parameters used to construct a new EMP. This creator contains a number of constraints\n * that are applied to newly created expiring multi party contract. These constraints can evolve over time and are\n * initially constrained to conservative values in this first iteration. Technically there is nothing in the\n * ExpiringMultiParty contract requiring these constraints. However, because `createExpiringMultiParty()` is intended\n * to be the only way to create valid financial contracts that are registered with the DVM (via _registerContract),\n  we can enforce deployment configurations here.\n */\ncontract ExpiringMultiPartyCreator is ContractCreator, Testable, Lockable {\n    using FixedPoint for FixedPoint.Unsigned;\n\n    /****************************************\n     *     EMP CREATOR DATA STRUCTURES      *\n     ****************************************/\n\n    struct Params {\n        uint256 expirationTimestamp;\n        address collateralAddress;\n        bytes32 priceFeedIdentifier;\n        string syntheticName;\n        string syntheticSymbol;\n        FixedPoint.Unsigned collateralRequirement;\n        FixedPoint.Unsigned disputeBondPercentage;\n        FixedPoint.Unsigned sponsorDisputeRewardPercentage;\n        FixedPoint.Unsigned disputerDisputeRewardPercentage;\n        FixedPoint.Unsigned minSponsorTokens;\n        uint256 withdrawalLiveness;\n        uint256 liquidationLiveness;\n        address financialProductLibraryAddress;\n    }\n    // Address of TokenFactory used to create a new synthetic token.\n    address public tokenFactoryAddress;\n\n    event CreatedExpiringMultiParty(address indexed expiringMultiPartyAddress, address indexed deployerAddress);\n\n    /**\n     * @notice Constructs the ExpiringMultiPartyCreator contract.\n     * @param _finderAddress UMA protocol Finder used to discover other protocol contracts.\n     * @param _tokenFactoryAddress ERC20 token factory used to deploy synthetic token instances.\n     * @param _timerAddress Contract that stores the current time in a testing environment.\n     */\n    constructor(\n        address _finderAddress,\n        address _tokenFactoryAddress,\n        address _timerAddress\n    ) ContractCreator(_finderAddress) Testable(_timerAddress) nonReentrant() {\n        tokenFactoryAddress = _tokenFactoryAddress;\n    }\n\n    /**\n     * @notice Creates an instance of expiring multi party and registers it within the registry.\n     * @param params is a `ConstructorParams` object from ExpiringMultiParty.\n     * @return address of the deployed ExpiringMultiParty contract.\n     */\n    function createExpiringMultiParty(Params memory params) public nonReentrant() returns (address) {\n        // Create a new synthetic token using the params.\n        require(bytes(params.syntheticName).length != 0, \"Missing synthetic name\");\n        require(bytes(params.syntheticSymbol).length != 0, \"Missing synthetic symbol\");\n        TokenFactory tf = TokenFactory(tokenFactoryAddress);\n\n        // If the collateral token does not have a `decimals()` method, then a default precision of 18 will be\n        // applied to the newly created synthetic token.\n        uint8 syntheticDecimals = _getSyntheticDecimals(params.collateralAddress);\n        ExpandedIERC20 tokenCurrency = tf.createToken(params.syntheticName, params.syntheticSymbol, syntheticDecimals);\n        address derivative = ExpiringMultiPartyLib.deploy(_convertParams(params, tokenCurrency));\n\n        // Give permissions to new derivative contract and then hand over ownership.\n        tokenCurrency.addMinter(derivative);\n        tokenCurrency.addBurner(derivative);\n        tokenCurrency.resetOwner(derivative);\n\n        _registerContract(new address[](0), derivative);\n\n        emit CreatedExpiringMultiParty(derivative, msg.sender);\n\n        return derivative;\n    }\n\n    /****************************************\n     *          PRIVATE FUNCTIONS           *\n     ****************************************/\n\n    // Converts createExpiringMultiParty params to ExpiringMultiParty constructor params.\n    function _convertParams(Params memory params, ExpandedIERC20 newTokenCurrency)\n        private\n        view\n        returns (ExpiringMultiParty.ConstructorParams memory constructorParams)\n    {\n        // Known from creator deployment.\n        constructorParams.finderAddress = finderAddress;\n        constructorParams.timerAddress = timerAddress;\n\n        // Enforce configuration constraints.\n        require(params.withdrawalLiveness != 0, \"Withdrawal liveness cannot be 0\");\n        require(params.liquidationLiveness != 0, \"Liquidation liveness cannot be 0\");\n        require(params.expirationTimestamp > block.timestamp, \"Invalid expiration time\");\n        _requireWhitelistedCollateral(params.collateralAddress);\n\n        // We don't want EMP deployers to be able to intentionally or unintentionally set\n        // liveness periods that could induce arithmetic overflow, but we also don't want\n        // to be opinionated about what livenesses are \"correct\", so we will somewhat\n        // arbitrarily set the liveness upper bound to 100 years (5200 weeks). In practice, liveness\n        // periods even greater than a few days would make the EMP unusable for most users.\n        require(params.withdrawalLiveness < 5200 weeks, \"Withdrawal liveness too large\");\n        require(params.liquidationLiveness < 5200 weeks, \"Liquidation liveness too large\");\n\n        // Input from function call.\n        constructorParams.tokenAddress = address(newTokenCurrency);\n        constructorParams.expirationTimestamp = params.expirationTimestamp;\n        constructorParams.collateralAddress = params.collateralAddress;\n        constructorParams.priceFeedIdentifier = params.priceFeedIdentifier;\n        constructorParams.collateralRequirement = params.collateralRequirement;\n        constructorParams.disputeBondPercentage = params.disputeBondPercentage;\n        constructorParams.sponsorDisputeRewardPercentage = params.sponsorDisputeRewardPercentage;\n        constructorParams.disputerDisputeRewardPercentage = params.disputerDisputeRewardPercentage;\n        constructorParams.minSponsorTokens = params.minSponsorTokens;\n        constructorParams.withdrawalLiveness = params.withdrawalLiveness;\n        constructorParams.liquidationLiveness = params.liquidationLiveness;\n        constructorParams.financialProductLibraryAddress = params.financialProductLibraryAddress;\n    }\n\n    // IERC20Standard.decimals() will revert if the collateral contract has not implemented the decimals() method,\n    // which is possible since the method is only an OPTIONAL method in the ERC20 standard:\n    // https://eips.ethereum.org/EIPS/eip-20#methods.\n    function _getSyntheticDecimals(address _collateralAddress) public view returns (uint8 decimals) {\n        try IERC20Standard(_collateralAddress).decimals() returns (uint8 _decimals) {\n            return _decimals;\n        } catch {\n            return 18;\n        }\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/expiring-multiparty/ExpiringMultiPartyLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./ExpiringMultiParty.sol\";\n\n/**\n * @title Provides convenient Expiring Multi Party contract utilities.\n * @dev Using this library to deploy EMP's allows calling contracts to avoid importing the full EMP bytecode.\n */\nlibrary ExpiringMultiPartyLib {\n    /**\n     * @notice Returns address of new EMP deployed with given `params` configuration.\n     * @dev Caller will need to register new EMP with the Registry to begin requesting prices. Caller is also\n     * responsible for enforcing constraints on `params`.\n     * @param params is a `ConstructorParams` object from ExpiringMultiParty.\n     * @return address of the deployed ExpiringMultiParty contract\n     */\n    function deploy(ExpiringMultiParty.ConstructorParams memory params) public returns (address) {\n        ExpiringMultiParty derivative = new ExpiringMultiParty(params);\n        return address(derivative);\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/expiring-multiparty/ExpiringMultiParty.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./Liquidatable.sol\";\n\n/**\n * @title Expiring Multi Party.\n * @notice Convenient wrapper for Liquidatable.\n */\ncontract ExpiringMultiParty is Liquidatable {\n    /**\n     * @notice Constructs the ExpiringMultiParty contract.\n     * @param params struct to define input parameters for construction of Liquidatable. Some params\n     * are fed directly into the PricelessPositionManager's constructor within the inheritance tree.\n     */\n    constructor(ConstructorParams memory params)\n        Liquidatable(params)\n    // Note: since there is no logic here, there is no need to add a re-entrancy guard.\n    {\n\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/expiring-multiparty/Liquidatable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"./PricelessPositionManager.sol\";\n\nimport \"../../common/implementation/FixedPoint.sol\";\n\n/**\n * @title Liquidatable\n * @notice Adds logic to a position-managing contract that enables callers to liquidate an undercollateralized position.\n * @dev The liquidation has a liveness period before expiring successfully, during which someone can \"dispute\" the\n * liquidation, which sends a price request to the relevant Oracle to settle the final collateralization ratio based on\n * a DVM price. The contract enforces dispute rewards in order to incentivize disputers to correctly dispute false\n * liquidations and compensate position sponsors who had their position incorrectly liquidated. Importantly, a\n * prospective disputer must deposit a dispute bond that they can lose in the case of an unsuccessful dispute.\n * NOTE: this contract does _not_ work with ERC777 collateral currencies or any others that call into the receiver on\n * transfer(). Using an ERC777 token would allow a user to maliciously grief other participants (while also losing\n * money themselves).\n */\ncontract Liquidatable is PricelessPositionManager {\n    using FixedPoint for FixedPoint.Unsigned;\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using SafeERC20 for ExpandedIERC20;\n    using Address for address;\n\n    /****************************************\n     *     LIQUIDATION DATA STRUCTURES      *\n     ****************************************/\n\n    // Because of the check in withdrawable(), the order of these enum values should not change.\n    enum Status { Uninitialized, NotDisputed, Disputed, DisputeSucceeded, DisputeFailed }\n\n    struct LiquidationData {\n        // Following variables set upon creation of liquidation:\n        address sponsor; // Address of the liquidated position's sponsor\n        address liquidator; // Address who created this liquidation\n        Status state; // Liquidated (and expired or not), Pending a Dispute, or Dispute has resolved\n        uint256 liquidationTime; // Time when liquidation is initiated, needed to get price from Oracle\n        // Following variables determined by the position that is being liquidated:\n        FixedPoint.Unsigned tokensOutstanding; // Synthetic tokens required to be burned by liquidator to initiate dispute\n        FixedPoint.Unsigned lockedCollateral; // Collateral locked by contract and released upon expiry or post-dispute\n        // Amount of collateral being liquidated, which could be different from\n        // lockedCollateral if there were pending withdrawals at the time of liquidation\n        FixedPoint.Unsigned liquidatedCollateral;\n        // Unit value (starts at 1) that is used to track the fees per unit of collateral over the course of the liquidation.\n        FixedPoint.Unsigned rawUnitCollateral;\n        // Following variable set upon initiation of a dispute:\n        address disputer; // Person who is disputing a liquidation\n        // Following variable set upon a resolution of a dispute:\n        FixedPoint.Unsigned settlementPrice; // Final price as determined by an Oracle following a dispute\n        FixedPoint.Unsigned finalFee;\n    }\n\n    // Define the contract's constructor parameters as a struct to enable more variables to be specified.\n    // This is required to enable more params, over and above Solidity's limits.\n    struct ConstructorParams {\n        // Params for PricelessPositionManager only.\n        uint256 expirationTimestamp;\n        uint256 withdrawalLiveness;\n        address collateralAddress;\n        address tokenAddress;\n        address finderAddress;\n        address timerAddress;\n        address financialProductLibraryAddress;\n        bytes32 priceFeedIdentifier;\n        FixedPoint.Unsigned minSponsorTokens;\n        // Params specifically for Liquidatable.\n        uint256 liquidationLiveness;\n        FixedPoint.Unsigned collateralRequirement;\n        FixedPoint.Unsigned disputeBondPercentage;\n        FixedPoint.Unsigned sponsorDisputeRewardPercentage;\n        FixedPoint.Unsigned disputerDisputeRewardPercentage;\n    }\n\n    // This struct is used in the `withdrawLiquidation` method that disperses liquidation and dispute rewards.\n    // `payToX` stores the total collateral to withdraw from the contract to pay X. This value might differ\n    // from `paidToX` due to precision loss between accounting for the `rawCollateral` versus the\n    // fee-adjusted collateral. These variables are stored within a struct to avoid the stack too deep error.\n    struct RewardsData {\n        FixedPoint.Unsigned payToSponsor;\n        FixedPoint.Unsigned payToLiquidator;\n        FixedPoint.Unsigned payToDisputer;\n        FixedPoint.Unsigned paidToSponsor;\n        FixedPoint.Unsigned paidToLiquidator;\n        FixedPoint.Unsigned paidToDisputer;\n    }\n\n    // Liquidations are unique by ID per sponsor\n    mapping(address => LiquidationData[]) public liquidations;\n\n    // Total collateral in liquidation.\n    FixedPoint.Unsigned public rawLiquidationCollateral;\n\n    // Immutable contract parameters:\n    // Amount of time for pending liquidation before expiry.\n    // !!Note: The lower the liquidation liveness value, the more risk incurred by sponsors.\n    //       Extremely low liveness values increase the chance that opportunistic invalid liquidations\n    //       expire without dispute, thereby decreasing the usability for sponsors and increasing the risk\n    //       for the contract as a whole. An insolvent contract is extremely risky for any sponsor or synthetic\n    //       token holder for the contract.\n    uint256 public liquidationLiveness;\n    // Required collateral:TRV ratio for a position to be considered sufficiently collateralized.\n    FixedPoint.Unsigned public collateralRequirement;\n    // Percent of a Liquidation/Position's lockedCollateral to be deposited by a potential disputer\n    // Represented as a multiplier, for example 1.5e18 = \"150%\" and 0.05e18 = \"5%\"\n    FixedPoint.Unsigned public disputeBondPercentage;\n    // Percent of oraclePrice paid to sponsor in the Disputed state (i.e. following a successful dispute)\n    // Represented as a multiplier, see above.\n    FixedPoint.Unsigned public sponsorDisputeRewardPercentage;\n    // Percent of oraclePrice paid to disputer in the Disputed state (i.e. following a successful dispute)\n    // Represented as a multiplier, see above.\n    FixedPoint.Unsigned public disputerDisputeRewardPercentage;\n\n    /****************************************\n     *                EVENTS                *\n     ****************************************/\n\n    event LiquidationCreated(\n        address indexed sponsor,\n        address indexed liquidator,\n        uint256 indexed liquidationId,\n        uint256 tokensOutstanding,\n        uint256 lockedCollateral,\n        uint256 liquidatedCollateral,\n        uint256 liquidationTime\n    );\n    event LiquidationDisputed(\n        address indexed sponsor,\n        address indexed liquidator,\n        address indexed disputer,\n        uint256 liquidationId,\n        uint256 disputeBondAmount\n    );\n    event DisputeSettled(\n        address indexed caller,\n        address indexed sponsor,\n        address indexed liquidator,\n        address disputer,\n        uint256 liquidationId,\n        bool disputeSucceeded\n    );\n    event LiquidationWithdrawn(\n        address indexed caller,\n        uint256 paidToLiquidator,\n        uint256 paidToDisputer,\n        uint256 paidToSponsor,\n        Status indexed liquidationStatus,\n        uint256 settlementPrice\n    );\n\n    /****************************************\n     *              MODIFIERS               *\n     ****************************************/\n\n    modifier disputable(uint256 liquidationId, address sponsor) {\n        _disputable(liquidationId, sponsor);\n        _;\n    }\n\n    modifier withdrawable(uint256 liquidationId, address sponsor) {\n        _withdrawable(liquidationId, sponsor);\n        _;\n    }\n\n    /**\n     * @notice Constructs the liquidatable contract.\n     * @param params struct to define input parameters for construction of Liquidatable. Some params\n     * are fed directly into the PricelessPositionManager's constructor within the inheritance tree.\n     */\n    constructor(ConstructorParams memory params)\n        PricelessPositionManager(\n            params.expirationTimestamp,\n            params.withdrawalLiveness,\n            params.collateralAddress,\n            params.tokenAddress,\n            params.finderAddress,\n            params.priceFeedIdentifier,\n            params.minSponsorTokens,\n            params.timerAddress,\n            params.financialProductLibraryAddress\n        )\n        nonReentrant()\n    {\n        require(params.collateralRequirement.isGreaterThan(1));\n        require(params.sponsorDisputeRewardPercentage.add(params.disputerDisputeRewardPercentage).isLessThan(1));\n\n        // Set liquidatable specific variables.\n        liquidationLiveness = params.liquidationLiveness;\n        collateralRequirement = params.collateralRequirement;\n        disputeBondPercentage = params.disputeBondPercentage;\n        sponsorDisputeRewardPercentage = params.sponsorDisputeRewardPercentage;\n        disputerDisputeRewardPercentage = params.disputerDisputeRewardPercentage;\n    }\n\n    /****************************************\n     *        LIQUIDATION FUNCTIONS         *\n     ****************************************/\n\n    /**\n     * @notice Liquidates the sponsor's position if the caller has enough\n     * synthetic tokens to retire the position's outstanding tokens. Liquidations above\n     * a minimum size also reset an ongoing \"slow withdrawal\"'s liveness.\n     * @dev This method generates an ID that will uniquely identify liquidation for the sponsor. This contract must be\n     * approved to spend at least `tokensLiquidated` of `tokenCurrency` and at least `finalFeeBond` of `collateralCurrency`.\n     * @dev This contract must have the Burner role for the `tokenCurrency`.\n     * @param sponsor address of the sponsor to liquidate.\n     * @param minCollateralPerToken abort the liquidation if the position's collateral per token is below this value.\n     * @param maxCollateralPerToken abort the liquidation if the position's collateral per token exceeds this value.\n     * @param maxTokensToLiquidate max number of tokens to liquidate.\n     * @param deadline abort the liquidation if the transaction is mined after this timestamp.\n     * @return liquidationId ID of the newly created liquidation.\n     * @return tokensLiquidated amount of synthetic tokens removed and liquidated from the `sponsor`'s position.\n     * @return finalFeeBond amount of collateral to be posted by liquidator and returned if not disputed successfully.\n     */\n    function createLiquidation(\n        address sponsor,\n        FixedPoint.Unsigned calldata minCollateralPerToken,\n        FixedPoint.Unsigned calldata maxCollateralPerToken,\n        FixedPoint.Unsigned calldata maxTokensToLiquidate,\n        uint256 deadline\n    )\n        external\n        fees()\n        onlyPreExpiration()\n        nonReentrant()\n        returns (\n            uint256 liquidationId,\n            FixedPoint.Unsigned memory tokensLiquidated,\n            FixedPoint.Unsigned memory finalFeeBond\n        )\n    {\n        // Check that this transaction was mined pre-deadline.\n        require(getCurrentTime() <= deadline, \"Mined after deadline\");\n\n        // Retrieve Position data for sponsor\n        PositionData storage positionToLiquidate = _getPositionData(sponsor);\n\n        tokensLiquidated = FixedPoint.min(maxTokensToLiquidate, positionToLiquidate.tokensOutstanding);\n        require(tokensLiquidated.isGreaterThan(0));\n\n        // Starting values for the Position being liquidated. If withdrawal request amount is > position's collateral,\n        // then set this to 0, otherwise set it to (startCollateral - withdrawal request amount).\n        FixedPoint.Unsigned memory startCollateral = _getFeeAdjustedCollateral(positionToLiquidate.rawCollateral);\n        FixedPoint.Unsigned memory startCollateralNetOfWithdrawal = FixedPoint.fromUnscaledUint(0);\n        if (positionToLiquidate.withdrawalRequestAmount.isLessThanOrEqual(startCollateral)) {\n            startCollateralNetOfWithdrawal = startCollateral.sub(positionToLiquidate.withdrawalRequestAmount);\n        }\n\n        // Scoping to get rid of a stack too deep error.\n        {\n            FixedPoint.Unsigned memory startTokens = positionToLiquidate.tokensOutstanding;\n\n            // The Position's collateralization ratio must be between [minCollateralPerToken, maxCollateralPerToken].\n            // maxCollateralPerToken >= startCollateralNetOfWithdrawal / startTokens.\n            require(\n                maxCollateralPerToken.mul(startTokens).isGreaterThanOrEqual(startCollateralNetOfWithdrawal),\n                \"CR is more than max liq. price\"\n            );\n            // minCollateralPerToken >= startCollateralNetOfWithdrawal / startTokens.\n            require(\n                minCollateralPerToken.mul(startTokens).isLessThanOrEqual(startCollateralNetOfWithdrawal),\n                \"CR is less than min liq. price\"\n            );\n        }\n\n        // Compute final fee at time of liquidation.\n        finalFeeBond = _computeFinalFees();\n\n        // These will be populated within the scope below.\n        FixedPoint.Unsigned memory lockedCollateral;\n        FixedPoint.Unsigned memory liquidatedCollateral;\n\n        // Scoping to get rid of a stack too deep error.\n        {\n            FixedPoint.Unsigned memory ratio = tokensLiquidated.div(positionToLiquidate.tokensOutstanding);\n\n            // The actual amount of collateral that gets moved to the liquidation.\n            lockedCollateral = startCollateral.mul(ratio);\n\n            // For purposes of disputes, it's actually this liquidatedCollateral value that's used. This value is net of\n            // withdrawal requests.\n            liquidatedCollateral = startCollateralNetOfWithdrawal.mul(ratio);\n\n            // Part of the withdrawal request is also removed. Ideally:\n            // liquidatedCollateral + withdrawalAmountToRemove = lockedCollateral.\n            FixedPoint.Unsigned memory withdrawalAmountToRemove =\n                positionToLiquidate.withdrawalRequestAmount.mul(ratio);\n            _reduceSponsorPosition(sponsor, tokensLiquidated, lockedCollateral, withdrawalAmountToRemove);\n        }\n\n        // Add to the global liquidation collateral count.\n        _addCollateral(rawLiquidationCollateral, lockedCollateral.add(finalFeeBond));\n\n        // Construct liquidation object.\n        // Note: All dispute-related values are zeroed out until a dispute occurs. liquidationId is the index of the new\n        // LiquidationData that is pushed into the array, which is equal to the current length of the array pre-push.\n        liquidationId = liquidations[sponsor].length;\n        liquidations[sponsor].push(\n            LiquidationData({\n                sponsor: sponsor,\n                liquidator: msg.sender,\n                state: Status.NotDisputed,\n                liquidationTime: getCurrentTime(),\n                tokensOutstanding: tokensLiquidated,\n                lockedCollateral: lockedCollateral,\n                liquidatedCollateral: liquidatedCollateral,\n                rawUnitCollateral: _convertToRawCollateral(FixedPoint.fromUnscaledUint(1)),\n                disputer: address(0),\n                settlementPrice: FixedPoint.fromUnscaledUint(0),\n                finalFee: finalFeeBond\n            })\n        );\n\n        // If this liquidation is a subsequent liquidation on the position, and the liquidation size is larger than\n        // some \"griefing threshold\", then re-set the liveness. This enables a liquidation against a withdraw request to be\n        // \"dragged out\" if the position is very large and liquidators need time to gather funds. The griefing threshold\n        // is enforced so that liquidations for trivially small # of tokens cannot drag out an honest sponsor's slow withdrawal.\n\n        // We arbitrarily set the \"griefing threshold\" to `minSponsorTokens` because it is the only parameter\n        // denominated in token currency units and we can avoid adding another parameter.\n        FixedPoint.Unsigned memory griefingThreshold = minSponsorTokens;\n        if (\n            positionToLiquidate.withdrawalRequestPassTimestamp > 0 && // The position is undergoing a slow withdrawal.\n            positionToLiquidate.withdrawalRequestPassTimestamp > getCurrentTime() && // The slow withdrawal has not yet expired.\n            tokensLiquidated.isGreaterThanOrEqual(griefingThreshold) // The liquidated token count is above a \"griefing threshold\".\n        ) {\n            positionToLiquidate.withdrawalRequestPassTimestamp = getCurrentTime().add(withdrawalLiveness);\n        }\n\n        emit LiquidationCreated(\n            sponsor,\n            msg.sender,\n            liquidationId,\n            tokensLiquidated.rawValue,\n            lockedCollateral.rawValue,\n            liquidatedCollateral.rawValue,\n            getCurrentTime()\n        );\n\n        // Destroy tokens\n        tokenCurrency.safeTransferFrom(msg.sender, address(this), tokensLiquidated.rawValue);\n        tokenCurrency.burn(tokensLiquidated.rawValue);\n\n        // Pull final fee from liquidator.\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), finalFeeBond.rawValue);\n    }\n\n    /**\n     * @notice Disputes a liquidation, if the caller has enough collateral to post a dispute bond\n     * and pay a fixed final fee charged on each price request.\n     * @dev Can only dispute a liquidation before the liquidation expires and if there are no other pending disputes.\n     * This contract must be approved to spend at least the dispute bond amount of `collateralCurrency`. This dispute\n     * bond amount is calculated from `disputeBondPercentage` times the collateral in the liquidation.\n     * @param liquidationId of the disputed liquidation.\n     * @param sponsor the address of the sponsor whose liquidation is being disputed.\n     * @return totalPaid amount of collateral charged to disputer (i.e. final fee bond + dispute bond).\n     */\n    function dispute(uint256 liquidationId, address sponsor)\n        external\n        disputable(liquidationId, sponsor)\n        fees()\n        nonReentrant()\n        returns (FixedPoint.Unsigned memory totalPaid)\n    {\n        LiquidationData storage disputedLiquidation = _getLiquidationData(sponsor, liquidationId);\n\n        // Multiply by the unit collateral so the dispute bond is a percentage of the locked collateral after fees.\n        FixedPoint.Unsigned memory disputeBondAmount =\n            disputedLiquidation.lockedCollateral.mul(disputeBondPercentage).mul(\n                _getFeeAdjustedCollateral(disputedLiquidation.rawUnitCollateral)\n            );\n        _addCollateral(rawLiquidationCollateral, disputeBondAmount);\n\n        // Request a price from DVM. Liquidation is pending dispute until DVM returns a price.\n        disputedLiquidation.state = Status.Disputed;\n        disputedLiquidation.disputer = msg.sender;\n\n        // Enqueue a request with the DVM.\n        _requestOraclePriceLiquidation(disputedLiquidation.liquidationTime);\n\n        emit LiquidationDisputed(\n            sponsor,\n            disputedLiquidation.liquidator,\n            msg.sender,\n            liquidationId,\n            disputeBondAmount.rawValue\n        );\n        totalPaid = disputeBondAmount.add(disputedLiquidation.finalFee);\n\n        // Pay the final fee for requesting price from the DVM.\n        _payFinalFees(msg.sender, disputedLiquidation.finalFee);\n\n        // Transfer the dispute bond amount from the caller to this contract.\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), disputeBondAmount.rawValue);\n    }\n\n    /**\n     * @notice After a dispute has settled or after a non-disputed liquidation has expired,\n     * anyone can call this method to disperse payments to the sponsor, liquidator, and disdputer.\n     * @dev If the dispute SUCCEEDED: the sponsor, liquidator, and disputer are eligible for payment.\n     * If the dispute FAILED: only the liquidator can receive payment.\n     * This method will revert if rewards have already been dispersed.\n     * @param liquidationId uniquely identifies the sponsor's liquidation.\n     * @param sponsor address of the sponsor associated with the liquidation.\n     * @return data about rewards paid out.\n     */\n    function withdrawLiquidation(uint256 liquidationId, address sponsor)\n        public\n        withdrawable(liquidationId, sponsor)\n        fees()\n        nonReentrant()\n        returns (RewardsData memory)\n    {\n        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);\n\n        // Settles the liquidation if necessary. This call will revert if the price has not resolved yet.\n        _settle(liquidationId, sponsor);\n\n        // Calculate rewards as a function of the TRV.\n        // Note: all payouts are scaled by the unit collateral value so all payouts are charged the fees pro rata.\n        FixedPoint.Unsigned memory feeAttenuation = _getFeeAdjustedCollateral(liquidation.rawUnitCollateral);\n        FixedPoint.Unsigned memory settlementPrice = liquidation.settlementPrice;\n        FixedPoint.Unsigned memory tokenRedemptionValue =\n            liquidation.tokensOutstanding.mul(settlementPrice).mul(feeAttenuation);\n        FixedPoint.Unsigned memory collateral = liquidation.lockedCollateral.mul(feeAttenuation);\n        FixedPoint.Unsigned memory disputerDisputeReward = disputerDisputeRewardPercentage.mul(tokenRedemptionValue);\n        FixedPoint.Unsigned memory sponsorDisputeReward = sponsorDisputeRewardPercentage.mul(tokenRedemptionValue);\n        FixedPoint.Unsigned memory disputeBondAmount = collateral.mul(disputeBondPercentage);\n        FixedPoint.Unsigned memory finalFee = liquidation.finalFee.mul(feeAttenuation);\n\n        // There are three main outcome states: either the dispute succeeded, failed or was not updated.\n        // Based on the state, different parties of a liquidation receive different amounts.\n        // After assigning rewards based on the liquidation status, decrease the total collateral held in this contract\n        // by the amount to pay each party. The actual amounts withdrawn might differ if _removeCollateral causes\n        // precision loss.\n        RewardsData memory rewards;\n        if (liquidation.state == Status.DisputeSucceeded) {\n            // If the dispute is successful then all three users should receive rewards:\n\n            // Pay DISPUTER: disputer reward + dispute bond + returned final fee\n            rewards.payToDisputer = disputerDisputeReward.add(disputeBondAmount).add(finalFee);\n\n            // Pay SPONSOR: remaining collateral (collateral - TRV) + sponsor reward\n            rewards.payToSponsor = sponsorDisputeReward.add(collateral.sub(tokenRedemptionValue));\n\n            // Pay LIQUIDATOR: TRV - dispute reward - sponsor reward\n            // If TRV > Collateral, then subtract rewards from collateral\n            // NOTE: `payToLiquidator` should never be below zero since we enforce that\n            // (sponsorDisputePct+disputerDisputePct) <= 1 in the constructor when these params are set.\n            rewards.payToLiquidator = tokenRedemptionValue.sub(sponsorDisputeReward).sub(disputerDisputeReward);\n\n            // Transfer rewards and debit collateral\n            rewards.paidToLiquidator = _removeCollateral(rawLiquidationCollateral, rewards.payToLiquidator);\n            rewards.paidToSponsor = _removeCollateral(rawLiquidationCollateral, rewards.payToSponsor);\n            rewards.paidToDisputer = _removeCollateral(rawLiquidationCollateral, rewards.payToDisputer);\n\n            collateralCurrency.safeTransfer(liquidation.disputer, rewards.paidToDisputer.rawValue);\n            collateralCurrency.safeTransfer(liquidation.liquidator, rewards.paidToLiquidator.rawValue);\n            collateralCurrency.safeTransfer(liquidation.sponsor, rewards.paidToSponsor.rawValue);\n\n            // In the case of a failed dispute only the liquidator can withdraw.\n        } else if (liquidation.state == Status.DisputeFailed) {\n            // Pay LIQUIDATOR: collateral + dispute bond + returned final fee\n            rewards.payToLiquidator = collateral.add(disputeBondAmount).add(finalFee);\n\n            // Transfer rewards and debit collateral\n            rewards.paidToLiquidator = _removeCollateral(rawLiquidationCollateral, rewards.payToLiquidator);\n\n            collateralCurrency.safeTransfer(liquidation.liquidator, rewards.paidToLiquidator.rawValue);\n\n            // If the state is pre-dispute but time has passed liveness then there was no dispute. We represent this\n            // state as a dispute failed and the liquidator can withdraw.\n        } else if (liquidation.state == Status.NotDisputed) {\n            // Pay LIQUIDATOR: collateral + returned final fee\n            rewards.payToLiquidator = collateral.add(finalFee);\n\n            // Transfer rewards and debit collateral\n            rewards.paidToLiquidator = _removeCollateral(rawLiquidationCollateral, rewards.payToLiquidator);\n\n            collateralCurrency.safeTransfer(liquidation.liquidator, rewards.paidToLiquidator.rawValue);\n        }\n\n        emit LiquidationWithdrawn(\n            msg.sender,\n            rewards.paidToLiquidator.rawValue,\n            rewards.paidToDisputer.rawValue,\n            rewards.paidToSponsor.rawValue,\n            liquidation.state,\n            settlementPrice.rawValue\n        );\n\n        // Free up space after collateral is withdrawn by removing the liquidation object from the array.\n        delete liquidations[sponsor][liquidationId];\n\n        return rewards;\n    }\n\n    /**\n     * @notice Gets all liquidation information for a given sponsor address.\n     * @param sponsor address of the position sponsor.\n     * @return liquidationData array of all liquidation information for the given sponsor address.\n     */\n    function getLiquidations(address sponsor)\n        external\n        view\n        nonReentrantView()\n        returns (LiquidationData[] memory liquidationData)\n    {\n        return liquidations[sponsor];\n    }\n\n    /**\n     * @notice Accessor method to calculate a transformed collateral requirement using the finanical product library\n      specified during contract deployment. If no library was provided then no modification to the collateral requirement is done.\n     * @param price input price used as an input to transform the collateral requirement.\n     * @return transformedCollateralRequirement collateral requirement with transformation applied to it.\n     * @dev This method should never revert.\n     */\n    function transformCollateralRequirement(FixedPoint.Unsigned memory price)\n        public\n        view\n        nonReentrantView()\n        returns (FixedPoint.Unsigned memory)\n    {\n        return _transformCollateralRequirement(price);\n    }\n\n    /****************************************\n     *          INTERNAL FUNCTIONS          *\n     ****************************************/\n\n    // This settles a liquidation if it is in the Disputed state. If not, it will immediately return.\n    // If the liquidation is in the Disputed state, but a price is not available, this will revert.\n    function _settle(uint256 liquidationId, address sponsor) internal {\n        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);\n\n        // Settlement only happens when state == Disputed and will only happen once per liquidation.\n        // If this liquidation is not ready to be settled, this method should return immediately.\n        if (liquidation.state != Status.Disputed) {\n            return;\n        }\n\n        // Get the returned price from the oracle. If this has not yet resolved will revert.\n        liquidation.settlementPrice = _getOraclePriceLiquidation(liquidation.liquidationTime);\n\n        // Find the value of the tokens in the underlying collateral.\n        FixedPoint.Unsigned memory tokenRedemptionValue =\n            liquidation.tokensOutstanding.mul(liquidation.settlementPrice);\n\n        // The required collateral is the value of the tokens in underlying * required collateral ratio. The Transform\n        // Collateral requirement method applies a from the financial Product library to change the scaled the collateral\n        // requirement based on the settlement price. If no library was specified when deploying the emp then this makes no change.\n        FixedPoint.Unsigned memory requiredCollateral =\n            tokenRedemptionValue.mul(_transformCollateralRequirement(liquidation.settlementPrice));\n\n        // If the position has more than the required collateral it is solvent and the dispute is valid(liquidation is invalid)\n        // Note that this check uses the liquidatedCollateral not the lockedCollateral as this considers withdrawals.\n        bool disputeSucceeded = liquidation.liquidatedCollateral.isGreaterThanOrEqual(requiredCollateral);\n        liquidation.state = disputeSucceeded ? Status.DisputeSucceeded : Status.DisputeFailed;\n\n        emit DisputeSettled(\n            msg.sender,\n            sponsor,\n            liquidation.liquidator,\n            liquidation.disputer,\n            liquidationId,\n            disputeSucceeded\n        );\n    }\n\n    function _pfc() internal view override returns (FixedPoint.Unsigned memory) {\n        return super._pfc().add(_getFeeAdjustedCollateral(rawLiquidationCollateral));\n    }\n\n    function _getLiquidationData(address sponsor, uint256 liquidationId)\n        internal\n        view\n        returns (LiquidationData storage liquidation)\n    {\n        LiquidationData[] storage liquidationArray = liquidations[sponsor];\n\n        // Revert if the caller is attempting to access an invalid liquidation\n        // (one that has never been created or one has never been initialized).\n        require(\n            liquidationId < liquidationArray.length && liquidationArray[liquidationId].state != Status.Uninitialized,\n            \"Invalid liquidation ID\"\n        );\n        return liquidationArray[liquidationId];\n    }\n\n    function _getLiquidationExpiry(LiquidationData storage liquidation) internal view returns (uint256) {\n        return liquidation.liquidationTime.add(liquidationLiveness);\n    }\n\n    // These internal functions are supposed to act identically to modifiers, but re-used modifiers\n    // unnecessarily increase contract bytecode size.\n    // source: https://blog.polymath.network/solidity-tips-and-tricks-to-save-gas-and-reduce-bytecode-size-c44580b218e6\n    function _disputable(uint256 liquidationId, address sponsor) internal view {\n        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);\n        require(\n            (getCurrentTime() < _getLiquidationExpiry(liquidation)) && (liquidation.state == Status.NotDisputed),\n            \"Liquidation not disputable\"\n        );\n    }\n\n    function _withdrawable(uint256 liquidationId, address sponsor) internal view {\n        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);\n        Status state = liquidation.state;\n\n        // Must be disputed or the liquidation has passed expiry.\n        require(\n            (state > Status.NotDisputed) ||\n                ((_getLiquidationExpiry(liquidation) <= getCurrentTime()) && (state == Status.NotDisputed)),\n            \"Liquidation not withdrawable\"\n        );\n    }\n\n    function _transformCollateralRequirement(FixedPoint.Unsigned memory price)\n        internal\n        view\n        returns (FixedPoint.Unsigned memory)\n    {\n        if (!address(financialProductLibrary).isContract()) return collateralRequirement;\n        try financialProductLibrary.transformCollateralRequirement(price, collateralRequirement) returns (\n            FixedPoint.Unsigned memory transformedCollateralRequirement\n        ) {\n            return transformedCollateralRequirement;\n        } catch {\n            return collateralRequirement;\n        }\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/TokenMigrator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/FixedPoint.sol\";\nimport \"../../common/interfaces/ExpandedIERC20.sol\";\nimport \"./VotingToken.sol\";\n\n/**\n * @title Migration contract for VotingTokens.\n * @dev Handles migrating token holders from one token to the next.\n */\ncontract TokenMigrator {\n    using FixedPoint for FixedPoint.Unsigned;\n\n    /****************************************\n     *    INTERNAL VARIABLES AND STORAGE    *\n     ****************************************/\n\n    VotingToken public oldToken;\n    ExpandedIERC20 public newToken;\n\n    uint256 public snapshotId;\n    FixedPoint.Unsigned public rate;\n\n    mapping(address => bool) public hasMigrated;\n\n    /**\n     * @notice Construct the TokenMigrator contract.\n     * @dev This function triggers the snapshot upon which all migrations will be based.\n     * @param _rate the number of old tokens it takes to generate one new token.\n     * @param _oldToken address of the token being migrated from.\n     * @param _newToken address of the token being migrated to.\n     */\n    constructor(\n        FixedPoint.Unsigned memory _rate,\n        address _oldToken,\n        address _newToken\n    ) {\n        // Prevents division by 0 in migrateTokens().\n        // Also it doesn’t make sense to have “0 old tokens equate to 1 new token”.\n        require(_rate.isGreaterThan(0), \"Rate can't be 0\");\n        rate = _rate;\n        newToken = ExpandedIERC20(_newToken);\n        oldToken = VotingToken(_oldToken);\n        snapshotId = oldToken.snapshot();\n    }\n\n    /**\n     * @notice Migrates the tokenHolder's old tokens to new tokens.\n     * @dev This function can only be called once per `tokenHolder`. Anyone can call this method\n     * on behalf of any other token holder since there is no disadvantage to receiving the tokens earlier.\n     * @param tokenHolder address of the token holder to migrate.\n     */\n    function migrateTokens(address tokenHolder) external {\n        require(!hasMigrated[tokenHolder], \"Already migrated tokens\");\n        hasMigrated[tokenHolder] = true;\n\n        FixedPoint.Unsigned memory oldBalance = FixedPoint.Unsigned(oldToken.balanceOfAt(tokenHolder, snapshotId));\n\n        if (!oldBalance.isGreaterThan(0)) {\n            return;\n        }\n\n        FixedPoint.Unsigned memory newBalance = oldBalance.div(rate);\n        require(newToken.mint(tokenHolder, newBalance.rawValue), \"Mint failed\");\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/DesignatedVotingV2.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/MultiRole.sol\";\nimport \"../../common/implementation/Stakeable.sol\";\nimport \"../interfaces/VotingAncillaryInterface.sol\";\nimport \"../interfaces/FinderInterface.sol\";\nimport \"./Constants.sol\";\n\n/**\n * @title Proxy to allow voting from another address.\n * @dev Allows a UMA token holder to designate another address to vote on their behalf.\n * Each voter must deploy their own instance of this contract.\n */\ncontract DesignatedVotingV2 is Stakeable {\n    /****************************************\n     *    INTERNAL VARIABLES AND STORAGE    *\n     ****************************************/\n\n    enum Roles {\n        Owner, // Can set the Voter role. Is also permanently permissioned as the minter role.\n        Voter // Can vote through this contract.\n    }\n\n    // Reference to the UMA Finder contract, allowing Voting upgrades to be performed\n    // without requiring any calls to this contract.\n    FinderInterface private finder;\n\n    /**\n     * @notice Construct the DesignatedVoting contract.\n     * @param finderAddress keeps track of all contracts within the system based on their interfaceName.\n     * @param ownerAddress address of the owner of the DesignatedVoting contract.\n     * @param voterAddress address to which the owner has delegated their voting power.\n     */\n    constructor(\n        address finderAddress,\n        address ownerAddress,\n        address voterAddress\n    ) {\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), ownerAddress);\n        _createExclusiveRole(uint256(Roles.Voter), uint256(Roles.Owner), voterAddress);\n        _setWithdrawRole(uint256(Roles.Owner));\n        _setStakeRole(uint256(Roles.Owner));\n\n        finder = FinderInterface(finderAddress);\n    }\n\n    /****************************************\n     *   VOTING AND REWARD FUNCTIONALITY    *\n     ****************************************/\n\n    /**\n     * @notice Forwards a commit to Voting.\n     * @param identifier uniquely identifies the feed for this vote. EG BTC/USD price pair.\n     * @param time specifies the unix timestamp of the price being voted on.\n     * @param hash the keccak256 hash of the price you want to vote for and a random integer salt value.\n     */\n    function commitVote(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData,\n        bytes32 hash\n    ) external onlyRoleHolder(uint256(Roles.Voter)) {\n        _getVotingContract().commitVote(identifier, time, ancillaryData, hash);\n    }\n\n    /**\n     * @notice Forwards a batch commit to Voting.\n     * @param commits struct to encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`.\n     */\n    function batchCommit(VotingAncillaryInterface.CommitmentAncillary[] calldata commits)\n        external\n        onlyRoleHolder(uint256(Roles.Voter))\n    {\n        _getVotingContract().batchCommit(commits);\n    }\n\n    /**\n     * @notice Forwards a reveal to Voting.\n     * @param identifier voted on in the commit phase. EG BTC/USD price pair.\n     * @param time specifies the unix timestamp of the price being voted on.\n     * @param price used along with the `salt` to produce the `hash` during the commit phase.\n     * @param salt used along with the `price` to produce the `hash` during the commit phase.\n     */\n    function revealVote(\n        bytes32 identifier,\n        uint256 time,\n        int256 price,\n        bytes memory ancillaryData,\n        int256 salt\n    ) external onlyRoleHolder(uint256(Roles.Voter)) {\n        _getVotingContract().revealVote(identifier, time, price, ancillaryData, salt);\n    }\n\n    /**\n     * @notice Forwards a batch reveal to Voting.\n     * @param reveals is an array of the Reveal struct which contains an identifier, time, price and salt.\n     */\n    function batchReveal(VotingAncillaryInterface.RevealAncillary[] calldata reveals)\n        external\n        onlyRoleHolder(uint256(Roles.Voter))\n    {\n        _getVotingContract().batchReveal(reveals);\n    }\n\n    /**\n     * @notice Forwards a reward retrieval to Voting.\n     * @dev Rewards are added to the tokens already held by this contract.\n     * @return amount of rewards that the user should receive.\n     */\n    function retrieveRewards() public onlyRoleHolder(uint256(Roles.Voter)) returns (uint256) {\n        StakerInterface voting = StakerInterface(address(_getVotingContract()));\n        uint256 rewardsMinted = voting.withdrawRewards();\n        IERC20(address(voting.votingToken())).approve(address(voting), rewardsMinted);\n        voting.stake(rewardsMinted);\n    }\n\n    function _getVotingContract() private view returns (VotingAncillaryInterface) {\n        return VotingAncillaryInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\n    }\n}\n"
    },
    "contracts/UMA/common/implementation/Stakeable.sol": {
      "content": "/**\n * Stakeable contract.\n */\n\n// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../oracle/interfaces/StakerInterface.sol\";\nimport \"./Withdrawable.sol\";\n\n/**\n * @title Base contract that extends the Withdrawable contract enabling a specific role to stake ERC20 tokens against the\n * Voting contract. Voting contract is fed in as a param rather than fetched from the finder to enable upgradability.\n */\nabstract contract Stakeable is Withdrawable {\n    using SafeERC20 for IERC20;\n\n    uint256 private roleId;\n\n    /**\n     * @notice Stake ERC20 tokens from this contract to the votingContract.\n     * @param amount amount of tokens to stake.\n     * @param votingContract Address of the voting contract to stake into.\n     */\n    function stake(uint256 amount, address votingContract) external onlyRoleHolder(roleId) {\n        StakerInterface voting = StakerInterface(votingContract);\n        IERC20 votingToken = IERC20(voting.votingToken());\n        votingToken.approve(votingContract, amount);\n        voting.stake(amount);\n    }\n\n    /**\n     * @notice Request unstaking of ERC20 tokens from this contract to the votingContract.\n     * @param amount amount of tokens to unstake.\n     * @param votingContract Address of the voting contract to unstake from.\n     */\n    function requestUnstake(uint256 amount, address votingContract) external onlyRoleHolder(roleId) {\n        StakerInterface voting = StakerInterface(votingContract);\n        voting.requestUnstake(amount);\n    }\n\n    /**\n     * @notice Execute an unstake request that has passed liveness on the voting contract.\n     * @param votingContract Address of the voting contract to execute the unstake from.\n     */\n    function executeUnstake(address votingContract) external onlyRoleHolder(roleId) {\n        StakerInterface voting = StakerInterface(votingContract);\n        voting.executeUnstake();\n    }\n\n    /**\n     * @notice Internal method that allows derived contracts to choose the role for stakeable.\n     * @dev The role `setRoleId` must exist. Either this method or `_setStakeRole` must be\n     * called by the derived class for this contract to function properly.\n     * @param setRoleId ID corresponding to role whose members can stakeable.\n     */\n    function _setStakeRole(uint256 setRoleId) internal onlyValidRole(setRoleId) {\n        roleId = setRoleId;\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/DesignatedVotingV2Factory.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/Withdrawable.sol\";\nimport \"./DesignatedVotingV2.sol\";\n\n/**\n * @title Factory to deploy new instances of DesignatedVotingV2 and look up previously deployed instances.\n * @dev Allows off-chain infrastructure to look up a hot wallet's deployed DesignatedVoting contract.\n */\ncontract DesignatedVotingV2Factory is Withdrawable {\n    address private finder;\n    mapping(address => DesignatedVotingV2) public designatedVotingContracts;\n\n    /**\n     * @notice Construct the DesignatedVotingFactory contract.\n     * @param finderAddress keeps track of all contracts within the system based on their interfaceName.\n     */\n    constructor(address finderAddress) {\n        finder = finderAddress;\n    }\n\n    /**\n     * @notice Deploys a new `DesignatedVoting` contract.\n     * @param ownerAddress defines who will own the deployed instance of the designatedVoting contract.\n     * @return designatedVoting a new DesignatedVoting contract.\n     */\n    function newDesignatedVoting(address ownerAddress) external returns (DesignatedVotingV2) {\n        DesignatedVotingV2 designatedVoting = new DesignatedVotingV2(finder, ownerAddress, msg.sender);\n        designatedVotingContracts[msg.sender] = designatedVoting;\n        return designatedVoting;\n    }\n\n    /**\n     * @notice Associates a `DesignatedVoting` instance with `msg.sender`.\n     * @param designatedVotingAddress address to designate voting to.\n     * @dev This is generally only used if the owner of a `DesignatedVoting` contract changes their `voter`\n     * address and wants that reflected here.\n     */\n    function setDesignatedVoting(address designatedVotingAddress) external {\n        designatedVotingContracts[msg.sender] = DesignatedVotingV2(designatedVotingAddress);\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/DesignatedVotingFactory.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/Withdrawable.sol\";\nimport \"./DesignatedVoting.sol\";\n\n/**\n * @title Factory to deploy new instances of DesignatedVoting and look up previously deployed instances.\n * @dev Allows off-chain infrastructure to look up a hot wallet's deployed DesignatedVoting contract.\n */\ncontract DesignatedVotingFactory is Withdrawable {\n    /****************************************\n     *    INTERNAL VARIABLES AND STORAGE    *\n     ****************************************/\n\n    enum Roles {\n        Withdrawer // Can withdraw any ETH or ERC20 sent accidentally to this contract.\n    }\n\n    address private finder;\n    mapping(address => DesignatedVoting) public designatedVotingContracts;\n\n    /**\n     * @notice Construct the DesignatedVotingFactory contract.\n     * @param finderAddress keeps track of all contracts within the system based on their interfaceName.\n     */\n    constructor(address finderAddress) {\n        finder = finderAddress;\n\n        _createWithdrawRole(uint256(Roles.Withdrawer), uint256(Roles.Withdrawer), msg.sender);\n    }\n\n    /**\n     * @notice Deploys a new `DesignatedVoting` contract.\n     * @param ownerAddress defines who will own the deployed instance of the designatedVoting contract.\n     * @return designatedVoting a new DesignatedVoting contract.\n     */\n    function newDesignatedVoting(address ownerAddress) external returns (DesignatedVoting) {\n        DesignatedVoting designatedVoting = new DesignatedVoting(finder, ownerAddress, msg.sender);\n        designatedVotingContracts[msg.sender] = designatedVoting;\n        return designatedVoting;\n    }\n\n    /**\n     * @notice Associates a `DesignatedVoting` instance with `msg.sender`.\n     * @param designatedVotingAddress address to designate voting to.\n     * @dev This is generally only used if the owner of a `DesignatedVoting` contract changes their `voter`\n     * address and wants that reflected here.\n     */\n    function setDesignatedVoting(address designatedVotingAddress) external {\n        designatedVotingContracts[msg.sender] = DesignatedVoting(designatedVotingAddress);\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/DesignatedVoting.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/MultiRole.sol\";\nimport \"../../common/implementation/Withdrawable.sol\";\nimport \"../interfaces/VotingAncillaryInterface.sol\";\nimport \"../interfaces/FinderInterface.sol\";\nimport \"./Constants.sol\";\n\n/**\n * @title Proxy to allow voting from another address.\n * @dev Allows a UMA token holder to designate another address to vote on their behalf.\n * Each voter must deploy their own instance of this contract.\n */\ncontract DesignatedVoting is Withdrawable {\n    /****************************************\n     *    INTERNAL VARIABLES AND STORAGE    *\n     ****************************************/\n\n    enum Roles {\n        Owner, // Can set the Voter role. Is also permanently permissioned as the minter role.\n        Voter // Can vote through this contract.\n    }\n\n    // Reference to the UMA Finder contract, allowing Voting upgrades to be performed\n    // without requiring any calls to this contract.\n    FinderInterface private finder;\n\n    /**\n     * @notice Construct the DesignatedVoting contract.\n     * @param finderAddress keeps track of all contracts within the system based on their interfaceName.\n     * @param ownerAddress address of the owner of the DesignatedVoting contract.\n     * @param voterAddress address to which the owner has delegated their voting power.\n     */\n    constructor(\n        address finderAddress,\n        address ownerAddress,\n        address voterAddress\n    ) {\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), ownerAddress);\n        _createExclusiveRole(uint256(Roles.Voter), uint256(Roles.Owner), voterAddress);\n        _setWithdrawRole(uint256(Roles.Owner));\n\n        finder = FinderInterface(finderAddress);\n    }\n\n    /****************************************\n     *   VOTING AND REWARD FUNCTIONALITY    *\n     ****************************************/\n\n    /**\n     * @notice Forwards a commit to Voting.\n     * @param identifier uniquely identifies the feed for this vote. EG BTC/USD price pair.\n     * @param time specifies the unix timestamp of the price being voted on.\n     * @param hash the keccak256 hash of the price you want to vote for and a random integer salt value.\n     */\n    function commitVote(\n        bytes32 identifier,\n        uint256 time,\n        bytes memory ancillaryData,\n        bytes32 hash\n    ) external onlyRoleHolder(uint256(Roles.Voter)) {\n        _getVotingAddress().commitVote(identifier, time, ancillaryData, hash);\n    }\n\n    /**\n     * @notice Forwards a batch commit to Voting.\n     * @param commits struct to encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`.\n     */\n    function batchCommit(VotingAncillaryInterface.CommitmentAncillary[] calldata commits)\n        external\n        onlyRoleHolder(uint256(Roles.Voter))\n    {\n        _getVotingAddress().batchCommit(commits);\n    }\n\n    /**\n     * @notice Forwards a reveal to Voting.\n     * @param identifier voted on in the commit phase. EG BTC/USD price pair.\n     * @param time specifies the unix timestamp of the price being voted on.\n     * @param price used along with the `salt` to produce the `hash` during the commit phase.\n     * @param salt used along with the `price` to produce the `hash` during the commit phase.\n     */\n    function revealVote(\n        bytes32 identifier,\n        uint256 time,\n        int256 price,\n        bytes memory ancillaryData,\n        int256 salt\n    ) external onlyRoleHolder(uint256(Roles.Voter)) {\n        _getVotingAddress().revealVote(identifier, time, price, ancillaryData, salt);\n    }\n\n    /**\n     * @notice Forwards a batch reveal to Voting.\n     * @param reveals is an array of the Reveal struct which contains an identifier, time, price and salt.\n     */\n    function batchReveal(VotingAncillaryInterface.RevealAncillary[] calldata reveals)\n        external\n        onlyRoleHolder(uint256(Roles.Voter))\n    {\n        _getVotingAddress().batchReveal(reveals);\n    }\n\n    /**\n     * @notice Forwards a reward retrieval to Voting.\n     * @dev Rewards are added to the tokens already held by this contract.\n     * @param roundId defines the round from which voting rewards will be retrieved from.\n     * @param toRetrieve an array of PendingRequests which rewards are retrieved from.\n     * @return amount of rewards that the user should receive.\n     */\n    function retrieveRewards(uint256 roundId, VotingAncillaryInterface.PendingRequestAncillary[] memory toRetrieve)\n        public\n        onlyRoleHolder(uint256(Roles.Voter))\n        returns (FixedPoint.Unsigned memory)\n    {\n        return _getVotingAddress().retrieveRewards(address(this), roundId, toRetrieve);\n    }\n\n    function _getVotingAddress() private view returns (VotingAncillaryInterface) {\n        return VotingAncillaryInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\n    }\n}\n"
    },
    "contracts/UMA/common/test/WithdrawableTest.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../implementation/Withdrawable.sol\";\n\n// WithdrawableTest is derived from the abstract contract Withdrawable for testing purposes.\ncontract WithdrawableTest is Withdrawable {\n    enum Roles { Governance, Withdraw }\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor() {\n        _createExclusiveRole(uint256(Roles.Governance), uint256(Roles.Governance), msg.sender);\n        _createWithdrawRole(uint256(Roles.Withdraw), uint256(Roles.Governance), msg.sender);\n    }\n\n    function pay() external payable {\n        require(msg.value > 0);\n    }\n\n    function setInternalWithdrawRole(uint256 setRoleId) public {\n        _setWithdrawRole(setRoleId);\n    }\n}\n"
    },
    "contracts/UMA/common/test/MultiRoleTest.sol": {
      "content": "/*\n  MultiRoleTest contract.\n*/\n\n// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../implementation/MultiRole.sol\";\n\n// The purpose of this contract is to make the MultiRole creation methods externally callable for testing purposes.\ncontract MultiRoleTest is MultiRole {\n    function createSharedRole(\n        uint256 roleId,\n        uint256 managingRoleId,\n        address[] calldata initialMembers\n    ) external {\n        _createSharedRole(roleId, managingRoleId, initialMembers);\n    }\n\n    function createExclusiveRole(\n        uint256 roleId,\n        uint256 managingRoleId,\n        address initialMember\n    ) external {\n        _createExclusiveRole(roleId, managingRoleId, initialMember);\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    function revertIfNotHoldingRole(uint256 roleId) external view onlyRoleHolder(roleId) {}\n}\n"
    },
    "contracts/UMA/financial-templates/common/financial-product-libraries/long-short-pair-libraries/CoveredCallLongShortPairFinancialProductLibrary.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"./LongShortPairFinancialProductLibrary.sol\";\nimport \"../../../../common/implementation/Lockable.sol\";\n\n/**\n * @title Covered call Long Short Pair Financial Product Library.\n * @notice Adds settlement logic to create covered call LSPs. The contract will payout a scaled amount of collateral\n * depending on where the settlement price lands relative to the call's strike price. If the settlement is below the\n * strike price then longs expire worthless. If the settlement is above the strike then the payout is the fraction above\n * the strike defined by (expiryPrice - strikePrice) / expiryPrice. For example, consider a covered call option\n * collateralized in ETH, with a strike a price of 3000.\n * - If the price is less than 3000 then the each long is worth 0 and each short is worth collateralPerPair.\n * - If the price is more than 3000 then each long is worth the fraction of collateralPerPair that was in the money and\n * each short is worth the remaining collateralPerPair.\n * - Say settlement price is 3500.  Then expiryPercentLong = (3500 - 3000) / 3500 = 0.143. The value of this 0.143 ETH\n * is worth 0.143*3500=500 which is the percentage of the collateralPerPair that was above the strike price.\n */\ncontract CoveredCallLongShortPairFinancialProductLibrary is LongShortPairFinancialProductLibrary, Lockable {\n    using FixedPoint for FixedPoint.Unsigned;\n    using SafeMath for uint256;\n\n    mapping(address => uint256) public longShortPairStrikePrices;\n\n    /**\n     * @notice Enables any address to set the strike price for an associated LSP.\n     * @param longShortPair address of the LSP.\n     * @param strikePrice the strike price for the covered call for the associated LSP.\n     * @dev Note: a) Any address can set the initial strike price b) A strike price cannot be 0.\n     * c) A strike price can only be set once to prevent the deployer from changing the strike after the fact.\n     * d) For safety, a strike price should be set before depositing any synthetic tokens in a liquidity pool.\n     * e) longShortPair must expose an expirationTimestamp method to validate it is correctly deployed.\n     */\n    function setLongShortPairParameters(address longShortPair, uint256 strikePrice) public nonReentrant() {\n        require(ExpiringContractInterface(longShortPair).expirationTimestamp() != 0, \"Invalid LSP address\");\n        require(longShortPairStrikePrices[longShortPair] == 0, \"Parameters already set\");\n\n        longShortPairStrikePrices[longShortPair] = strikePrice;\n    }\n\n    /**\n     * @notice Returns a number between 0 and 1e18 to indicate how much collateral each long and short token are entitled\n     * to per collateralPerPair.\n     * @param expiryPrice price from the optimistic oracle for the LSP price identifier.\n     * @return expiryPercentLong to indicate how much collateral should be sent between long and short tokens.\n     */\n    function percentageLongCollateralAtExpiry(int256 expiryPrice)\n        public\n        view\n        override\n        nonReentrantView()\n        returns (uint256)\n    {\n        uint256 contractStrikePrice = longShortPairStrikePrices[msg.sender];\n        require(contractStrikePrice != 0, \"Params not set for calling LSP\");\n\n        // If the expiry price is less than the strike price then the long options expire worthless (out of the money).\n        // Note we do not consider negative expiry prices in this call option implementation.\n        if (expiryPrice < 0 || uint256(expiryPrice) < contractStrikePrice)\n            return FixedPoint.fromUnscaledUint(0).rawValue;\n\n        // Else, token expires to be worth the fraction of a collateral token that's in the money. eg if ETH is $3500\n        // and strike is $3000, long token is redeemable for (3500-3000)/3500 = 0.143 WETH which is worth $500 and the\n        // short token is worth the remaining 0.8. This is strictly < 1, tending to 1 as the expiry tends to infinity.\n        return\n            (FixedPoint.Unsigned(uint256(expiryPrice)).sub(FixedPoint.Unsigned(contractStrikePrice)))\n                .div(FixedPoint.Unsigned(uint256(expiryPrice)))\n                .rawValue;\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/common/financial-product-libraries/long-short-pair-libraries/SuccessTokenLongShortPairFinancialProductLibrary.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./LongShortPairFinancialProductLibrary.sol\";\nimport \"../../../../common/implementation/Lockable.sol\";\n\n/**\n * @title Success Token Long Short Pair Financial Product Library.\n * @notice Adds settlement logic to create success token LSPs. A success token pays out a fixed amount of\n * collateral as a floor, with the remaining amount functioning like an embedded option. The embedded\n * option in this case uses payout logic that resembles a covered call. I.e., the token expires to be worth\n * basePercentage + (1 - basePercentage) * (expiryPrice - strikePrice).\n */\ncontract SuccessTokenLongShortPairFinancialProductLibrary is LongShortPairFinancialProductLibrary, Lockable {\n    using FixedPoint for FixedPoint.Unsigned;\n\n    struct SuccessTokenLongShortPairParameters {\n        uint256 strikePrice;\n        uint256 basePercentage;\n    }\n\n    mapping(address => SuccessTokenLongShortPairParameters) public longShortPairParameters;\n\n    /**\n     * @notice Enables any address to set the strike price for an associated LSP.\n     * @param longShortPair address of the LSP.\n     * @param strikePrice the strike price for the covered call for the associated LSP.\n     * @param basePercentage the base percentage of collateral per pair paid out to long tokens, expressed\n     * with 1e18 decimals. E.g., a 50% base percentage should be expressed 500000000000000000, or 0.5 with\n     * 1e18 decimals. The base percentage cannot be set to 0.\n     * @dev Note: a) Any address can set the initial strike price b) A strike price cannot be 0.\n     * c) A strike price can only be set once to prevent the deployer from changing the strike after the fact.\n     * d) For safety, a strike price should be set before depositing any synthetic tokens in a liquidity pool.\n     * e) longShortPair must expose an expirationTimestamp method to validate it is correctly deployed.\n     */\n    function setLongShortPairParameters(\n        address longShortPair,\n        uint256 strikePrice,\n        uint256 basePercentage\n    ) public nonReentrant() {\n        require(ExpiringContractInterface(longShortPair).expirationTimestamp() != 0, \"Invalid LSP address\");\n        SuccessTokenLongShortPairParameters memory params = longShortPairParameters[longShortPair];\n        require(params.strikePrice == 0 && params.basePercentage == 0, \"Parameters already set\");\n        require(strikePrice != 0 && basePercentage != 0, \"Base percentage and strike price cannot be set to 0\");\n\n        longShortPairParameters[longShortPair] = SuccessTokenLongShortPairParameters({\n            strikePrice: strikePrice,\n            basePercentage: basePercentage\n        });\n    }\n\n    /**\n     * @notice Returns a number between 0 and 1e18 to indicate how much collateral each long and short token are entitled\n     * to per collateralPerPair.\n     * @param expiryPrice price from the optimistic oracle for the LSP price identifier.\n     * @return expiryPercentLong to indicate how much collateral should be sent between long and short tokens.\n     */\n    function percentageLongCollateralAtExpiry(int256 expiryPrice)\n        public\n        view\n        override\n        nonReentrantView()\n        returns (uint256)\n    {\n        SuccessTokenLongShortPairParameters memory params = longShortPairParameters[msg.sender];\n        require(params.strikePrice != 0 || params.basePercentage != 0, \"Params not set for calling LSP\");\n\n        // If the expiry price is less than the strike price then the long options expire worthless (out of the money).\n        // In this case, return of value of the base percentage to the long tokenholders.\n        // Note we do not consider negative expiry prices in this implementation.\n        uint256 positiveExpiryPrice = expiryPrice > 0 ? uint256(expiryPrice) : 0;\n        if (positiveExpiryPrice == 0 || positiveExpiryPrice <= params.strikePrice) return params.basePercentage;\n\n        // Else, token expires to be worth basePercentage + (1 - basePercentage) * (expiryPrice - strikePrice).\n        // E.g., if base percentage is 50%, $TOKEN is $30, and strike is $20, long token is redeemable for\n        // 0.5 + 0.5*(30-20)/30 = 0.6667%, which if the collateralPerPair is 2, is worth 1.3333 $TOKEN, which is\n        // worth $40 if 1 $TOKEN is worth $30. This return value is strictly < 1. The return value tends to 1 as\n        // the expiryPrice tends to infinity. Due to rounding down and precision errors, this may return a very\n        // slightly smaller value than expected.\n        return\n            (\n                FixedPoint.Unsigned(params.basePercentage).add(\n                    FixedPoint\n                        .Unsigned(1e18 - params.basePercentage)\n                        .mul(FixedPoint.Unsigned(positiveExpiryPrice).sub(FixedPoint.Unsigned(params.strikePrice)))\n                        .div(FixedPoint.Unsigned(positiveExpiryPrice))\n                )\n            )\n                .rawValue;\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/common/financial-product-libraries/long-short-pair-libraries/SimpleSuccessTokenLongShortPairFinancialProductLibrary.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./LongShortPairFinancialProductLibrary.sol\";\nimport \"../../../../common/implementation/Lockable.sol\";\n\n/**\n * @title Simple Success Token Long Short Pair Financial Product Library.\n * @notice Adds settlement logic to create success token LSPs. A success token pays out 50% of collateral as a\n * floor, with the remaining 50% functioning like an embedded covered call.\n * If the settlement is below the strike price then longs are worth 50% of collateral.\n * If the settlement is above the strike then the payout is equal to:\n * 0.5 + (0.5 * (expiryPrice - strikePrice) / expiryPrice)\n * For example, consider a covered call option collateralized in SUSHI, with a strike a price of $20,\n * and collateralPerPair of 2.\n * - If the price is less than $20 then the each long is worth 0.5 collateralPerPair and each short is worth 0.5\n * collateralPerPair. i.e., each long is worth 1 SUSHI (calls expire worthless).\n * - If the price is more than $20 then each long is worth 0.5 collateralPerPair plus 0.5 times the fraction of\n * collateralPerPair that was in the money, and each short is worth the remaining collateralPerPair.\n * - Say settlement price is $30.  Then expiryPercentLong = 0.5 + (0.5 * (30 - 20) / 30) = 0.6667.\n * If the collateralPerPair is 2, that means the long payout is 0.6667*2 = 1.3333 $SUSHI, which at a settlement\n * price of $30 is worth $40. This is equivalent to the value of 1 $SUSHI plus the value of the $20 strike\n * embedded call.\n */\ncontract SimpleSuccessTokenLongShortPairFinancialProductLibrary is LongShortPairFinancialProductLibrary, Lockable {\n    using FixedPoint for FixedPoint.Unsigned;\n\n    mapping(address => uint256) public longShortPairStrikePrices;\n    uint256 basePercentage = 500000000000000000; // 0.5 with 18 decimals\n    uint256 variablePercentage = uint256(1000000000000000000) - basePercentage;\n\n    /**\n     * @notice Enables any address to set the strike price for an associated LSP.\n     * @param longShortPair address of the LSP.\n     * @param strikePrice the strike price for the covered call for the associated LSP.\n     * @dev Note: a) Any address can set the initial strike price b) A strike price cannot be 0.\n     * c) A strike price can only be set once to prevent the deployer from changing the strike after the fact.\n     * d) For safety, a strike price should be set before depositing any synthetic tokens in a liquidity pool.\n     * e) longShortPair must expose an expirationTimestamp method to validate it is correctly deployed.\n     */\n    function setLongShortPairParameters(address longShortPair, uint256 strikePrice) public nonReentrant() {\n        require(ExpiringContractInterface(longShortPair).expirationTimestamp() != 0, \"Invalid LSP address\");\n        require(longShortPairStrikePrices[longShortPair] == 0, \"Parameters already set\");\n\n        longShortPairStrikePrices[longShortPair] = strikePrice;\n    }\n\n    /**\n     * @notice Returns a number between 0 and 1e18 to indicate how much collateral each long and short token are entitled\n     * to per collateralPerPair.\n     * @param expiryPrice price from the optimistic oracle for the LSP price identifier.\n     * @return expiryPercentLong to indicate how much collateral should be sent between long and short tokens.\n     */\n    function percentageLongCollateralAtExpiry(int256 expiryPrice)\n        public\n        view\n        override\n        nonReentrantView()\n        returns (uint256)\n    {\n        uint256 contractStrikePrice = longShortPairStrikePrices[msg.sender];\n        require(contractStrikePrice != 0, \"Params not set for calling LSP\");\n\n        // If the expiry price is less than the strike price then the long options expire worthless (out of the money).\n        // In this case, return of value of 50% (half of collateral goes to long)\n        // Note we do not consider negative expiry prices in this call option implementation.\n        uint256 positiveExpiryPrice = expiryPrice > 0 ? uint256(expiryPrice) : 0;\n        if (positiveExpiryPrice == 0 || uint256(positiveExpiryPrice) <= contractStrikePrice) return basePercentage;\n\n        // Else, token expires to be worth the 0.5 of the collateral plus 0.5 * the fraction of a collateral token\n        // that's in the money.\n        // eg if SUSHI is $30 and strike is $20, long token is redeemable for 0.5 + 0.5*(30-20)/30 = 0.6667% which if the\n        // collateralPerPair is 2, is worth 1.3333 $SUSHI, which is worth $40 if 1 $SUSHI is worth $30.\n        // This return value is strictly < 1, tending to 1 as the expiryPrice tends to infinity.\n        return\n            (\n                FixedPoint.Unsigned(basePercentage).add(\n                    FixedPoint\n                        .Unsigned(variablePercentage)\n                        .mul(\n                        FixedPoint.Unsigned(uint256(positiveExpiryPrice)).sub(FixedPoint.Unsigned(contractStrikePrice))\n                    )\n                        .div(FixedPoint.Unsigned(uint256(positiveExpiryPrice)))\n                )\n            )\n                .rawValue;\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/common/financial-product-libraries/long-short-pair-libraries/LinearLongShortPairFinancialProductLibrary.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\";\n\nimport \"./LongShortPairFinancialProductLibrary.sol\";\nimport \"../../../../common/implementation/Lockable.sol\";\n\n/**\n * @title Linear Long Short Pair Financial Product Library.\n * @notice Adds settlement logic to create linear LSPs. The contract will payout a scaled amount of collateral\n * depending on where the settlement price lands within a price range between an upperBound and a lowerBound. If\n * settlement price is within the price range then the expiryPercentLong is defined by\n * (expiryPrice - lowerBound) / (upperBound - lowerBound). This number represent the amount of collateral from the\n * collateralPerPair that will be sent to the long and short side. If the price is higher than the upperBound then\n * expiryPercentLong = 1. if the price is lower than the lower bound then expiryPercentLong = 0. For example, consider\n * a linear LSP on the price of ETH collateralized in USDC with an upperBound = 4000 and lowerBound = 2000 with a\n * collateralPerPair of 1000 (i.e each pair of long and shorts is worth 1000 USDC). At settlement the expiryPercentLong\n * would equal 1 (each long worth 1000 and short worth 0) if ETH price was > 4000 and it would equal 0 if < 2000\n * (each long is worthless and each short is worth 1000). If between the two (say 3500) then expiryPercentLong\n * = (3500 - 2000) / (4000 - 2000) = 0.75. Therefore each long is worth 750 and each short is worth 250.\n */\ncontract LinearLongShortPairFinancialProductLibrary is LongShortPairFinancialProductLibrary, Lockable {\n    using FixedPoint for FixedPoint.Unsigned;\n    using SignedSafeMath for int256;\n\n    struct LinearLongShortPairParameters {\n        int256 upperBound;\n        int256 lowerBound;\n    }\n\n    mapping(address => LinearLongShortPairParameters) public longShortPairParameters;\n\n    /**\n     * @notice Enables any address to set the parameters for an associated financial product.\n     * @param longShortPair address of the LSP contract.\n     * @param upperBound the upper price that the linear LSP will operate within.\n     * @param lowerBound the lower price that the linear LSP will operate within.\n     * @dev Note: a) Any address can set these parameters b) existing LSP parameters for address not set.\n     * c) upperBound > lowerBound.\n     * d) parameters can only be set once to prevent the deployer from changing the parameters after the fact.\n     * e) For safety, parameters should be set before depositing any synthetic tokens in a liquidity pool.\n     * f) longShortPair must expose an expirationTimestamp method to validate it is correctly deployed.\n     */\n    function setLongShortPairParameters(\n        address longShortPair,\n        int256 upperBound,\n        int256 lowerBound\n    ) public nonReentrant() {\n        require(ExpiringContractInterface(longShortPair).expirationTimestamp() != 0, \"Invalid LSP address\");\n        require(upperBound > lowerBound, \"Invalid bounds\");\n\n        LinearLongShortPairParameters memory params = longShortPairParameters[longShortPair];\n        require(params.upperBound == 0 && params.lowerBound == 0, \"Parameters already set\");\n\n        longShortPairParameters[longShortPair] = LinearLongShortPairParameters({\n            upperBound: upperBound,\n            lowerBound: lowerBound\n        });\n    }\n\n    /**\n     * @notice Returns a number between 0 and 1e18 to indicate how much collateral each long and short token is entitled\n     * to per collateralPerPair.\n     * @param expiryPrice price from the optimistic oracle for the LSP price identifier.\n     * @return expiryPercentLong to indicate how much collateral should be sent between long and short tokens.\n     */\n    function percentageLongCollateralAtExpiry(int256 expiryPrice)\n        public\n        view\n        override\n        nonReentrantView()\n        returns (uint256)\n    {\n        LinearLongShortPairParameters memory params = longShortPairParameters[msg.sender];\n        require(params.upperBound != 0 || params.lowerBound != 0, \"Params not set for calling LSP\");\n\n        if (expiryPrice >= params.upperBound) return FixedPoint.fromUnscaledUint(1).rawValue;\n\n        if (expiryPrice <= params.lowerBound) return FixedPoint.fromUnscaledUint(0).rawValue;\n\n        // if not exceeding bounds, expiryPercentLong = (expiryPrice - lowerBound) / (upperBound - lowerBound)\n        return\n            FixedPoint\n                .Unsigned(uint256(expiryPrice - params.lowerBound))\n                .div(FixedPoint.Unsigned(uint256(params.upperBound - params.lowerBound)))\n                .rawValue;\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/common/financial-product-libraries/long-short-pair-libraries/CappedYieldDollarLongShortPairFinancialProductLibrary.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"./LongShortPairFinancialProductLibrary.sol\";\nimport \"../../../../common/implementation/Lockable.sol\";\n\n/**\n * @title Capped Yield Dollar Long Short Pair Financial Product Library\n * @notice Adds settlement logic to create Yield Dollar LSPs. A range bond is the combination of a Yield dollar and short\n * put option enabling the token sponsor to issue structured products to unlock DeFi treasuries. This library is like\n * a Range Bond, but with no embedded call option.\n * A Capped Yield Dollar is defined as = Yield Dollar - Put Option. In order for the Capped Yield Dollar to be fully\n * collateralized and non-liquidatable, there is a low price for the collateral token below which the Capped Yield Dollar\n * will be worth < $1.\n * Numerically this is found using:\n * N = Notional of bond\n * P = price of token\n * T = number of tokens\n * R1 = low price range\n * C = collateral per pair, should be N/R1\n * T = min(1,(R1/P)*C)\n * If you want a yield dollar denominated as N = $1, you should set C to 1/R1. In that case, T = min(1,1/P).\n * - At any price below the low price range (R1) the long side effectively holds a fixed number of collateral equal to\n * collateralPerPair from the LSP with the value of expiryPercentLong = 1. This is the max payout in collateral.\n * - Any price equal to or above R1 gives a payout equivalent to a yield dollar (bond) of notional N. In this range the\n * expiryPercentLong shifts to keep the payout in dollar terms equal to the bond notional.\n * With this equation, the contract deployer does not need to specify the bond notional N. The notional can be calculated\n * by taking R1*collateralPerPair from the LSP.\n */\ncontract CappedYieldDollarLongShortPairFinancialProductLibrary is LongShortPairFinancialProductLibrary, Lockable {\n    using FixedPoint for FixedPoint.Unsigned;\n\n    mapping(address => uint256) public lowPriceRanges;\n\n    /**\n     * @notice Enables any address to set the low price range for an associated financial product.\n     * @param longShortPair address of the LSP contract.\n     * @param lowPriceRange low price range below which the payout transforms from a yield dollar to a short put option.\n     * @dev above the lowPriceRange the contract will payout a fixed amount of\n     * lowPriceRange*collateralPerPair (i.e the \"notional\" of the yield dollar).\n     * @dev Note: a) Any address can set these parameters b) existing LSP parameters for address not set.\n     * c) low price range can only be set once to prevent the deployer from changing the parameters after the fact.\n     * d) For safety, a low price range should be set before depositing any synthetic tokens in a liquidity pool.\n     * e) longShortPair must expose an expirationTimestamp method to validate it is correctly deployed.\n     */\n    function setLongShortPairParameters(address longShortPair, uint256 lowPriceRange) public nonReentrant() {\n        require(ExpiringContractInterface(longShortPair).expirationTimestamp() != 0, \"Invalid LSP address\");\n        require(lowPriceRanges[longShortPair] == 0, \"Parameters already set\");\n\n        lowPriceRanges[longShortPair] = lowPriceRange;\n    }\n\n    /**\n     * @notice Returns a number between 0 and 1e18 to indicate how much collateral each long and short token are\n     * entitled to per collateralPerPair.\n     * @param expiryPrice price from the optimistic oracle for the LSP price identifier.\n     * @return expiryPercentLong to indicate how much collateral should be sent between long and short tokens.\n     */\n    function percentageLongCollateralAtExpiry(int256 expiryPrice)\n        public\n        view\n        override\n        nonReentrantView()\n        returns (uint256)\n    {\n        uint256 contractLowPriceRange = lowPriceRanges[msg.sender];\n        require(contractLowPriceRange != 0, \"Params not set for calling LSP\");\n\n        // This function returns a value between 0 and 1e18 to be used in conjunction with the LSP collateralPerPair\n        // that allocates collateral between the short and long tokens on expiry. This can be simplified by considering\n        // the price in two discrete ranges: 1) below the low price range, 2) above the low price range.\n        uint256 positiveExpiryPrice = expiryPrice > 0 ? uint256(expiryPrice) : 0;\n\n        // For expiry prices below lower bound, return expiryPercentLong = 1 (full position)\n        if (positiveExpiryPrice <= contractLowPriceRange) return FixedPoint.fromUnscaledUint(1).rawValue;\n        // For expiry prices above lower bound. For example, if the lower bound of Sushi is $4, collateral per pair\n        // is 0.25, and the expiry price is $12, the payout will be (4/12)*0.25, or .08333 Sushi. With Sushi at $12,\n        // .08333 Sushi is equal to $1.\n        return FixedPoint.Unsigned(contractLowPriceRange).div(FixedPoint.Unsigned(positiveExpiryPrice)).rawValue;\n    }\n}\n"
    },
    "contracts/UMA/financial-templates/common/financial-product-libraries/long-short-pair-libraries/BinaryOptionLongShortPairFinancialProductLibrary.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"./LongShortPairFinancialProductLibrary.sol\";\nimport \"../../../../common/implementation/Lockable.sol\";\n\n/**\n * @title Binary Option Long Short Pair Financial Product Library.\n * @notice Adds settlement logic to binary option LSPs. Binary options settle with all collateral allocated to\n * either the long or short side, depending on the settlement price. They can be used to make prediction markets or any\n * kind of binary bet. Settlement is defined using a strike price which informs which side of the bet was correct. If\n * settlement price is greater or equal to the strike then all value is sent to the long side. Otherwise, all value\n * is sent to the short side. The settlement price could be a scalar (like the price of ETH) or a binary bet with\n * settlement being 0 or 1 depending on the outcome.\n */\ncontract BinaryOptionLongShortPairFinancialProductLibrary is LongShortPairFinancialProductLibrary, Lockable {\n    using FixedPoint for FixedPoint.Unsigned;\n    using SafeMath for uint256;\n\n    struct BinaryLongShortPairParameters {\n        bool isSet;\n        int256 strikePrice;\n    }\n\n    mapping(address => BinaryLongShortPairParameters) public longShortPairParameters;\n\n    /**\n     * @notice Enables any address to set the strike price for an associated binary option.\n     * @param longShortPair address of the LSP.\n     * @param strikePrice the strike price for the binary option.\n     * @dev Note: a) Any address can set the initial strike price b) A strike can be 0.\n     * c) A strike price can only be set once to prevent the deployer from changing the strike after the fact.\n     * d) For safety, a strike price should be set before depositing any synthetic tokens in a liquidity pool.\n     * e) longShortPair must expose an expirationTimestamp method to validate it is correctly deployed.\n     */\n    function setLongShortPairParameters(address longShortPair, int256 strikePrice) public nonReentrant() {\n        require(ExpiringContractInterface(longShortPair).expirationTimestamp() != 0, \"Invalid LSP address\");\n        require(!longShortPairParameters[longShortPair].isSet, \"Parameters already set\");\n\n        longShortPairParameters[longShortPair] = BinaryLongShortPairParameters({\n            isSet: true,\n            strikePrice: strikePrice\n        });\n    }\n\n    /**\n     * @notice Returns a number between 0 and 1e18 to indicate how much collateral each long and short token are entitled\n     * to per collateralPerPair.\n     * @param expiryPrice price from the optimistic oracle for the LSP price identifier.\n     * @return expiryPercentLong to indicate how much collateral should be sent between long and short tokens.\n     */\n    function percentageLongCollateralAtExpiry(int256 expiryPrice)\n        public\n        view\n        override\n        nonReentrantView()\n        returns (uint256)\n    {\n        BinaryLongShortPairParameters memory params = longShortPairParameters[msg.sender];\n        require(params.isSet, \"Params not set for calling LSP\");\n\n        if (expiryPrice >= params.strikePrice) return FixedPoint.fromUnscaledUint(1).rawValue;\n        else return FixedPoint.fromUnscaledUint(0).rawValue;\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/test/ResultComputationTest.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../ResultComputation.sol\";\nimport \"../../../common/implementation/FixedPoint.sol\";\n\n// Wraps the library ResultComputation for testing purposes.\ncontract ResultComputationTest {\n    using ResultComputation for ResultComputation.Data;\n\n    ResultComputation.Data public data;\n\n    function wrapAddVote(int256 votePrice, uint256 numberTokens) external {\n        data.addVote(votePrice, FixedPoint.Unsigned(numberTokens));\n    }\n\n    function wrapGetResolvedPrice(uint256 minVoteThreshold) external view returns (bool isResolved, int256 price) {\n        return data.getResolvedPrice(FixedPoint.Unsigned(minVoteThreshold));\n    }\n\n    function wrapWasVoteCorrect(bytes32 revealHash) external view returns (bool) {\n        return data.wasVoteCorrect(revealHash);\n    }\n\n    function wrapGetTotalCorrectlyVotedTokens() external view returns (uint256) {\n        return data.getTotalCorrectlyVotedTokens().rawValue;\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/IdentifierWhitelist.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IdentifierWhitelistInterface.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title Stores a whitelist of supported identifiers that the oracle can provide prices for.\n */\ncontract IdentifierWhitelist is IdentifierWhitelistInterface, Ownable {\n    /****************************************\n     *     INTERNAL VARIABLES AND STORAGE   *\n     ****************************************/\n\n    mapping(bytes32 => bool) private supportedIdentifiers;\n\n    /****************************************\n     *                EVENTS                *\n     ****************************************/\n\n    event SupportedIdentifierAdded(bytes32 indexed identifier);\n    event SupportedIdentifierRemoved(bytes32 indexed identifier);\n\n    /****************************************\n     *    ADMIN STATE MODIFYING FUNCTIONS   *\n     ****************************************/\n\n    /**\n     * @notice Adds the provided identifier as a supported identifier.\n     * @dev Price requests using this identifier will succeed after this call.\n     * @param identifier unique UTF-8 representation for the feed being added. Eg: BTC/USD.\n     */\n    function addSupportedIdentifier(bytes32 identifier) external override onlyOwner {\n        if (!supportedIdentifiers[identifier]) {\n            supportedIdentifiers[identifier] = true;\n            emit SupportedIdentifierAdded(identifier);\n        }\n    }\n\n    /**\n     * @notice Removes the identifier from the whitelist.\n     * @dev Price requests using this identifier will no longer succeed after this call.\n     * @param identifier unique UTF-8 representation for the feed being removed. Eg: BTC/USD.\n     */\n    function removeSupportedIdentifier(bytes32 identifier) external override onlyOwner {\n        if (supportedIdentifiers[identifier]) {\n            supportedIdentifiers[identifier] = false;\n            emit SupportedIdentifierRemoved(identifier);\n        }\n    }\n\n    /****************************************\n     *     WHITELIST GETTERS FUNCTIONS      *\n     ****************************************/\n\n    /**\n     * @notice Checks whether an identifier is on the whitelist.\n     * @param identifier unique UTF-8 representation for the feed being queried. Eg: BTC/USD.\n     * @return bool if the identifier is supported (or not).\n     */\n    function isIdentifierSupported(bytes32 identifier) external view override returns (bool) {\n        return supportedIdentifiers[identifier];\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/test/MockAdministratee.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/AdministrateeInterface.sol\";\n\n// A mock implementation of AdministrateeInterface, taking the place of a financial contract.\ncontract MockAdministratee is AdministrateeInterface {\n    uint256 public timesRemargined;\n    uint256 public timesEmergencyShutdown;\n\n    function remargin() external override {\n        timesRemargined++;\n    }\n\n    function emergencyShutdown() external override {\n        timesEmergencyShutdown++;\n    }\n\n    function pfc() external pure override returns (FixedPoint.Unsigned memory) {\n        return FixedPoint.fromUnscaledUint(0);\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/FinancialContractsAdmin.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interfaces/AdministrateeInterface.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title Admin for financial contracts in the UMA system.\n * @dev Allows appropriately permissioned admin roles to interact with financial contracts.\n */\ncontract FinancialContractsAdmin is Ownable {\n    /**\n     * @notice Calls emergency shutdown on the provided financial contract.\n     * @param financialContract address of the FinancialContract to be shut down.\n     */\n    function callEmergencyShutdown(address financialContract) external onlyOwner {\n        AdministrateeInterface administratee = AdministrateeInterface(financialContract);\n        administratee.emergencyShutdown();\n    }\n\n    /**\n     * @notice Calls remargin on the provided financial contract.\n     * @param financialContract address of the FinancialContract to be remargined.\n     */\n    function callRemargin(address financialContract) external onlyOwner {\n        AdministrateeInterface administratee = AdministrateeInterface(financialContract);\n        administratee.remargin();\n    }\n}\n"
    },
    "contracts/UMA/common/test/VaultMock.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interfaces/VaultInterface.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Mock for yearn-style vaults for use in tests.\n */\ncontract VaultMock is VaultInterface {\n    IERC20 public override token;\n    uint256 private pricePerFullShare = 0;\n\n    constructor(IERC20 _token) {\n        token = _token;\n    }\n\n    function getPricePerFullShare() external view override returns (uint256) {\n        return pricePerFullShare;\n    }\n\n    function setPricePerFullShare(uint256 _pricePerFullShare) external {\n        pricePerFullShare = _pricePerFullShare;\n    }\n}\n"
    },
    "contracts/UMA/common/interfaces/VaultInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Interface for Yearn-style vaults.\n * @dev This only contains the methods/events that we use in our contracts or offchain infrastructure.\n */\nabstract contract VaultInterface {\n    // Return the underlying token.\n    function token() external view virtual returns (IERC20);\n\n    // Gets the number of return tokens that a \"share\" of this vault is worth.\n    function getPricePerFullShare() external view virtual returns (uint256);\n}\n"
    },
    "contracts/UMA/common/test/HarvestVaultMock.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interfaces/HarvestVaultInterface.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Mock for Harvest-style vaults for use in tests.\n */\ncontract HarvestVaultMock is HarvestVaultInterface {\n    IERC20 public override underlying;\n    uint256 private pricePerFullShare = 0;\n\n    constructor(IERC20 _underlying) {\n        underlying = _underlying;\n    }\n\n    function getPricePerFullShare() external view override returns (uint256) {\n        return pricePerFullShare;\n    }\n\n    function setPricePerFullShare(uint256 _pricePerFullShare) external {\n        pricePerFullShare = _pricePerFullShare;\n    }\n}\n"
    },
    "contracts/UMA/common/interfaces/HarvestVaultInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Interface for Harvest-style vaults.\n * @dev This only contains the methods/events that we use in our contracts or offchain infrastructure.\n */\nabstract contract HarvestVaultInterface {\n    // Return the underlying token.\n    function underlying() external view virtual returns (IERC20);\n\n    // Gets the number of return tokens that a \"share\" of this vault is worth.\n    function getPricePerFullShare() external view virtual returns (uint256);\n}\n"
    },
    "contracts/UMA/common/test/BasicERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Implements only the required ERC20 methods. This contract is used\n * test how contracts handle ERC20 contracts that have not implemented `decimals()`\n * @dev Mostly copied from Consensys EIP-20 implementation:\n * https://github.com/ConsenSys/Tokens/blob/fdf687c69d998266a95f15216b1955a4965a0a6d/contracts/eip20/EIP20.sol\n */\ncontract BasicERC20 is IERC20 {\n    uint256 private constant MAX_UINT256 = 2**256 - 1;\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) public allowed;\n\n    uint256 private _totalSupply;\n\n    constructor(uint256 _initialAmount) {\n        balances[msg.sender] = _initialAmount;\n        _totalSupply = _initialAmount;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function transfer(address _to, uint256 _value) public override returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) public override returns (bool success) {\n        uint256 _allowance = allowed[_from][msg.sender];\n        require(balances[_from] >= _value && _allowance >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        if (_allowance < MAX_UINT256) {\n            allowed[_from][msg.sender] -= _value;\n        }\n        emit Transfer(_from, _to, _value); //solhint-disable-line indent, no-unused-vars\n        return true;\n    }\n\n    function balanceOf(address _owner) public view override returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public override returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view override returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n"
    },
    "contracts/UMA/common/test/AncillaryDataTest.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../implementation/AncillaryData.sol\";\n\ncontract AncillaryDataTest {\n    function toUtf8BytesAddress(address x) external pure returns (bytes memory) {\n        return AncillaryData.toUtf8BytesAddress(x);\n    }\n\n    function toUtf8BytesUint(uint256 v) external pure returns (bytes memory) {\n        return AncillaryData.toUtf8BytesUint(v);\n    }\n\n    function appendKeyValueAddress(\n        bytes memory currentAncillaryData,\n        bytes memory key,\n        address value\n    ) external pure returns (bytes memory) {\n        return AncillaryData.appendKeyValueAddress(currentAncillaryData, key, value);\n    }\n\n    function appendKeyValueBytes32(\n        bytes memory currentAncillaryData,\n        bytes memory key,\n        bytes32 value\n    ) external pure returns (bytes memory) {\n        return AncillaryData.appendKeyValueBytes32(currentAncillaryData, key, value);\n    }\n\n    function appendKeyValueUint(\n        bytes memory currentAncillaryData,\n        bytes memory key,\n        uint256 value\n    ) external pure returns (bytes memory) {\n        return AncillaryData.appendKeyValueUint(currentAncillaryData, key, value);\n    }\n\n    function constructPrefix(bytes memory currentAncillaryData, bytes memory key) external pure returns (bytes memory) {\n        return AncillaryData.constructPrefix(currentAncillaryData, key);\n    }\n}\n"
    },
    "contracts/UMA/common/implementation/HasFinder.sol": {
      "content": "pragma solidity ^0.8.9;\n\n// SPDX-License-Identifier: UNLICENSED\nimport \"../../oracle/interfaces/FinderInterface.sol\";\n\n// Contract stores a reference to the DVM Finder contract which can be used to locate other important DVM contracts.\ncontract HasFinder {\n    FinderInterface public finder;\n\n    constructor(address _finder) {\n        finder = FinderInterface(_finder);\n    }\n}\n"
    },
    "contracts/UMA/common/test/TestableTest.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../implementation/Testable.sol\";\n\n// TestableTest is derived from the abstract contract Testable for testing purposes.\ncontract TestableTest is Testable {\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address _timerAddress) Testable(_timerAddress) {}\n\n    function getTestableTimeAndBlockTime() external view returns (uint256 testableTime, uint256 blockTime) {\n        // solhint-disable-next-line not-rely-on-time\n        return (getCurrentTime(), block.timestamp);\n    }\n}\n"
    },
    "contracts/UMA/oracle/implementation/test/VoteTimingV2Test.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/VotingInterface.sol\";\nimport \"../VoteTimingV2.sol\";\n\n// Wraps the library VoteTiming for testing purposes.\ncontract VoteTimingV2Test {\n    using VoteTimingV2 for VoteTimingV2.Data;\n\n    VoteTimingV2.Data public voteTiming;\n\n    constructor(uint256 phaseLength, uint256 minRollToNextRoundLength) {\n        wrapInit(phaseLength, minRollToNextRoundLength);\n    }\n\n    function wrapComputeCurrentRoundId(uint256 currentTime) external view returns (uint256) {\n        return voteTiming.computeCurrentRoundId(currentTime);\n    }\n\n    function wrapComputeCurrentPhase(uint256 currentTime) external view returns (VotingAncillaryInterface.Phase) {\n        return voteTiming.computeCurrentPhase(currentTime);\n    }\n\n    function wrapComputeRoundToVoteOnPriceRequest(uint256 currentTime) external view returns (uint256) {\n        return voteTiming.computeRoundToVoteOnPriceRequest(currentTime);\n    }\n\n    function wrapComputeRoundEndTime(uint256 roundId) external view returns (uint256) {\n        return voteTiming.computeRoundEndTime(roundId);\n    }\n\n    function wrapInit(uint256 phaseLength, uint256 minRollToNextRoundLength) public {\n        voteTiming.init(phaseLength, minRollToNextRoundLength);\n    }\n}\n"
    },
    "contracts/UMA/common/test/UnsignedFixedPointTest.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../implementation/FixedPoint.sol\";\n\n// Wraps the FixedPoint library for testing purposes.\ncontract UnsignedFixedPointTest {\n    using FixedPoint for FixedPoint.Unsigned;\n    using FixedPoint for uint256;\n    using SafeMath for uint256;\n\n    function wrapFromUnscaledUint(uint256 a) external pure returns (uint256) {\n        return FixedPoint.fromUnscaledUint(a).rawValue;\n    }\n\n    function wrapIsEqual(uint256 a, uint256 b) external pure returns (bool) {\n        return FixedPoint.Unsigned(a).isEqual(FixedPoint.Unsigned(b));\n    }\n\n    function wrapMixedIsEqual(uint256 a, uint256 b) external pure returns (bool) {\n        return FixedPoint.Unsigned(a).isEqual(b);\n    }\n\n    function wrapIsGreaterThan(uint256 a, uint256 b) external pure returns (bool) {\n        return FixedPoint.Unsigned(a).isGreaterThan(FixedPoint.Unsigned(b));\n    }\n\n    function wrapIsGreaterThanOrEqual(uint256 a, uint256 b) external pure returns (bool) {\n        return FixedPoint.Unsigned(a).isGreaterThanOrEqual(FixedPoint.Unsigned(b));\n    }\n\n    function wrapMixedIsGreaterThan(uint256 a, uint256 b) external pure returns (bool) {\n        return FixedPoint.Unsigned(a).isGreaterThan(b);\n    }\n\n    function wrapMixedIsGreaterThanOrEqual(uint256 a, uint256 b) external pure returns (bool) {\n        return FixedPoint.Unsigned(a).isGreaterThanOrEqual(b);\n    }\n\n    function wrapMixedIsGreaterThanOpposite(uint256 a, uint256 b) external pure returns (bool) {\n        return a.isGreaterThan(FixedPoint.Unsigned(b));\n    }\n\n    function wrapMixedIsGreaterThanOrEqualOpposite(uint256 a, uint256 b) external pure returns (bool) {\n        return a.isGreaterThanOrEqual(FixedPoint.Unsigned(b));\n    }\n\n    function wrapIsLessThan(uint256 a, uint256 b) external pure returns (bool) {\n        return FixedPoint.Unsigned(a).isLessThan(FixedPoint.Unsigned(b));\n    }\n\n    function wrapIsLessThanOrEqual(uint256 a, uint256 b) external pure returns (bool) {\n        return FixedPoint.Unsigned(a).isLessThanOrEqual(FixedPoint.Unsigned(b));\n    }\n\n    function wrapMixedIsLessThan(uint256 a, uint256 b) external pure returns (bool) {\n        return FixedPoint.Unsigned(a).isLessThan(b);\n    }\n\n    function wrapMixedIsLessThanOrEqual(uint256 a, uint256 b) external pure returns (bool) {\n        return FixedPoint.Unsigned(a).isLessThanOrEqual(b);\n    }\n\n    function wrapMixedIsLessThanOpposite(uint256 a, uint256 b) external pure returns (bool) {\n        return a.isLessThan(FixedPoint.Unsigned(b));\n    }\n\n    function wrapMixedIsLessThanOrEqualOpposite(uint256 a, uint256 b) external pure returns (bool) {\n        return a.isLessThanOrEqual(FixedPoint.Unsigned(b));\n    }\n\n    function wrapMin(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).min(FixedPoint.Unsigned(b)).rawValue;\n    }\n\n    function wrapMax(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).max(FixedPoint.Unsigned(b)).rawValue;\n    }\n\n    function wrapAdd(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).add(FixedPoint.Unsigned(b)).rawValue;\n    }\n\n    // The first uint256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapMixedAdd(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).add(b).rawValue;\n    }\n\n    function wrapSub(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).sub(FixedPoint.Unsigned(b)).rawValue;\n    }\n\n    // The first uint256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapMixedSub(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).sub(b).rawValue;\n    }\n\n    // The second uint256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapMixedSubOpposite(uint256 a, uint256 b) external pure returns (uint256) {\n        return a.sub(FixedPoint.Unsigned(b)).rawValue;\n    }\n\n    function wrapMul(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).mul(FixedPoint.Unsigned(b)).rawValue;\n    }\n\n    function wrapMulCeil(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).mulCeil(FixedPoint.Unsigned(b)).rawValue;\n    }\n\n    // The first uint256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapMixedMul(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).mul(b).rawValue;\n    }\n\n    function wrapMixedMulCeil(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).mulCeil(b).rawValue;\n    }\n\n    function wrapDiv(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).div(FixedPoint.Unsigned(b)).rawValue;\n    }\n\n    function wrapDivCeil(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).divCeil(FixedPoint.Unsigned(b)).rawValue;\n    }\n\n    // The first uint256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapMixedDiv(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).div(b).rawValue;\n    }\n\n    function wrapMixedDivCeil(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).divCeil(b).rawValue;\n    }\n\n    // The second uint256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapMixedDivOpposite(uint256 a, uint256 b) external pure returns (uint256) {\n        return a.div(FixedPoint.Unsigned(b)).rawValue;\n    }\n\n    // The first uint256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapPow(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).pow(b).rawValue;\n    }\n}\n"
    },
    "contracts/UMA/common/test/SignedFixedPointTest.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../implementation/FixedPoint.sol\";\n\n// Wraps the FixedPoint library for testing purposes.\ncontract SignedFixedPointTest {\n    using FixedPoint for FixedPoint.Signed;\n    using FixedPoint for int256;\n    using SafeMath for int256;\n\n    function wrapFromSigned(int256 a) external pure returns (uint256) {\n        return FixedPoint.fromSigned(FixedPoint.Signed(a)).rawValue;\n    }\n\n    function wrapFromUnsigned(uint256 a) external pure returns (int256) {\n        return FixedPoint.fromUnsigned(FixedPoint.Unsigned(a)).rawValue;\n    }\n\n    function wrapFromUnscaledInt(int256 a) external pure returns (int256) {\n        return FixedPoint.fromUnscaledInt(a).rawValue;\n    }\n\n    function wrapIsEqual(int256 a, int256 b) external pure returns (bool) {\n        return FixedPoint.Signed(a).isEqual(FixedPoint.Signed(b));\n    }\n\n    function wrapMixedIsEqual(int256 a, int256 b) external pure returns (bool) {\n        return FixedPoint.Signed(a).isEqual(b);\n    }\n\n    function wrapIsGreaterThan(int256 a, int256 b) external pure returns (bool) {\n        return FixedPoint.Signed(a).isGreaterThan(FixedPoint.Signed(b));\n    }\n\n    function wrapIsGreaterThanOrEqual(int256 a, int256 b) external pure returns (bool) {\n        return FixedPoint.Signed(a).isGreaterThanOrEqual(FixedPoint.Signed(b));\n    }\n\n    function wrapMixedIsGreaterThan(int256 a, int256 b) external pure returns (bool) {\n        return FixedPoint.Signed(a).isGreaterThan(b);\n    }\n\n    function wrapMixedIsGreaterThanOrEqual(int256 a, int256 b) external pure returns (bool) {\n        return FixedPoint.Signed(a).isGreaterThanOrEqual(b);\n    }\n\n    function wrapMixedIsGreaterThanOpposite(int256 a, int256 b) external pure returns (bool) {\n        return a.isGreaterThan(FixedPoint.Signed(b));\n    }\n\n    function wrapMixedIsGreaterThanOrEqualOpposite(int256 a, int256 b) external pure returns (bool) {\n        return a.isGreaterThanOrEqual(FixedPoint.Signed(b));\n    }\n\n    function wrapIsLessThan(int256 a, int256 b) external pure returns (bool) {\n        return FixedPoint.Signed(a).isLessThan(FixedPoint.Signed(b));\n    }\n\n    function wrapIsLessThanOrEqual(int256 a, int256 b) external pure returns (bool) {\n        return FixedPoint.Signed(a).isLessThanOrEqual(FixedPoint.Signed(b));\n    }\n\n    function wrapMixedIsLessThan(int256 a, int256 b) external pure returns (bool) {\n        return FixedPoint.Signed(a).isLessThan(b);\n    }\n\n    function wrapMixedIsLessThanOrEqual(int256 a, int256 b) external pure returns (bool) {\n        return FixedPoint.Signed(a).isLessThanOrEqual(b);\n    }\n\n    function wrapMixedIsLessThanOpposite(int256 a, int256 b) external pure returns (bool) {\n        return a.isLessThan(FixedPoint.Signed(b));\n    }\n\n    function wrapMixedIsLessThanOrEqualOpposite(int256 a, int256 b) external pure returns (bool) {\n        return a.isLessThanOrEqual(FixedPoint.Signed(b));\n    }\n\n    function wrapMin(int256 a, int256 b) external pure returns (int256) {\n        return FixedPoint.Signed(a).min(FixedPoint.Signed(b)).rawValue;\n    }\n\n    function wrapMax(int256 a, int256 b) external pure returns (int256) {\n        return FixedPoint.Signed(a).max(FixedPoint.Signed(b)).rawValue;\n    }\n\n    function wrapAdd(int256 a, int256 b) external pure returns (int256) {\n        return FixedPoint.Signed(a).add(FixedPoint.Signed(b)).rawValue;\n    }\n\n    // The first int256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapMixedAdd(int256 a, int256 b) external pure returns (int256) {\n        return FixedPoint.Signed(a).add(b).rawValue;\n    }\n\n    function wrapSub(int256 a, int256 b) external pure returns (int256) {\n        return FixedPoint.Signed(a).sub(FixedPoint.Signed(b)).rawValue;\n    }\n\n    // The first int256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapMixedSub(int256 a, int256 b) external pure returns (int256) {\n        return FixedPoint.Signed(a).sub(b).rawValue;\n    }\n\n    // The second int256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapMixedSubOpposite(int256 a, int256 b) external pure returns (int256) {\n        return a.sub(FixedPoint.Signed(b)).rawValue;\n    }\n\n    function wrapMul(int256 a, int256 b) external pure returns (int256) {\n        return FixedPoint.Signed(a).mul(FixedPoint.Signed(b)).rawValue;\n    }\n\n    function wrapMulAwayFromZero(int256 a, int256 b) external pure returns (int256) {\n        return FixedPoint.Signed(a).mulAwayFromZero(FixedPoint.Signed(b)).rawValue;\n    }\n\n    // The first int256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapMixedMul(int256 a, int256 b) external pure returns (int256) {\n        return FixedPoint.Signed(a).mul(b).rawValue;\n    }\n\n    function wrapMixedMulAwayFromZero(int256 a, int256 b) external pure returns (int256) {\n        return FixedPoint.Signed(a).mulAwayFromZero(b).rawValue;\n    }\n\n    function wrapDiv(int256 a, int256 b) external pure returns (int256) {\n        return FixedPoint.Signed(a).div(FixedPoint.Signed(b)).rawValue;\n    }\n\n    function wrapDivAwayFromZero(int256 a, int256 b) external pure returns (int256) {\n        return FixedPoint.Signed(a).divAwayFromZero(FixedPoint.Signed(b)).rawValue;\n    }\n\n    // The first int256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapMixedDiv(int256 a, int256 b) external pure returns (int256) {\n        return FixedPoint.Signed(a).div(b).rawValue;\n    }\n\n    function wrapMixedDivAwayFromZero(int256 a, int256 b) external pure returns (int256) {\n        return FixedPoint.Signed(a).divAwayFromZero(b).rawValue;\n    }\n\n    // The second int256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapMixedDivOpposite(int256 a, int256 b) external pure returns (int256) {\n        return a.div(FixedPoint.Signed(b)).rawValue;\n    }\n\n    // The first int256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapPow(int256 a, uint256 b) external pure returns (int256) {\n        return FixedPoint.Signed(a).pow(b).rawValue;\n    }\n}\n"
    },
    "contracts/UMA/common/test/PerpetualMock.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../common/implementation/FixedPoint.sol\";\n\n/**\n * @title Simple Perpetual Mock to serve trivial functions\n */\ncontract PerpetualMock {\n    struct FundingRate {\n        FixedPoint.Signed rate;\n        bytes32 identifier;\n        FixedPoint.Unsigned cumulativeMultiplier;\n        uint256 updateTime;\n        uint256 applicationTime;\n        uint256 proposalTime;\n    }\n\n    using FixedPoint for FixedPoint.Unsigned;\n    using FixedPoint for FixedPoint.Signed;\n\n    FundingRate public fundingRate;\n\n    // Interface functions required to be implemented in order for an instance of this contract to be passed into the\n    // off-chain FinancialContractClient helper module:\n    FixedPoint.Unsigned public collateralRequirement;\n    uint256 public liquidationLiveness;\n    FixedPoint.Unsigned public cumulativeFeeMultiplier;\n    mapping(address => uint256) public positions;\n    mapping(address => uint256) public liquidations;\n    event NewSponsor(address indexed sponsor);\n    event EndedSponsorPosition();\n    event LiquidationCreated();\n\n    function getCurrentTime() public view returns (uint256) {\n        return block.timestamp;\n    }\n\n    // Public methods that are useful for tests:\n    function setFundingRate(FundingRate memory _fundingRate) external {\n        fundingRate = _fundingRate;\n    }\n\n    function applyFundingRate() external {\n        fundingRate.applicationTime = block.timestamp;\n        // Simplified rate calcualtion.\n        // multiplier = multiplier * (1 + rate)\n        fundingRate.cumulativeMultiplier = fundingRate.cumulativeMultiplier.mul(\n            FixedPoint.fromSigned(FixedPoint.fromUnscaledInt(1).add(fundingRate.rate))\n        );\n    }\n}\n"
    },
    "contracts/UMA/oracle/test/MockOracleCombined.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./MockOracleAncillary.sol\";\n\n// A mock oracle used for testing. Allows both ancillary and non-ancillary methods to be called.\ncontract MockOracleCombined is MockOracleAncillary {\n    constructor(address _finderAddress, address _timerAddress) MockOracleAncillary(_finderAddress, _timerAddress) {}\n\n    // Enqueues a request (if a request isn't already present) for the given (identifier, time) pair.\n    function requestPrice(bytes32 identifier, uint256 time) public {\n        requestPrice(identifier, time, \"\");\n    }\n\n    // Pushes the verified price for a requested query.\n    function pushPrice(\n        bytes32 identifier,\n        uint256 time,\n        int256 price\n    ) external {\n        pushPrice(identifier, time, \"\", price);\n    }\n\n    // Checks whether a price has been resolved.\n    function hasPrice(bytes32 identifier, uint256 time) public view returns (bool) {\n        return hasPrice(identifier, time, \"\");\n    }\n\n    // Gets a price that has already been resolved.\n    function getPrice(bytes32 identifier, uint256 time) public view returns (int256) {\n        return getPrice(identifier, time, \"\");\n    }\n}\n"
    },
    "contracts/UMA/common/test/ReentrancyMock.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../implementation/Lockable.sol\";\nimport \"./ReentrancyAttack.sol\";\n\n// Tests reentrancy guards defined in Lockable.sol.\n// Extends https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/mocks/ReentrancyMock.sol.\ncontract ReentrancyMock is Lockable {\n    uint256 public counter;\n\n    constructor() {\n        counter = 0;\n    }\n\n    function callback() external nonReentrant {\n        _count();\n    }\n\n    function countAndSend(ReentrancyAttack attacker) external nonReentrant {\n        _count();\n        bytes4 func = bytes4(keccak256(\"callback()\"));\n        attacker.callSender(func);\n    }\n\n    function countAndCall(ReentrancyAttack attacker) external nonReentrant {\n        _count();\n        bytes4 func = bytes4(keccak256(\"getCount()\"));\n        attacker.callSender(func);\n    }\n\n    function countLocalRecursive(uint256 n) public nonReentrant {\n        if (n > 0) {\n            _count();\n            countLocalRecursive(n - 1);\n        }\n    }\n\n    function countThisRecursive(uint256 n) public nonReentrant {\n        if (n > 0) {\n            _count();\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success, ) = address(this).call(abi.encodeWithSignature(\"countThisRecursive(uint256)\", n - 1));\n            require(success, \"ReentrancyMock: failed call\");\n        }\n    }\n\n    function countLocalCall() public nonReentrant {\n        getCount();\n    }\n\n    function countThisCall() public nonReentrant {\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, ) = address(this).call(abi.encodeWithSignature(\"getCount()\"));\n        require(success, \"ReentrancyMock: failed call\");\n    }\n\n    function getCount() public view nonReentrantView returns (uint256) {\n        return counter;\n    }\n\n    function _count() private {\n        counter += 1;\n    }\n}\n"
    },
    "contracts/UMA/common/test/ReentrancyAttack.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\n// Tests reentrancy guards defined in Lockable.sol.\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/mocks/ReentrancyAttack.sol.\ncontract ReentrancyAttack {\n    function callSender(bytes4 data) public {\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, ) = msg.sender.call(abi.encodeWithSelector(data));\n        require(success, \"ReentrancyAttack: failed call\");\n    }\n}\n"
    },
    "contracts/test/SumeroLpToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\ncontract SumeroLpToken is ERC20, Ownable{\n    string internal constant NAME = \"Sumero LP Token\";\n    string internal constant SYMBOL = \"SLPT\";\n    uint8 internal constant DECIMALS = 18;\n\n    constructor() ERC20(\"Sumero LP Token\", \"SLPT\") {\n    }\n\n    function mint(address _to, uint256 _amount) public onlyOwner {\n        _mint(_to, _amount);\n    }\n\n    function burn(address account, uint256 amount) public onlyOwner {\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/ClayToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract ClayToken is ERC20, AccessControl {\n    string internal constant NAME = \"Clay Token\";\n    string internal constant SYMBOL = \"CLAY\";\n    uint8 internal constant DECIMALS = 18;\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\");\n\n    constructor() ERC20(\"Clay Token\", \"CLAY\") {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(MINTER_ROLE, msg.sender);\n        _setupRole(BURNER_ROLE, msg.sender);\n    }\n\n    function mint(address _to, uint256 _amount) public {\n        require(hasRole(MINTER_ROLE, msg.sender), \"Caller is not a minter\");\n        _mint(_to, _amount);\n    }\n\n    function burn(address account, uint256 amount) public {\n        require(hasRole(BURNER_ROLE, msg.sender), \"Caller is not a burner\");\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/UMA/common/test/MintableERC721.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\n// Test ERC721 contract that allows free minting\ncontract MintableERC721 is ERC721 {\n    constructor(string memory _name, string memory _symbol) ERC721(_name, _symbol) {}\n\n    function mint(address to, uint256 tokenId) public {\n        _safeMint(to, tokenId);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}