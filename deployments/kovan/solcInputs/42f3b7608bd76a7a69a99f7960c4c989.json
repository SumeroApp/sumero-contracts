{
  "language": "Solidity",
  "sources": {
    "contracts/ClayToken.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport './interfaces/ITransferHook.sol';\n\n// SushiToken with Governance.\ncontract ClayToken is ERC20, Ownable {\n    using SafeMath for uint256;\n\n    string internal constant NAME = 'Clay Token';\n    string internal constant SYMBOL = 'CLAY';\n    uint8 internal constant DECIMALS = 18;\n\n    uint256 public constant REVISION = 2;\n    enum DelegationType {\n        VOTING_POWER,\n        PROPOSITION_POWER\n    }\n    event DelegateChanged(\n        address indexed delegator,\n        address indexed delegatee,\n        DelegationType delegationType\n    );\n    event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\n    /// @dev owner => next valid nonce to submit with permit()\n    mapping(address => uint256) public _nonces;\n\n    mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\n\n    mapping(address => uint256) public _votingSnapshotsCounts;\n\n    /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\n    /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\n    /// to control all potential reentrancies by calling back the AaveToken\n    ITransferHook public _aaveGovernance;\n\n    bytes32 public DOMAIN_SEPARATOR;\n    bytes public constant EIP712_REVISION = bytes('1');\n    bytes32 internal constant EIP712_DOMAIN =\n        keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\n    bytes32 public constant PERMIT_TYPEHASH =\n        keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\n\n    mapping(address => address) internal _votingDelegates;\n\n    mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\n    mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\n\n    mapping(address => address) internal _propositionPowerDelegates;\n\n    constructor() public ERC20('Clay Token', 'CLAY') {\n        uint256 chainId;\n\n        //solium-disable-next-line\n        assembly {\n            chainId := chainid()\n        }\n\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                EIP712_DOMAIN,\n                keccak256(bytes(NAME)),\n                keccak256(EIP712_REVISION),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    /**\n     * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\n     * @param owner the owner of the funds\n     * @param spender the spender\n     * @param value the amount\n     * @param deadline the deadline timestamp, type(uint256).max for no deadline\n     * @param v signature param\n     * @param s signature param\n     * @param r signature param\n     */\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        require(owner != address(0), 'INVALID_OWNER');\n        //solium-disable-next-line\n        require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\n        uint256 currentValidNonce = _nonces[owner];\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                '\\x19\\x01',\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\n            )\n        );\n\n        require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\n        _nonces[owner] = currentValidNonce.add(1);\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev returns the revision of the implementation contract\n     */\n    function getRevision() internal pure returns (uint256) {\n        return REVISION;\n    }\n\n    /**\n     * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\n     * - On _transfer, it writes snapshots for both \"from\" and \"to\"\n     * - On _mint, only for _to\n     * - On _burn, only for _from\n     * @param from the from address\n     * @param to the to address\n     * @param amount the amount to transfer\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        address votingFromDelegatee = _getDelegatee(from, _votingDelegates);\n        address votingToDelegatee = _getDelegatee(to, _votingDelegates);\n\n        _moveDelegatesByType(votingFromDelegatee, votingToDelegatee, amount, DelegationType.VOTING_POWER);\n\n        address propPowerFromDelegatee = _getDelegatee(from, _propositionPowerDelegates);\n        address propPowerToDelegatee = _getDelegatee(to, _propositionPowerDelegates);\n\n        _moveDelegatesByType(\n            propPowerFromDelegatee,\n            propPowerToDelegatee,\n            amount,\n            DelegationType.PROPOSITION_POWER\n        );\n\n        // caching the aave governance address to avoid multiple state loads\n        ITransferHook aaveGovernance = _aaveGovernance;\n        if (aaveGovernance != ITransferHook(0)) {\n            aaveGovernance.onTransfer(from, to, amount);\n        }\n    }\n\n    function _getDelegationDataByType(DelegationType delegationType)\n        internal\n        view\n        returns (\n            mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\n            mapping(address => uint256) storage, //snapshots count\n            mapping(address => address) storage //delegatees list\n        )\n    {\n        if (delegationType == DelegationType.VOTING_POWER) {\n            return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\n        } else {\n            return (_propositionPowerSnapshots, _propositionPowerSnapshotsCounts, _propositionPowerDelegates);\n        }\n    }\n\n    /**\n     * @dev Delegates power from signatory to `delegatee`\n     * @param delegatee The address to delegate votes to\n     * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\n     * @param nonce The contract state required to match the signature\n     * @param expiry The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function delegateByTypeBySig(\n        address delegatee,\n        DelegationType delegationType,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        bytes32 structHash = keccak256(\n            abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\n        );\n        bytes32 digest = keccak256(abi.encodePacked('\\x19\\x01', DOMAIN_SEPARATOR, structHash));\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), 'INVALID_SIGNATURE');\n        require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\n        require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\n        _delegateByType(signatory, delegatee, delegationType);\n    }\n\n    /**\n     * @dev Delegates power from signatory to `delegatee`\n     * @param delegatee The address to delegate votes to\n     * @param nonce The contract state required to match the signature\n     * @param expiry The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\n        bytes32 digest = keccak256(abi.encodePacked('\\x19\\x01', DOMAIN_SEPARATOR, structHash));\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), 'INVALID_SIGNATURE');\n        require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\n        require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\n        _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\n        _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\n    }\n\n    bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\n        keccak256('DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)');\n\n    bytes32 public constant DELEGATE_TYPEHASH =\n        keccak256('Delegate(address delegatee,uint256 nonce,uint256 expiry)');\n\n    /// @dev snapshot of a value on a specific block, used for votes\n    struct Snapshot {\n        uint128 blockNumber;\n        uint128 value;\n    }\n\n    /**\n     * @dev delegates one specific power to a delegatee\n     * @param delegatee the user which delegated power has changed\n     * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\n     **/\n    function delegateByType(address delegatee, DelegationType delegationType) external {\n        _delegateByType(msg.sender, delegatee, delegationType);\n    }\n\n    /**\n     * @dev delegates all the powers to a specific user\n     * @param delegatee the user to which the power will be delegated\n     **/\n    function delegate(address delegatee) external {\n        _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\n        _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\n    }\n\n    /**\n     * @dev returns the delegatee of an user\n     * @param delegator the address of the delegator\n     **/\n    function getDelegateeByType(address delegator, DelegationType delegationType)\n        external\n        view\n        returns (address)\n    {\n        (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\n\n        return _getDelegatee(delegator, delegates);\n    }\n\n    /**\n     * @dev returns the current delegated power of a user. The current power is the\n     * power delegated at the time of the last snapshot\n     * @param user the user\n     **/\n    function getPowerCurrent(address user, DelegationType delegationType) external view returns (uint256) {\n        (\n            mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\n            mapping(address => uint256) storage snapshotsCounts,\n\n        ) = _getDelegationDataByType(delegationType);\n\n        return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\n    }\n\n    /**\n     * @dev returns the delegated power of a user at a certain block\n     * @param user the user\n     **/\n    function getPowerAtBlock(\n        address user,\n        uint256 blockNumber,\n        DelegationType delegationType\n    ) external view returns (uint256) {\n        (\n            mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\n            mapping(address => uint256) storage snapshotsCounts,\n\n        ) = _getDelegationDataByType(delegationType);\n\n        return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\n    }\n\n    /**\n     * @dev returns the total supply at a certain block number\n     * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\n     * In this initial implementation with no AAVE minting, simply returns the current supply\n     * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\n     **/\n    function totalSupplyAt(uint256 blockNumber) external view returns (uint256) {\n        return super.totalSupply();\n    }\n\n    /**\n     * @dev delegates the specific power to a delegatee\n     * @param delegatee the user which delegated power has changed\n     * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\n     **/\n    function _delegateByType(\n        address delegator,\n        address delegatee,\n        DelegationType delegationType\n    ) internal {\n        require(delegatee != address(0), 'INVALID_DELEGATEE');\n\n        (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\n\n        uint256 delegatorBalance = balanceOf(delegator);\n\n        address previousDelegatee = _getDelegatee(delegator, delegates);\n\n        delegates[delegator] = delegatee;\n\n        _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\n        emit DelegateChanged(delegator, delegatee, delegationType);\n    }\n\n    /**\n     * @dev moves delegated power from one user to another\n     * @param from the user from which delegated power is moved\n     * @param to the user that will receive the delegated power\n     * @param amount the amount of delegated power to be moved\n     * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\n     **/\n    function _moveDelegatesByType(\n        address from,\n        address to,\n        uint256 amount,\n        DelegationType delegationType\n    ) internal {\n        if (from == to) {\n            return;\n        }\n\n        (\n            mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\n            mapping(address => uint256) storage snapshotsCounts,\n\n        ) = _getDelegationDataByType(delegationType);\n\n        if (from != address(0)) {\n            uint256 previous = 0;\n            uint256 fromSnapshotsCount = snapshotsCounts[from];\n\n            if (fromSnapshotsCount != 0) {\n                previous = snapshots[from][fromSnapshotsCount - 1].value;\n            } else {\n                previous = balanceOf(from);\n            }\n\n            _writeSnapshot(\n                snapshots,\n                snapshotsCounts,\n                from,\n                uint128(previous),\n                uint128(previous.sub(amount))\n            );\n\n            emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\n        }\n        if (to != address(0)) {\n            uint256 previous = 0;\n            uint256 toSnapshotsCount = snapshotsCounts[to];\n            if (toSnapshotsCount != 0) {\n                previous = snapshots[to][toSnapshotsCount - 1].value;\n            } else {\n                previous = balanceOf(to);\n            }\n\n            _writeSnapshot(snapshots, snapshotsCounts, to, uint128(previous), uint128(previous.add(amount)));\n\n            emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\n        }\n    }\n\n    /**\n     * @dev searches a snapshot by block number. Uses binary search.\n     * @param snapshots the snapshots mapping\n     * @param snapshotsCounts the number of snapshots\n     * @param user the user for which the snapshot is being searched\n     * @param blockNumber the block number being searched\n     **/\n    function _searchByBlockNumber(\n        mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\n        mapping(address => uint256) storage snapshotsCounts,\n        address user,\n        uint256 blockNumber\n    ) internal view returns (uint256) {\n        require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\n\n        uint256 snapshotsCount = snapshotsCounts[user];\n\n        if (snapshotsCount == 0) {\n            return balanceOf(user);\n        }\n\n        // First check most recent balance\n        if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\n            return snapshots[user][snapshotsCount - 1].value;\n        }\n\n        // Next check implicit zero balance\n        if (snapshots[user][0].blockNumber > blockNumber) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = snapshotsCount - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Snapshot memory snapshot = snapshots[user][center];\n            if (snapshot.blockNumber == blockNumber) {\n                return snapshot.value;\n            } else if (snapshot.blockNumber < blockNumber) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return snapshots[user][lower].value;\n    }\n\n    /**\n     * @dev Writes a snapshot for an owner of tokens\n     * @param owner The owner of the tokens\n     * @param oldValue The value before the operation that is gonna be executed after the snapshot\n     * @param newValue The value after the operation\n     */\n    function _writeSnapshot(\n        mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\n        mapping(address => uint256) storage snapshotsCounts,\n        address owner,\n        uint128 oldValue,\n        uint128 newValue\n    ) internal {\n        uint128 currentBlock = uint128(block.number);\n\n        uint256 ownerSnapshotsCount = snapshotsCounts[owner];\n        mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\n\n        // Doing multiple operations in the same block\n        if (ownerSnapshotsCount != 0 && snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock) {\n            snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\n        } else {\n            snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\n            snapshotsCounts[owner] = ownerSnapshotsCount + 1;\n        }\n    }\n\n    /**\n     * @dev returns the user delegatee. If a user never performed any delegation,\n     * his delegated address will be 0x0. In that case we simply return the user itself\n     * @param delegator the address of the user for which return the delegatee\n     * @param delegates the array of delegates for a particular type of delegation\n     **/\n    function _getDelegatee(address delegator, mapping(address => address) storage delegates)\n        internal\n        view\n        returns (address)\n    {\n        address previousDelegatee = delegates[delegator];\n\n        if (previousDelegatee == address(0)) {\n            return delegator;\n        }\n\n        return previousDelegatee;\n    }\n\n    function mint(address _to, uint256 _amount) public onlyOwner {\n        _mint(_to, _amount);\n        _moveDelegatesByType(address(0), _to, _amount, DelegationType.VOTING_POWER);\n        _moveDelegatesByType(address(0), _to, _amount, DelegationType.PROPOSITION_POWER);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/interfaces/ITransferHook.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.6.12;\n\ninterface ITransferHook {\n    function onTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/test/MockERC20.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\ncontract MockERC20 is ERC20 {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 supply\n    ) public ERC20(name, symbol) {\n        _mint(msg.sender, supply);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}